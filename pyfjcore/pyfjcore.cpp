/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
      newstr = (char *) malloc(len+1);
      if (newstr)
        memcpy(newstr, cstr, len+1);
    }
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    return PyDict_SetItem(dict, SWIG_This(), swig_this);
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_StructureType swig_types[0]
#define SWIGTYPE_p_allocator_type swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_difference_type swig_types[3]
#define SWIGTYPE_p_double swig_types[4]
#define SWIGTYPE_p_fastjet__ClusterSequence swig_types[5]
#define SWIGTYPE_p_fastjet__ClusterSequenceAreaBase swig_types[6]
#define SWIGTYPE_p_fastjet__ClusterSequenceStructure swig_types[7]
#define SWIGTYPE_p_fastjet__ClusterSequence__Extras swig_types[8]
#define SWIGTYPE_p_fastjet__CompositeJetStructure swig_types[9]
#define SWIGTYPE_p_fastjet__Error swig_types[10]
#define SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t swig_types[11]
#define SWIGTYPE_p_fastjet__InternalError swig_types[12]
#define SWIGTYPE_p_fastjet__JetAlgorithm swig_types[13]
#define SWIGTYPE_p_fastjet__JetDefinition swig_types[14]
#define SWIGTYPE_p_fastjet__JetDefinition__Plugin swig_types[15]
#define SWIGTYPE_p_fastjet__JetDefinition__Recombiner swig_types[16]
#define SWIGTYPE_p_fastjet__PseudoJet swig_types[17]
#define SWIGTYPE_p_fastjet__PseudoJetStructureBase swig_types[18]
#define SWIGTYPE_p_fastjet__PseudoJet__UserInfoBase swig_types[19]
#define SWIGTYPE_p_fastjet__Selector swig_types[20]
#define SWIGTYPE_p_fastjet__SelectorWorker swig_types[21]
#define SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t swig_types[22]
#define SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t swig_types[23]
#define SWIGTYPE_p_fastjet__SharedPtrT_fastjet__SelectorWorker_t swig_types[24]
#define SWIGTYPE_p_fastjet__integral_typeT_bool_false_t swig_types[25]
#define SWIGTYPE_p_fastjet__integral_typeT_bool_true_t swig_types[26]
#define SWIGTYPE_p_int swig_types[27]
#define SWIGTYPE_p_p_PyObject swig_types[28]
#define SWIGTYPE_p_p_double swig_types[29]
#define SWIGTYPE_p_p_fastjet__PseudoJet swig_types[30]
#define SWIGTYPE_p_p_int swig_types[31]
#define SWIGTYPE_p_size_type swig_types[32]
#define SWIGTYPE_p_std__allocatorT_fastjet__PseudoJet_t swig_types[33]
#define SWIGTYPE_p_std__invalid_argument swig_types[34]
#define SWIGTYPE_p_std__ostream swig_types[35]
#define SWIGTYPE_p_std__valarrayT_double_t swig_types[36]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[37]
#define SWIGTYPE_p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t swig_types[38]
#define SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t swig_types[39]
#define SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t swig_types[40]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[41]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[42]
#define SWIGTYPE_p_value_type swig_types[43]
static swig_type_info *swig_types[45];
static swig_module_info swig_module = {swig_types, 44, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _pyfjcore.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__pyfjcore

#else
#  define SWIG_init    init_pyfjcore

#endif
#define SWIG_name    "_pyfjcore"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#define SWIG_FILE_WITH_INIT


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <complex> 


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_clearflags(a,f)  (((PyArrayObject*)a)->flags) &= ~f
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#define array_clearflags(a,f)  PyArray_CLEARFLAGS((PyArrayObject*)a,f)
#define array_is_fortran(a)    (PyArray_IS_F_CONTIGUOUS((PyArrayObject*)a))
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))


// include these to avoid needing to define them at compile time 
#ifndef SWIG
#define SWIG
#endif

// C++ library headers
#include <cstdlib>
#include <cstring>

// PyFJCore headers
#include "fjcore.hh"
#include "PyFJCoreExtensions.hh"

// using namespaces
using namespace fastjet;

// Python class for representing errors from FastJet
static PyObject * FastJetError_;



namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check() const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item))
	  return false;
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits< fastjet::PseudoJet > {
      typedef pointer_category category;
      static const char* type_name() { return"fastjet::PseudoJet"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< fastjet::PseudoJet, std::allocator< fastjet::PseudoJet > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "fastjet::PseudoJet" "," "std::allocator< fastjet::PseudoJet >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_fastjet_PseudoJet_Sg__iterator(std::vector< fastjet::PseudoJet > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_fastjet_PseudoJet_Sg____nonzero__(std::vector< fastjet::PseudoJet > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_fastjet_PseudoJet_Sg____bool__(std::vector< fastjet::PseudoJet > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< fastjet::PseudoJet >::size_type std_vector_Sl_fastjet_PseudoJet_Sg____len__(std::vector< fastjet::PseudoJet > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *std_vector_Sl_fastjet_PseudoJet_Sg____getslice__(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setslice____SWIG_0(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >());
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setslice____SWIG_1(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::difference_type j,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____delslice__(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____delitem____SWIG_0(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *std_vector_Sl_fastjet_PseudoJet_Sg____getitem____SWIG_0(std::vector< fastjet::PseudoJet > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type id = i;
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_0(std::vector< fastjet::PseudoJet > *self,PySliceObject *slice,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type id = i;
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_1(std::vector< fastjet::PseudoJet > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type id = i;
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____delitem____SWIG_1(std::vector< fastjet::PseudoJet > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type id = i;
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< fastjet::PseudoJet >::value_type const &std_vector_Sl_fastjet_PseudoJet_Sg____getitem____SWIG_1(std::vector< fastjet::PseudoJet > const *self,std::vector< fastjet::PseudoJet >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_2(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< fastjet::PseudoJet >::value_type std_vector_Sl_fastjet_PseudoJet_Sg__pop(std::vector< fastjet::PseudoJet > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg__append(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< fastjet::PseudoJet >::iterator std_vector_Sl_fastjet_PseudoJet_Sg__erase__SWIG_0(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< fastjet::PseudoJet >::iterator std_vector_Sl_fastjet_PseudoJet_Sg__erase__SWIG_1(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::iterator first,std::vector< fastjet::PseudoJet >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< fastjet::PseudoJet >::iterator std_vector_Sl_fastjet_PseudoJet_Sg__insert__SWIG_0(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::iterator pos,std::vector< fastjet::PseudoJet >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg__insert__SWIG_1(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::iterator pos,std::vector< fastjet::PseudoJet >::size_type n,std::vector< fastjet::PseudoJet >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN std::string fastjet_PseudoJet___repr__(fastjet::PseudoJet *self){
      const unsigned len_max = 512;
      char temp[len_max];
      if (PseudoJetRep_ == PseudoJetRepresentation::ptyphim)
        snprintf(temp, len_max, "PseudoJet(pt=%.6g, y=%.6g, phi=%.6g, m=%.6g)",
                 self->pt(), self->rap(), self->phi(),
                 [](double m){return std::fabs(m) < 1e-6 ? 0 : m;}(self->m()));
      else if (PseudoJetRep_ == PseudoJetRepresentation::epxpypz)
        snprintf(temp, len_max, "PseudoJet(e=%.6g, px=%.6g, py=%.6g, pz=%.6g)",
                 self->e(), self->px(), self->py(), self->pz());
      else
        snprintf(temp, len_max, "PseudoJet(pt=%.6g, y=%.6g, phi=%.6g)",
                 self->pt(), self->rap(), self->phi());
      return std::string(temp);
    }
SWIGINTERN void fastjet_PseudoJet_set_python_info(fastjet::PseudoJet *self,PyObject *pyobj){
      UserInfoPython * new_python_info = new UserInfoPython(pyobj);
      self->set_user_info(new_python_info);
    }
SWIGINTERN PyObject *fastjet_PseudoJet_python_info(fastjet::PseudoJet const *self){
      if (self->has_user_info())
        return self->user_info<UserInfoPython>().get_pyobj();
      Py_RETURN_NONE;
    }
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___add__(fastjet::PseudoJet *self,fastjet::PseudoJet const &p){ return *(self) + p; }
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___sub__(fastjet::PseudoJet *self,fastjet::PseudoJet const &p){ return *(self) - p; }
SWIGINTERN bool fastjet_PseudoJet___eq____SWIG_0(fastjet::PseudoJet *self,fastjet::PseudoJet const &p){ return *(self) == p; }
SWIGINTERN bool fastjet_PseudoJet___ne____SWIG_0(fastjet::PseudoJet *self,fastjet::PseudoJet const &p){ return *(self) != p; }
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___mul__(fastjet::PseudoJet *self,double x){ return *(self) * x; }
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___rmul__(fastjet::PseudoJet *self,double x){ return *(self) * x; }
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___div__(fastjet::PseudoJet *self,double x){ return *(self) / x; }
SWIGINTERN bool fastjet_PseudoJet___eq____SWIG_1(fastjet::PseudoJet *self,double x){ return *(self) == x; }
SWIGINTERN bool fastjet_PseudoJet___ne____SWIG_1(fastjet::PseudoJet *self,double x){ return *(self) != x; }

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}

SWIGINTERN fastjet::Selector fastjet_Selector___mul__(fastjet::Selector *self,fastjet::Selector const &other){ return *(self) *  other; }
SWIGINTERN fastjet::Selector fastjet_Selector___and__(fastjet::Selector *self,fastjet::Selector const &other){ return *(self) && other; }
SWIGINTERN fastjet::Selector fastjet_Selector___or__(fastjet::Selector *self,fastjet::Selector const &other){ return *(self) || other; }
SWIGINTERN fastjet::Selector fastjet_Selector___invert__(fastjet::Selector *self){ return !(*(self)); }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > fastjet_JetDefinition___call__(fastjet::JetDefinition *self,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &particles){
      return (*self)(particles);
    }

SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyBytes_Check(   py_obj)) return "string"      ;
    if (PyLong_Check(    py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;

    return "unknown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
#if NPY_API_VERSION < 0x00000007
                                                  NPY_FORTRANORDER);
#else
                                                  NPY_ARRAY_F_CONTIGUOUS);
#endif
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Test whether a python object is (C_ or F_) contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_c_or_f_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!(array_is_contiguous(ary) || array_is_fortran(ary)))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous (C_ or F_).  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    size_t len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    int n_non_one = 0;
    /* Set the Fortran ordered flag */
    const npy_intp *dims = array_dimensions(ary);
    for (i=0; i < nd; ++i)
      n_non_one += (dims[i] != 1) ? 1 : 0;
    if (n_non_one > 1)
      array_clearflags(ary,NPY_ARRAY_CARRAY);
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }



#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"n",  NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:SwigPyIterator_incr", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"n",  NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:SwigPyIterator_decr", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  ptrdiff_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SwigPyIterator_distance", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SwigPyIterator_equal", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"n",  NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SwigPyIterator_advance", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SwigPyIterator___eq__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SwigPyIterator___ne__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"n",  NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SwigPyIterator___iadd__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"n",  NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SwigPyIterator___isub__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"n",  NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SwigPyIterator___add__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorPseudoJet_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_iterator" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_fastjet_PseudoJet_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___nonzero__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (bool)std_vector_Sl_fastjet_PseudoJet_Sg____nonzero__((std::vector< fastjet::PseudoJet > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___bool__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (bool)std_vector_Sl_fastjet_PseudoJet_Sg____bool__((std::vector< fastjet::PseudoJet > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___len__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = std_vector_Sl_fastjet_PseudoJet_Sg____len__((std::vector< fastjet::PseudoJet > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"j",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:vectorPseudoJet___getslice__", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___getslice__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet___getslice__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPseudoJet___getslice__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val3);
  try {
    result = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)std_vector_Sl_fastjet_PseudoJet_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___setslice__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet___setslice__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPseudoJet___setslice__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val3);
  try {
    std_vector_Sl_fastjet_PseudoJet_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::difference_type arg3 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___setslice__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet___setslice__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPseudoJet___setslice__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val3);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPseudoJet___setslice__" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet___setslice__" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_fastjet_PseudoJet_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPseudoJet___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectorPseudoJet___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorPseudoJet___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPseudoJet___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::__setslice__(std::vector< fastjet::PseudoJet >::difference_type,std::vector< fastjet::PseudoJet >::difference_type)\n"
    "    std::vector< fastjet::PseudoJet >::__setslice__(std::vector< fastjet::PseudoJet >::difference_type,std::vector< fastjet::PseudoJet >::difference_type,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"j",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:vectorPseudoJet___delslice__", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___delslice__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet___delslice__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPseudoJet___delslice__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val3);
  try {
    std_vector_Sl_fastjet_PseudoJet_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___delitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet___delitem__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  try {
    std_vector_Sl_fastjet_PseudoJet_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___getitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)std_vector_Sl_fastjet_PseudoJet_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___setitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPseudoJet___setitem__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet___setitem__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___setitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___delitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_fastjet_PseudoJet_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPseudoJet___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorPseudoJet___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorPseudoJet___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPseudoJet___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::__delitem__(std::vector< fastjet::PseudoJet >::difference_type)\n"
    "    std::vector< fastjet::PseudoJet >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< fastjet::PseudoJet >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___getitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet___getitem__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  try {
    result = (std::vector< fastjet::PseudoJet >::value_type *) &std_vector_Sl_fastjet_PseudoJet_Sg____getitem____SWIG_1((std::vector< fastjet::PseudoJet > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< fastjet::PseudoJet >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPseudoJet___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorPseudoJet___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorPseudoJet___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPseudoJet___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::__getitem__(PySliceObject *)\n"
    "    std::vector< fastjet::PseudoJet >::__getitem__(std::vector< fastjet::PseudoJet >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet___setitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet___setitem__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPseudoJet___setitem__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet___setitem__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp3);
  try {
    std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_2(arg1,arg2,(fastjet::PseudoJet const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPseudoJet___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorPseudoJet___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorPseudoJet___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorPseudoJet___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPseudoJet___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::__setitem__(PySliceObject *,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)\n"
    "    std::vector< fastjet::PseudoJet >::__setitem__(PySliceObject *)\n"
    "    std::vector< fastjet::PseudoJet >::__setitem__(std::vector< fastjet::PseudoJet >::difference_type,std::vector< fastjet::PseudoJet >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_pop" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  try {
    result = std_vector_Sl_fastjet_PseudoJet_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< fastjet::PseudoJet >::value_type(static_cast< const std::vector< fastjet::PseudoJet >::value_type& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:vectorPseudoJet_append", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_append" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPseudoJet_append" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet_append" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp2);
  std_vector_Sl_fastjet_PseudoJet_Sg__append(arg1,(fastjet::PseudoJet const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorPseudoJet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< fastjet::PseudoJet > *)new std::vector< fastjet::PseudoJet >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorPseudoJet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< fastjet::PseudoJet > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorPseudoJet" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPseudoJet" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< fastjet::PseudoJet > *)new std::vector< fastjet::PseudoJet >((std::vector< fastjet::PseudoJet > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_empty" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (bool)((std::vector< fastjet::PseudoJet > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_size" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = ((std::vector< fastjet::PseudoJet > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"v",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:vectorPseudoJet_swap", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_swap" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPseudoJet_swap" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet_swap" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_begin" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_end" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_rbegin" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_rend" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_clear" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< fastjet::PseudoJet > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_get_allocator" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = ((std::vector< fastjet::PseudoJet > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< fastjet::PseudoJet >::allocator_type(static_cast< const std::vector< fastjet::PseudoJet >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_fastjet__PseudoJet_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorPseudoJet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< fastjet::PseudoJet > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPseudoJet" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg1 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val1);
  result = (std::vector< fastjet::PseudoJet > *)new std::vector< fastjet::PseudoJet >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_pop_back" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_resize" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet_resize" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_erase" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_erase" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_erase" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  result = std_vector_Sl_fastjet_PseudoJet_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::iterator arg2 ;
  std::vector< fastjet::PseudoJet >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_erase" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_erase" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_erase" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_erase" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_erase" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  result = std_vector_Sl_fastjet_PseudoJet_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPseudoJet_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorPseudoJet_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorPseudoJet_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPseudoJet_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::erase(std::vector< fastjet::PseudoJet >::iterator)\n"
    "    std::vector< fastjet::PseudoJet >::erase(std::vector< fastjet::PseudoJet >::iterator,std::vector< fastjet::PseudoJet >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vectorPseudoJet__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet >::size_type arg1 ;
  std::vector< fastjet::PseudoJet >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< fastjet::PseudoJet > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPseudoJet" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg1 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorPseudoJet" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPseudoJet" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp2);
  result = (std::vector< fastjet::PseudoJet > *)new std::vector< fastjet::PseudoJet >(arg1,(std::vector< fastjet::PseudoJet >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorPseudoJet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vectorPseudoJet", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vectorPseudoJet__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorPseudoJet__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorPseudoJet__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorPseudoJet__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vectorPseudoJet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::vector()\n"
    "    std::vector< fastjet::PseudoJet >::vector(std::vector< fastjet::PseudoJet > const &)\n"
    "    std::vector< fastjet::PseudoJet >::vector(std::vector< fastjet::PseudoJet >::size_type)\n"
    "    std::vector< fastjet::PseudoJet >::vector(std::vector< fastjet::PseudoJet >::size_type,std::vector< fastjet::PseudoJet >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:vectorPseudoJet_push_back", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_push_back" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPseudoJet_push_back" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet_push_back" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp2);
  (arg1)->push_back((std::vector< fastjet::PseudoJet >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_front" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (std::vector< fastjet::PseudoJet >::value_type *) &((std::vector< fastjet::PseudoJet > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< fastjet::PseudoJet >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_back" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = (std::vector< fastjet::PseudoJet >::value_type *) &((std::vector< fastjet::PseudoJet > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< fastjet::PseudoJet >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::size_type arg2 ;
  std::vector< fastjet::PseudoJet >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"n",  (char *)"x",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:vectorPseudoJet_assign", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_assign" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet_assign" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPseudoJet_assign" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet_assign" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< fastjet::PseudoJet >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::size_type arg2 ;
  std::vector< fastjet::PseudoJet >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_resize" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet_resize" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPseudoJet_resize" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet_resize" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< fastjet::PseudoJet >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPseudoJet_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorPseudoJet_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorPseudoJet_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPseudoJet_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::resize(std::vector< fastjet::PseudoJet >::size_type)\n"
    "    std::vector< fastjet::PseudoJet >::resize(std::vector< fastjet::PseudoJet >::size_type,std::vector< fastjet::PseudoJet >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::iterator arg2 ;
  std::vector< fastjet::PseudoJet >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_insert" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_insert" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_insert" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPseudoJet_insert" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet_insert" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp3);
  result = std_vector_Sl_fastjet_PseudoJet_Sg__insert__SWIG_0(arg1,arg2,(fastjet::PseudoJet const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::iterator arg2 ;
  std::vector< fastjet::PseudoJet >::size_type arg3 ;
  std::vector< fastjet::PseudoJet >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_insert" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_insert" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPseudoJet_insert" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPseudoJet_insert" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPseudoJet_insert" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPseudoJet_insert" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp4);
  std_vector_Sl_fastjet_PseudoJet_Sg__insert__SWIG_1(arg1,arg2,arg3,(fastjet::PseudoJet const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPseudoJet_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorPseudoJet_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorPseudoJet_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPseudoJet_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::insert(std::vector< fastjet::PseudoJet >::iterator,std::vector< fastjet::PseudoJet >::value_type const &)\n"
    "    std::vector< fastjet::PseudoJet >::insert(std::vector< fastjet::PseudoJet >::iterator,std::vector< fastjet::PseudoJet >::size_type,std::vector< fastjet::PseudoJet >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"n",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:vectorPseudoJet_reserve", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_reserve" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPseudoJet_reserve" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPseudoJet_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPseudoJet_capacity" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  result = ((std::vector< fastjet::PseudoJet > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorPseudoJet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorPseudoJet" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorPseudoJet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vectorPseudoJet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_pi_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable pi is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_pi_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::pi));
  return pyobj;
}


SWIGINTERN int Swig_var_twopi_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable twopi is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_twopi_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::twopi));
  return pyobj;
}


SWIGINTERN int Swig_var_pisq_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable pisq is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_pisq_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::pisq));
  return pyobj;
}


SWIGINTERN int Swig_var_zeta2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable zeta2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_zeta2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::zeta2));
  return pyobj;
}


SWIGINTERN int Swig_var_zeta3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable zeta3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_zeta3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::zeta3));
  return pyobj;
}


SWIGINTERN int Swig_var_eulergamma_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable eulergamma is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_eulergamma_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::eulergamma));
  return pyobj;
}


SWIGINTERN int Swig_var_ln2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ln2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ln2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::ln2));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_PseudoJetStructureBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_PseudoJetStructureBase", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (fastjet::PseudoJetStructureBase *)new fastjet::PseudoJetStructureBase(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJetStructureBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PseudoJetStructureBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PseudoJetStructureBase" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_description" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->description(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_associated_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJetStructureBase const *)arg1)->associated_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_valid_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_valid_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_valid_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_validated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_validated_cs" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJetStructureBase const *)arg1)->validated_cs(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_validated_csab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequenceAreaBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_validated_csab" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceAreaBase *)((fastjet::PseudoJetStructureBase const *)arg1)->validated_csab(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_partner(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"partner",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJetStructureBase_has_partner", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_partner" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJetStructureBase_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_partner((fastjet::PseudoJet const &)*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"child",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJetStructureBase_has_child", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_child" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJetStructureBase_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_child((fastjet::PseudoJet const &)*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"parent1",  (char *)"parent2",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:PseudoJetStructureBase_has_parents", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_parents" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJetStructureBase_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PseudoJetStructureBase_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_parents((fastjet::PseudoJet const &)*arg2,*arg3,*arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_object_in_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"jet",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJetStructureBase_object_in_jet", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->object_in_jet((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_constituents" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_constituents(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJetStructureBase_constituents", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_constituents" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->constituents((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_exclusive_subjets(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"dcut",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJetStructureBase_exclusive_subjets", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->exclusive_subjets((fastjet::PseudoJet const &)*arg2,(double const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_n_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"dcut",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJetStructureBase_n_exclusive_subjets", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_n_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_n_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      result = (int)((fastjet::PseudoJetStructureBase const *)arg1)->n_exclusive_subjets((fastjet::PseudoJet const &)*arg2,(double const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_exclusive_subjets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"nsub",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJetStructureBase_exclusive_subjets_up_to", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_exclusive_subjets_up_to" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_exclusive_subjets_up_to" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->exclusive_subjets_up_to((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_exclusive_subdmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"nsub",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJetStructureBase_exclusive_subdmerge", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_exclusive_subdmerge" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_exclusive_subdmerge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::PseudoJetStructureBase const *)arg1)->exclusive_subdmerge((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_exclusive_subdmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"nsub",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJetStructureBase_exclusive_subdmerge_max", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_exclusive_subdmerge_max" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_exclusive_subdmerge_max" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::PseudoJetStructureBase const *)arg1)->exclusive_subdmerge_max((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJetStructureBase_has_pieces", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_pieces" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_pieces((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJetStructureBase_pieces", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_pieces" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->pieces((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_area" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_area" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJetStructureBase const *)arg1)->area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_area_error" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJetStructureBase const *)arg1)->area_error(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::PseudoJet result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_area_4vector" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->area_4vector(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_is_pure_ghost" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->is_pure_ghost(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PseudoJetStructureBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__PseudoJetStructureBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PseudoJetStructureBase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_MaxRap_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MaxRap is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MaxRap_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::MaxRap));
  return pyobj;
}


SWIGINTERN int Swig_var_pseudojet_invalid_phi_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable pseudojet_invalid_phi is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_pseudojet_invalid_phi_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::pseudojet_invalid_phi));
  return pyobj;
}


SWIGINTERN int Swig_var_pseudojet_invalid_rap_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable pseudojet_invalid_rap is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_pseudojet_invalid_rap_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::pseudojet_invalid_rap));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_PseudoJet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (fastjet::PseudoJet *)new fastjet::PseudoJet(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PseudoJet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PseudoJet" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PseudoJet" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PseudoJet" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PseudoJet" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::PseudoJet *)new fastjet::PseudoJet(arg1,arg2,arg3,arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PseudoJet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PseudoJet" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      result = (fastjet::PseudoJet *)new fastjet::PseudoJet(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PseudoJet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PseudoJet", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PseudoJet__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PseudoJet__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_PseudoJet__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PseudoJet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::PseudoJet()\n"
    "    fastjet::PseudoJet::PseudoJet(double const,double const,double const,double const)\n"
    "    fastjet::PseudoJet::PseudoJet(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PseudoJet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PseudoJet" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_E(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_E" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->E(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_e(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_e" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->e(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_px(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_px" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->px(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_py(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_py" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->py(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pz" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->pz(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_phi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_phi" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->phi(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_phi_std(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_phi_std" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->phi_std(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_phi_02pi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_phi_02pi" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->phi_02pi(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_rap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_rap" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->rap(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_rapidity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_rapidity" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->rapidity(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pseudorapidity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pseudorapidity" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->pseudorapidity(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_eta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_eta" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->eta(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pt2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pt2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->pt2(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pt" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->pt(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_perp2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_perp2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->perp2(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_perp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_perp" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->perp(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_kt2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_kt2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->kt2(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_m2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_m2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->m2(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_m" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->m(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_mperp2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_mperp2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->mperp2(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_mperp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_mperp" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->mperp(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_mt2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_mt2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->mt2(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_mt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_mt" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->mt(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_modp2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_modp2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->modp2(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_modp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_modp" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->modp(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_Et(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_Et" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->Et(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_Et2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_Et2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->Et2(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_cos_theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_cos_theta" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->cos_theta(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_theta" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->theta(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___call__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___call__" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->operator ()(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_kt_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_kt_distance", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_kt_distance" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_kt_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_kt_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->kt_distance((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_plain_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_plain_distance", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_plain_distance" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_plain_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_plain_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->plain_distance((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_squared_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_squared_distance", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_squared_distance" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_squared_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_squared_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->squared_distance((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_delta_R(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_delta_R", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_delta_R" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_delta_R" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_delta_R" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->delta_R((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_delta_phi_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_delta_phi_to", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_delta_phi_to" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_delta_phi_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_delta_phi_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->delta_phi_to((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_beam_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_beam_distance" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->beam_distance(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_four_mom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::valarray< double > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_four_mom" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->four_mom(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::valarray< double >(static_cast< const std::valarray< double >& >(result))), SWIGTYPE_p_std__valarrayT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_boost(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"prest",  NULL 
  };
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_boost", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_boost" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_boost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_boost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->boost((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_unboost(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"prest",  NULL 
  };
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_unboost", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_unboost" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_unboost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_unboost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->unboost((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___imul__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___imul__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->operator *=(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___itruediv__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___itruediv__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___itruediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->operator /=(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___iadd__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___iadd__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___iadd__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___iadd__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->operator +=((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___isub__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___isub__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___isub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___isub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->operator -=((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PseudoJet_reset" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->reset(arg2,arg3,arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_reset" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_reset" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      (arg1)->reset((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PseudoJet_reset", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PseudoJet_reset__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PseudoJet_reset__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PseudoJet_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::reset(double,double,double,double)\n"
    "    fastjet::PseudoJet::reset(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_PtYPhiM(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 = (double) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"pt_in",  (char *)"y_in",  (char *)"phi_in",  (char *)"m_in",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO|O:PseudoJet_reset_PtYPhiM", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_double(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  {
    try {
      (arg1)->reset_PtYPhiM(arg2,arg3,arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_momentum" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset_momentum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset_momentum" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset_momentum" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PseudoJet_reset_momentum" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->reset_momentum(arg2,arg3,arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_momentum" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_reset_momentum" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_reset_momentum" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      (arg1)->reset_momentum((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PseudoJet_reset_momentum", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PseudoJet_reset_momentum__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PseudoJet_reset_momentum__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PseudoJet_reset_momentum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::reset_momentum(double,double,double,double)\n"
    "    fastjet::PseudoJet::reset_momentum(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum_PtYPhiM(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 = (double) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"pt",  (char *)"y",  (char *)"phi",  (char *)"m",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO|O:PseudoJet_reset_momentum_PtYPhiM", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_double(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  {
    try {
      (arg1)->reset_momentum_PtYPhiM(arg2,arg3,arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_cached_rap_phi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"rap",  (char *)"phi",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJet_set_cached_rap_phi", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_cached_rap_phi" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_set_cached_rap_phi" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_set_cached_rap_phi" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->set_cached_rap_phi(arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_user_index" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (int)((fastjet::PseudoJet const *)arg1)->user_index(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_user_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"index",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_set_user_index", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_user_index" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_set_user_index" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_user_index(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_user_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet::UserInfoBase *arg2 = (fastjet::PseudoJet::UserInfoBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"user_info_in",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_set_user_info", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_user_info" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__PseudoJet__UserInfoBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_set_user_info" "', argument " "2"" of type '" "fastjet::PseudoJet::UserInfoBase *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet::UserInfoBase * >(argp2);
  {
    try {
      (arg1)->set_user_info(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_user_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_user_info" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_user_info(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_info_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::PseudoJet::UserInfoBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_user_info_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::PseudoJet::UserInfoBase *)((fastjet::PseudoJet const *)arg1)->user_info_ptr(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet__UserInfoBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_info_shared_ptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_user_info_shared_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *) &((fastjet::PseudoJet const *)arg1)->user_info_shared_ptr(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_info_shared_ptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_user_info_shared_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *) &(arg1)->user_info_shared_ptr(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_info_shared_ptr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PseudoJet_user_info_shared_ptr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PseudoJet_user_info_shared_ptr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PseudoJet_user_info_shared_ptr__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PseudoJet_user_info_shared_ptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::user_info_shared_ptr() const\n"
    "    fastjet::PseudoJet::user_info_shared_ptr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_description" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->description(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_associated_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_associated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_associated_cs" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_associated_cs(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_valid_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_valid_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_valid_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_valid_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_valid_cs" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_valid_cs(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJet const *)arg1)->associated_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_associated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_associated_cs" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJet const *)arg1)->associated_cs(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJet const *)arg1)->validated_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_cs" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJet const *)arg1)->validated_cs(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_cluster_sequence_area_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequenceAreaBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_cluster_sequence_area_base" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceAreaBase *)((fastjet::PseudoJet const *)arg1)->validated_cluster_sequence_area_base(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_csab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequenceAreaBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_csab" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceAreaBase *)((fastjet::PseudoJet const *)arg1)->validated_csab(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_structure_shared_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"structure",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_set_structure_shared_ptr", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_structure_shared_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_set_structure_shared_ptr" "', argument " "2"" of type '" "fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_set_structure_shared_ptr" "', argument " "2"" of type '" "fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::SharedPtr< fastjet::PseudoJetStructureBase > * >(argp2);
  {
    try {
      (arg1)->set_structure_shared_ptr((fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_structure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_structure" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_structure(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_structure_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::PseudoJetStructureBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_structure_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::PseudoJetStructureBase *)((fastjet::PseudoJet const *)arg1)->structure_ptr(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_structure_non_const_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::PseudoJetStructureBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_structure_non_const_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::PseudoJetStructureBase *)(arg1)->structure_non_const_ptr(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_structure_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::PseudoJetStructureBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_structure_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::PseudoJetStructureBase *)((fastjet::PseudoJet const *)arg1)->validated_structure_ptr(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_structure_shared_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_structure_shared_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *) &((fastjet::PseudoJet const *)arg1)->structure_shared_ptr(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_partner(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"partner",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_has_partner", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_partner" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_partner(*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"child",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_has_child", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_child" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_child(*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"parent1",  (char *)"parent2",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PseudoJet_has_parents", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_parents" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJet_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_parents(*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"constituent",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_contains", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_contains" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_contains" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_contains" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->contains((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_is_inside(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_is_inside", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_is_inside" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_is_inside" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_is_inside" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->is_inside((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_constituents" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_constituents(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_constituents" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->constituents(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_exclusive_subjets(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subjets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subjets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->exclusive_subjets(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_n_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dcut",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_n_exclusive_subjets", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_n_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_n_exclusive_subjets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (int)((fastjet::PseudoJet const *)arg1)->n_exclusive_subjets(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subjets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subjets" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->exclusive_subjets(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subjets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PseudoJet_exclusive_subjets", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PseudoJet_exclusive_subjets__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PseudoJet_exclusive_subjets__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PseudoJet_exclusive_subjets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::exclusive_subjets(double const) const\n"
    "    fastjet::PseudoJet::exclusive_subjets(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subjets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nsub",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_exclusive_subjets_up_to", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subjets_up_to" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subjets_up_to" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->exclusive_subjets_up_to(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subdmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nsub",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_exclusive_subdmerge", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subdmerge" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subdmerge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->exclusive_subdmerge(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subdmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nsub",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_exclusive_subdmerge_max", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subdmerge_max" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subdmerge_max" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->exclusive_subdmerge_max(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_pieces" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_pieces(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pieces" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->pieces(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_area" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_area" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_area_error" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->area_error(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::PseudoJet result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_area_4vector" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->area_4vector(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_is_pure_ghost" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->is_pure_ghost(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_cluster_hist_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_cluster_hist_index" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (int)((fastjet::PseudoJet const *)arg1)->cluster_hist_index(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_cluster_hist_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"index",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_set_cluster_hist_index", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_cluster_hist_index" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_set_cluster_hist_index" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_cluster_hist_index(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_cluster_sequence_history_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_cluster_sequence_history_index" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (int)((fastjet::PseudoJet const *)arg1)->cluster_sequence_history_index(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_cluster_sequence_history_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"index",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_set_cluster_sequence_history_index", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_cluster_sequence_history_index" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_set_cluster_sequence_history_index" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_cluster_sequence_history_index(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___repr__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = fastjet_PseudoJet___repr__(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_python_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"pyobj",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet_set_python_info", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_python_info" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  arg2 = obj1;
  {
    try {
      fastjet_PseudoJet_set_python_info(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_python_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_python_info" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (PyObject *)fastjet_PseudoJet_python_info((fastjet::PseudoJet const *)arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"p",  NULL 
  };
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___add__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___add__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___add__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___add__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = fastjet_PseudoJet___add__(arg1,(fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"p",  NULL 
  };
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___sub__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___sub__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___sub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___sub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = fastjet_PseudoJet___sub__(arg1,(fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___eq__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___eq__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___eq__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet_PseudoJet___eq____SWIG_0(arg1,(fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___ne__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___ne__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___ne__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet_PseudoJet___ne____SWIG_0(arg1,(fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___mul__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___mul__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet_PseudoJet___mul__(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___rmul__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___rmul__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___rmul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet_PseudoJet___rmul__(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PseudoJet___div__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___div__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet_PseudoJet___div__(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___eq__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___eq__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)fastjet_PseudoJet___eq____SWIG_1(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PseudoJet___eq__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PseudoJet___eq____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PseudoJet___eq____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___ne__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___ne__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)fastjet_PseudoJet___ne____SWIG_1(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PseudoJet___ne__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PseudoJet___ne____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PseudoJet___ne____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *PseudoJet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__PseudoJet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PseudoJet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_dot_product(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"b",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:dot_product", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dot_product" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dot_product" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dot_product" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dot_product" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)fastjet::dot_product((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cos_theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"b",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:cos_theta", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cos_theta" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cos_theta" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cos_theta" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cos_theta" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)fastjet::cos_theta((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"b",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:theta", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "theta" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "theta" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "theta" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "theta" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)fastjet::theta((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_have_same_momentum(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"arg1",  (char *)"arg2",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:have_same_momentum", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "have_same_momentum" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "have_same_momentum" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "have_same_momentum" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "have_same_momentum" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet::have_same_momentum((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PtYPhiM(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 = (double) 0.0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"pt",  (char *)"y",  (char *)"phi",  (char *)"m",  NULL 
  };
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:PtYPhiM", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PtYPhiM" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PtYPhiM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PtYPhiM" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PtYPhiM" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      result = fastjet::PtYPhiM(arg1,arg2,arg3,arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sorted_by_pt(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"jets",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:sorted_by_pt", kwnames, &obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sorted_by_pt" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sorted_by_pt" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::sorted_by_pt((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sorted_by_rapidity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"jets",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:sorted_by_rapidity", kwnames, &obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sorted_by_rapidity" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sorted_by_rapidity" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::sorted_by_rapidity((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sorted_by_E(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"jets",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:sorted_by_E", kwnames, &obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sorted_by_E" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sorted_by_E" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::sorted_by_E((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sorted_by_pz(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"jets",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:sorted_by_pz", kwnames, &obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sorted_by_pz" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sorted_by_pz" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::sorted_by_pz((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sort_indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"indices",  (char *)"values",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:sort_indices", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sort_indices" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sort_indices" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sort_indices" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sort_indices" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  {
    try {
      fastjet::sort_indices(*arg1,(std::vector< double,std::allocator< double > > const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::join((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "join" "', argument " "4"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "4"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3,(fastjet::PseudoJet const &)*arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Selector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  fastjet::Selector *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (fastjet::Selector *)new fastjet::Selector(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Selector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  fastjet::Selector *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Selector" "', argument " "1"" of type '" "fastjet::SelectorWorker *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = (fastjet::Selector *)new fastjet::Selector(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Selector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Selector", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Selector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__SelectorWorker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Selector__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Selector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Selector::Selector()\n"
    "    fastjet::Selector::Selector(fastjet::SelectorWorker *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Selector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Selector" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector__pass(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector__pass", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector__pass" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector__pass" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector__pass" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->pass((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___call__" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___call__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___call__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->operator ()((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jets",  NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector_count", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_count" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_count" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_count" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (unsigned int)((fastjet::Selector const *)arg1)->count((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jets",  NULL 
  };
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector_sum", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_sum" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_sum" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_sum" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((fastjet::Selector const *)arg1)->sum((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_scalar_pt_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jets",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector_scalar_pt_sum", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_scalar_pt_sum" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_scalar_pt_sum" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_scalar_pt_sum" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((fastjet::Selector const *)arg1)->scalar_pt_sum((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_sift(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jets",  (char *)"jets_that_pass",  (char *)"jets_that_fail",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Selector_sift", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_sift" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_sift" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_sift" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Selector_sift" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_sift" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Selector_sift" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_sift" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > * >(argp4);
  {
    try {
      ((fastjet::Selector const *)arg1)->sift((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,*arg3,*arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_applies_jet_by_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_applies_jet_by_jet" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->applies_jet_by_jet(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___call__" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((fastjet::Selector const *)arg1)->operator ()((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Selector___call__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Selector___call____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Selector___call____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Selector___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Selector::operator ()(fastjet::PseudoJet const &) const\n"
    "    fastjet::Selector::operator ()(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Selector_nullify_non_selected(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jets",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector_nullify_non_selected", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_nullify_non_selected" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_nullify_non_selected" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_nullify_non_selected" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > * >(argp2);
  {
    try {
      ((fastjet::Selector const *)arg1)->nullify_non_selected(*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_get_rapidity_extent(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"rapmin",  (char *)"rapmax",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Selector_get_rapidity_extent", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_get_rapidity_extent" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_get_rapidity_extent" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_get_rapidity_extent" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Selector_get_rapidity_extent" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_get_rapidity_extent" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((fastjet::Selector const *)arg1)->get_rapidity_extent(*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_description" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = ((fastjet::Selector const *)arg1)->description(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_is_geometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_is_geometric" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->is_geometric(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_has_finite_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_has_finite_area" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->has_finite_area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_worker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::SharedPtr< fastjet::SelectorWorker > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_worker" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::SelectorWorker > *) &((fastjet::Selector const *)arg1)->worker(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__SelectorWorker_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_validated_worker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::SelectorWorker *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_validated_worker" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (fastjet::SelectorWorker *)((fastjet::Selector const *)arg1)->validated_worker(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_takes_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_takes_reference" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->takes_reference(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  NULL 
  };
  fastjet::Selector *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector_set_reference", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_set_reference" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_set_reference" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_set_reference" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::Selector *) &(arg1)->set_reference((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_area__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_area" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (double)((fastjet::Selector const *)arg1)->area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_area__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_area" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Selector_area" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((fastjet::Selector const *)arg1)->area(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_area(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Selector_area", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Selector_area__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Selector_area__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Selector_area'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Selector::area() const\n"
    "    fastjet::Selector::area(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Selector___iand__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"b",  NULL 
  };
  fastjet::Selector *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector___iand__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___iand__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___iand__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___iand__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (fastjet::Selector *) &(arg1)->operator &=((fastjet::Selector const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___ior__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"b",  NULL 
  };
  fastjet::Selector *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector___ior__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___ior__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___ior__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___ior__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (fastjet::Selector *) &(arg1)->operator |=((fastjet::Selector const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector___mul__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___mul__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___mul__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___mul__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = fastjet_Selector___mul__(arg1,(fastjet::Selector const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Selector___and__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector___and__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___and__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___and__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___and__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = fastjet_Selector___and__(arg1,(fastjet::Selector const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Selector___or__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Selector___or__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___or__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___or__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___or__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = fastjet_Selector___or__(arg1,(fastjet::Selector const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Selector___invert__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::Selector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___invert__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = fastjet_Selector___invert__(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Selector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Selector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Selector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SelectorIdentity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector result;
  
  if (!SWIG_Python_UnpackTuple(args, "SelectorIdentity", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = fastjet::SelectorIdentity(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorPtMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"ptmin",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorPtMin", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPtMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorPtMin(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorPtMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"ptmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorPtMax", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPtMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorPtMax(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorPtRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"ptmin",  (char *)"ptmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorPtRange", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPtRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorPtRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorPtRange(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"Etmin",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorEtMin", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEtMin(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"Etmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorEtMax", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEtMax(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"Etmin",  (char *)"Etmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorEtRange", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorEtRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorEtRange(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"Emin",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorEMin", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEMin(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"Emax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorEMax", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEMax(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorERange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"Emin",  (char *)"Emax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorERange", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorERange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorERange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorERange(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorMassMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"Mmin",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorMassMin", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorMassMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorMassMin(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorMassMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"Mmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorMassMax", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorMassMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorMassMax(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorMassRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"Mmin",  (char *)"Mmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorMassRange", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorMassRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorMassRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorMassRange(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRapMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"rapmin",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorRapMin", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRapMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorRapMin(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRapMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"rapmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorRapMax", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRapMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorRapMax(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRapRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"rapmin",  (char *)"rapmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorRapRange", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRapRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorRapRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorRapRange(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsRapMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"absrapmin",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorAbsRapMin", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsRapMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorAbsRapMin(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsRapMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"absrapmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorAbsRapMax", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsRapMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorAbsRapMax(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsRapRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"absrapmin",  (char *)"absrapmax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorAbsRapRange", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsRapRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorAbsRapRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorAbsRapRange(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"etamin",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorEtaMin", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtaMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEtaMin(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"etamax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorEtaMax", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtaMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEtaMax(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtaRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"etamin",  (char *)"etamax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorEtaRange", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtaRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorEtaRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorEtaRange(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsEtaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"absetamin",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorAbsEtaMin", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsEtaMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorAbsEtaMin(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsEtaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"absetamax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorAbsEtaMax", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsEtaMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorAbsEtaMax(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsEtaRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"absetamin",  (char *)"absetamax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorAbsEtaRange", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsEtaRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorAbsEtaRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorAbsEtaRange(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorPhiRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"phimin",  (char *)"phimax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorPhiRange", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPhiRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorPhiRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorPhiRange(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRapPhiRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"rapmin",  (char *)"rapmax",  (char *)"phimin",  (char *)"phimax",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:SelectorRapPhiRange", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRapPhiRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorRapPhiRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SelectorRapPhiRange" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SelectorRapPhiRange" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = fastjet::SelectorRapPhiRange(arg1,arg2,arg3,arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorNHardest(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"n",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorNHardest", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorNHardest" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = fastjet::SelectorNHardest(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorCircle(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"radius",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorCircle", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorCircle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorCircle(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorDoughnut(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"radius_in",  (char *)"radius_out",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorDoughnut", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorDoughnut" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorDoughnut" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorDoughnut(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorStrip(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"half_width",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorStrip", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorStrip" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorStrip(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRectangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"half_rap_width",  (char *)"half_phi_width",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SelectorRectangle", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRectangle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorRectangle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorRectangle(arg1,arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorPtFractionMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"fraction",  NULL 
  };
  fastjet::Selector result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:SelectorPtFractionMin", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPtFractionMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorPtFractionMin(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorIsZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector result;
  
  if (!SWIG_Python_UnpackTuple(args, "SelectorIsZero", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = fastjet::SelectorIsZero(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorIsPureGhost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector result;
  
  if (!SWIG_Python_UnpackTuple(args, "SelectorIsPureGhost", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = fastjet::SelectorIsPureGhost(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fastjet_version_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "fastjet_version_string", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = fastjet::fastjet_version_string(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_aachen_algorithm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable aachen_algorithm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_aachen_algorithm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(fastjet::aachen_algorithm));
  return pyobj;
}


SWIGINTERN int Swig_var_cambridge_aachen_algorithm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cambridge_aachen_algorithm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cambridge_aachen_algorithm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(fastjet::cambridge_aachen_algorithm));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::RecombinationScheme arg3 = (fastjet::RecombinationScheme) fastjet::E_scheme ;
  fastjet::Strategy arg4 = (fastjet::Strategy) fastjet::Best ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::RecombinationScheme""'");
    } 
    arg3 = static_cast< fastjet::RecombinationScheme >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::Strategy""'");
    } 
    arg4 = static_cast< fastjet::Strategy >(val4);
  }
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::RecombinationScheme arg2 = (fastjet::RecombinationScheme) fastjet::E_scheme ;
  fastjet::Strategy arg3 = (fastjet::Strategy) fastjet::Best ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "fastjet::RecombinationScheme""'");
    } 
    arg2 = static_cast< fastjet::RecombinationScheme >(val2);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::Strategy""'");
    } 
    arg3 = static_cast< fastjet::Strategy >(val3);
  }
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  fastjet::RecombinationScheme arg4 = (fastjet::RecombinationScheme) fastjet::E_scheme ;
  fastjet::Strategy arg5 = (fastjet::Strategy) fastjet::Best ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::RecombinationScheme""'");
    } 
    arg4 = static_cast< fastjet::RecombinationScheme >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_JetDefinition" "', argument " "5"" of type '" "fastjet::Strategy""'");
    } 
    arg5 = static_cast< fastjet::Strategy >(val5);
  }
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::JetDefinition::Recombiner *arg3 = (fastjet::JetDefinition::Recombiner *) 0 ;
  fastjet::Strategy arg4 = (fastjet::Strategy) fastjet::Best ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg3 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::Strategy""'");
    } 
    arg4 = static_cast< fastjet::Strategy >(val4);
  }
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,(fastjet::JetDefinition::Recombiner const *)arg3,arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::JetDefinition::Recombiner *arg2 = (fastjet::JetDefinition::Recombiner *) 0 ;
  fastjet::Strategy arg3 = (fastjet::Strategy) fastjet::Best ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::Strategy""'");
    } 
    arg3 = static_cast< fastjet::Strategy >(val3);
  }
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,(fastjet::JetDefinition::Recombiner const *)arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  fastjet::JetDefinition::Recombiner *arg4 = (fastjet::JetDefinition::Recombiner *) 0 ;
  fastjet::Strategy arg5 = (fastjet::Strategy) fastjet::Best ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg4 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp4);
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_JetDefinition" "', argument " "5"" of type '" "fastjet::Strategy""'");
    } 
    arg5 = static_cast< fastjet::Strategy >(val5);
  }
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,(fastjet::JetDefinition::Recombiner const *)arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition::Plugin *arg1 = (fastjet::JetDefinition::Plugin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition__Plugin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetDefinition::Plugin const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition::Plugin * >(argp1);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition((fastjet::JetDefinition::Plugin const *)arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::RecombinationScheme arg3 ;
  fastjet::Strategy arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg3 = static_cast< fastjet::RecombinationScheme >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::Strategy""'");
  } 
  arg4 = static_cast< fastjet::Strategy >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_JetDefinition" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::Strategy arg3 ;
  fastjet::RecombinationScheme arg4 = (fastjet::RecombinationScheme) fastjet::E_scheme ;
  int arg5 = (int) 1 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::Strategy""'");
  } 
  arg3 = static_cast< fastjet::Strategy >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::RecombinationScheme""'");
    } 
    arg4 = static_cast< fastjet::RecombinationScheme >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_JetDefinition" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_JetDefinition", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_JetDefinition__SWIG_6(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Plugin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JetDefinition__SWIG_7(self, argc, argv);
    }
  }
  if ((argc >= 1) && (argc <= 3)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_JetDefinition__SWIG_1(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_JetDefinition__SWIG_1(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JetDefinition__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_JetDefinition__SWIG_4(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JetDefinition__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 4)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_JetDefinition__SWIG_0(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_JetDefinition__SWIG_0(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JetDefinition__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 4)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_JetDefinition__SWIG_3(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JetDefinition__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 5)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_JetDefinition__SWIG_9(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_JetDefinition__SWIG_9(self, argc, argv);
            }
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_JetDefinition__SWIG_9(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 5)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_JetDefinition__SWIG_2(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_JetDefinition__SWIG_2(self, argc, argv);
            }
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_JetDefinition__SWIG_2(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 5)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_JetDefinition__SWIG_5(self, argc, argv);
            }
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_JetDefinition__SWIG_5(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_JetDefinition__SWIG_8(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_JetDefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::RecombinationScheme,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,fastjet::RecombinationScheme,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,double,fastjet::RecombinationScheme,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::JetDefinition::Recombiner const *,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,fastjet::JetDefinition::Recombiner const *,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,double,fastjet::JetDefinition::Recombiner const *,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition()\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetDefinition::Plugin const *)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::RecombinationScheme,fastjet::Strategy,int)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::Strategy,fastjet::RecombinationScheme,int)\n");
  return 0;
}


SWIGINTERN int Swig_var_JetDefinition_max_allowable_R_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable JetDefinition_max_allowable_R is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_JetDefinition_max_allowable_R_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::JetDefinition::max_allowable_R));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_recombination_scheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::RecombinationScheme arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:JetDefinition_set_recombination_scheme", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_recombination_scheme" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition_set_recombination_scheme" "', argument " "2"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg2 = static_cast< fastjet::RecombinationScheme >(val2);
  {
    try {
      (arg1)->set_recombination_scheme(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_recombiner__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetDefinition::Recombiner *arg2 = (fastjet::JetDefinition::Recombiner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetDefinition_set_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      (arg1)->set_recombiner((fastjet::JetDefinition::Recombiner const *)arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_recombiner__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetDefinition_set_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetDefinition_set_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  {
    try {
      (arg1)->set_recombiner((fastjet::JetDefinition const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_recombiner(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "JetDefinition_set_recombiner", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JetDefinition_set_recombiner__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JetDefinition_set_recombiner__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'JetDefinition_set_recombiner'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetDefinition::set_recombiner(fastjet::JetDefinition::Recombiner const *)\n"
    "    fastjet::JetDefinition::set_recombiner(fastjet::JetDefinition const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetDefinition_delete_recombiner_when_unused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_delete_recombiner_when_unused" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      (arg1)->delete_recombiner_when_unused(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_plugin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::JetDefinition::Plugin *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_plugin" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::JetDefinition::Plugin *)((fastjet::JetDefinition const *)arg1)->plugin(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition__Plugin, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_delete_plugin_when_unused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_delete_plugin_when_unused" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      (arg1)->delete_plugin_when_unused(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_jet_algorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::JetAlgorithm result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_jet_algorithm" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::JetAlgorithm)((fastjet::JetDefinition const *)arg1)->jet_algorithm(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_jet_finder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::JetAlgorithm result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_jet_finder" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::JetAlgorithm)((fastjet::JetDefinition const *)arg1)->jet_finder(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_R(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_R" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (double)((fastjet::JetDefinition const *)arg1)->R(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_extra_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_extra_param" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (double)((fastjet::JetDefinition const *)arg1)->extra_param(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_strategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::Strategy result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_strategy" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::Strategy)((fastjet::JetDefinition const *)arg1)->strategy(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_recombination_scheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::RecombinationScheme result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_recombination_scheme" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::RecombinationScheme)((fastjet::JetDefinition const *)arg1)->recombination_scheme(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_jet_algorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"njf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:JetDefinition_set_jet_algorithm", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_jet_algorithm" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition_set_jet_algorithm" "', argument " "2"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg2 = static_cast< fastjet::JetAlgorithm >(val2);
  {
    try {
      (arg1)->set_jet_algorithm(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_jet_finder(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"njf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:JetDefinition_set_jet_finder", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_jet_finder" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition_set_jet_finder" "', argument " "2"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg2 = static_cast< fastjet::JetAlgorithm >(val2);
  {
    try {
      (arg1)->set_jet_finder(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_extra_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"xtra_param",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:JetDefinition_set_extra_param", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_extra_param" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition_set_extra_param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_extra_param(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_recombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::JetDefinition::Recombiner *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::JetDefinition::Recombiner *)((fastjet::JetDefinition const *)arg1)->recombiner(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_has_same_recombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other_jd",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:JetDefinition_has_same_recombiner", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_has_same_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetDefinition_has_same_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetDefinition_has_same_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  {
    try {
      result = (bool)((fastjet::JetDefinition const *)arg1)->has_same_recombiner((fastjet::JetDefinition const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_is_spherical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_is_spherical" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (bool)((fastjet::JetDefinition const *)arg1)->is_spherical(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_description" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = ((fastjet::JetDefinition const *)arg1)->description(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_description_no_recombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_description_no_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = ((fastjet::JetDefinition const *)arg1)->description_no_recombiner(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_algorithm_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"jet_alg",  NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:JetDefinition_algorithm_description", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition_algorithm_description" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  {
    try {
      result = fastjet::JetDefinition::algorithm_description(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_n_parameters_for_algorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"jet_alg",  NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:JetDefinition_n_parameters_for_algorithm", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition_n_parameters_for_algorithm" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  {
    try {
      result = (unsigned int)fastjet::JetDefinition::n_parameters_for_algorithm(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"particles",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:JetDefinition___call__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition___call__" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetDefinition___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetDefinition___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = fastjet_JetDefinition___call__(arg1,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JetDefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JetDefinition" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JetDefinition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__JetDefinition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *JetDefinition_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_join__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition::Recombiner *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      result = fastjet::join((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition::Recombiner const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::JetDefinition::Recombiner *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::JetDefinition::Recombiner const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::JetDefinition::Recombiner *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp3);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::JetDefinition::Recombiner const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::JetDefinition::Recombiner *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "join" "', argument " "4"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "4"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp4);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3,(fastjet::JetDefinition::Recombiner const &)*arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  fastjet::JetDefinition::Recombiner *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  fastjet::PseudoJet result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "join" "', argument " "4"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "4"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "join" "', argument " "5"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "5"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg5 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp5);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3,(fastjet::PseudoJet const &)*arg4,(fastjet::JetDefinition::Recombiner const &)*arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "join", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_join__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_join__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_join__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_join__SWIG_6(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_join__SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_join__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_join__SWIG_7(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_join__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_join__SWIG_8(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, SWIG_POINTER_NO_NULL | 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_join__SWIG_9(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'join'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::join(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &)\n"
    "    fastjet::join(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition::Recombiner const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::JetDefinition::Recombiner const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::JetDefinition::Recombiner const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::JetDefinition::Recombiner const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::JetDefinition::Recombiner const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_CompositeJetStructure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (fastjet::CompositeJetStructure *)new fastjet::CompositeJetStructure(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__CompositeJetStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CompositeJetStructure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition::Recombiner *arg2 = (fastjet::JetDefinition::Recombiner *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  fastjet::CompositeJetStructure *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CompositeJetStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CompositeJetStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  if (swig_obj[1]) {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CompositeJetStructure" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
    }
    arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  }
  {
    try {
      result = (fastjet::CompositeJetStructure *)new fastjet::CompositeJetStructure((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition::Recombiner const *)arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__CompositeJetStructure, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CompositeJetStructure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_CompositeJetStructure", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_CompositeJetStructure__SWIG_0(self, argc, argv);
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_CompositeJetStructure__SWIG_1(self, argc, argv);
      }
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CompositeJetStructure__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_CompositeJetStructure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::CompositeJetStructure::CompositeJetStructure()\n"
    "    fastjet::CompositeJetStructure::CompositeJetStructure(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition::Recombiner const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CompositeJetStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CompositeJetStructure" "', argument " "1"" of type '" "fastjet::CompositeJetStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_description" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = ((fastjet::CompositeJetStructure const *)arg1)->description(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_has_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_has_constituents" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::CompositeJetStructure const *)arg1)->has_constituents(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CompositeJetStructure_constituents", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_constituents" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::CompositeJetStructure const *)arg1)->constituents((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_has_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CompositeJetStructure_has_pieces", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_has_pieces" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::CompositeJetStructure const *)arg1)->has_pieces((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CompositeJetStructure_pieces", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_pieces" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::CompositeJetStructure const *)arg1)->pieces((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_has_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_has_area" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::CompositeJetStructure const *)arg1)->has_area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_area" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::CompositeJetStructure const *)arg1)->area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_area_error" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::CompositeJetStructure const *)arg1)->area_error(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::PseudoJet result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_area_4vector" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = ((fastjet::CompositeJetStructure const *)arg1)->area_4vector(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_is_pure_ghost" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::CompositeJetStructure const *)arg1)->is_pure_ghost(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CompositeJetStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__CompositeJetStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CompositeJetStructure_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ClusterSequenceStructure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (fastjet::ClusterSequenceStructure *)new fastjet::ClusterSequenceStructure(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceStructure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  fastjet::ClusterSequenceStructure *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceStructure" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceStructure *)new fastjet::ClusterSequenceStructure((fastjet::ClusterSequence const *)arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceStructure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ClusterSequenceStructure", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ClusterSequenceStructure__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClusterSequenceStructure__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ClusterSequenceStructure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceStructure::ClusterSequenceStructure()\n"
    "    fastjet::ClusterSequenceStructure::ClusterSequenceStructure(fastjet::ClusterSequence const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequenceStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequenceStructure" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_description" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->description(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_associated_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::ClusterSequenceStructure const *)arg1)->associated_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_valid_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_valid_cluster_sequence" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_valid_cluster_sequence(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_validated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_validated_cs" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::ClusterSequenceStructure const *)arg1)->validated_cs(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_validated_csab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequenceAreaBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_validated_csab" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceAreaBase *)((fastjet::ClusterSequenceStructure const *)arg1)->validated_csab(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_set_associated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::ClusterSequence *arg2 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"new_cs",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequenceStructure_set_associated_cs", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_set_associated_cs" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_set_associated_cs" "', argument " "2"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequence * >(argp2);
  {
    try {
      (arg1)->set_associated_cs((fastjet::ClusterSequence const *)arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_partner(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"partner",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequenceStructure_has_partner", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_partner" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceStructure_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_partner((fastjet::PseudoJet const &)*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"child",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequenceStructure_has_child", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_child" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceStructure_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_child((fastjet::PseudoJet const &)*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"parent1",  (char *)"parent2",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:ClusterSequenceStructure_has_parents", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_parents" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceStructure_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceStructure_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_parents((fastjet::PseudoJet const &)*arg2,*arg3,*arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_object_in_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"jet",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequenceStructure_object_in_jet", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->object_in_jet((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_constituents" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_constituents(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequenceStructure_constituents", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_constituents" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->constituents((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_exclusive_subjets(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"dcut",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequenceStructure_exclusive_subjets", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->exclusive_subjets((fastjet::PseudoJet const &)*arg2,(double const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_n_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"dcut",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequenceStructure_n_exclusive_subjets", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_n_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_n_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      result = (int)((fastjet::ClusterSequenceStructure const *)arg1)->n_exclusive_subjets((fastjet::PseudoJet const &)*arg2,(double const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_exclusive_subjets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"nsub",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequenceStructure_exclusive_subjets_up_to", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_exclusive_subjets_up_to" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_exclusive_subjets_up_to" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->exclusive_subjets_up_to((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_exclusive_subdmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"nsub",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequenceStructure_exclusive_subdmerge", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_exclusive_subdmerge" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_exclusive_subdmerge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequenceStructure const *)arg1)->exclusive_subdmerge((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_exclusive_subdmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  (char *)"nsub",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequenceStructure_exclusive_subdmerge_max", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_exclusive_subdmerge_max" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_exclusive_subdmerge_max" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequenceStructure const *)arg1)->exclusive_subdmerge_max((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequenceStructure_has_pieces", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_pieces" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_pieces((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"reference",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequenceStructure_pieces", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_pieces" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->pieces((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::ClusterSequenceStructure const *)arg1)->area(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_area_error" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::ClusterSequenceStructure const *)arg1)->area_error(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::PseudoJet result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_area_4vector" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->area_4vector(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_is_pure_ghost" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->is_pure_ghost(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterSequenceStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequenceStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ClusterSequenceStructure_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ClusterSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  bool arg3_defvalue = false ;
  bool *arg3 = (bool *) &arg3_defvalue ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"pseudojets",  (char *)"jet_def",  (char *)"writeout_combinations",  NULL 
  };
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:new_ClusterSequence", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequence" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequence" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ClusterSequence" "', argument " "3"" of type '" "bool""'");
    } 
    temp3 = static_cast< bool >(val3);
    arg3 = &temp3;
  }
  {
    try {
      result = (fastjet::ClusterSequence *)new fastjet::ClusterSequence((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(bool const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequence" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_inclusive_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 = (double) (double)0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ptmin",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:ClusterSequence_inclusive_jets", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_inclusive_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_inclusive_jets" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->inclusive_jets(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_n_exclusive_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dcut",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_n_exclusive_jets", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_n_exclusive_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_n_exclusive_jets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (int)((fastjet::ClusterSequence const *)arg1)->n_exclusive_jets(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_jets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_jets(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_jets" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_jets(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ClusterSequence_exclusive_jets", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequence_exclusive_jets__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequence_exclusive_jets__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ClusterSequence_exclusive_jets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::exclusive_jets(double const) const\n"
    "    fastjet::ClusterSequence::exclusive_jets(int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"njets",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_exclusive_jets_up_to", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_jets_up_to" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_jets_up_to" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_jets_up_to(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_dmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"njets",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_exclusive_dmerge", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_dmerge" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_dmerge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_dmerge(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_dmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"njets",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_exclusive_dmerge_max", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_dmerge_max" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_dmerge_max" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_dmerge_max(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_ymerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"njets",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_exclusive_ymerge", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_ymerge" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_ymerge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_ymerge(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_ymerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"njets",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_exclusive_ymerge_max", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_ymerge_max" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_ymerge_max" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_ymerge_max(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_n_exclusive_jets_ycut(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ycut",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_n_exclusive_jets_ycut", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_n_exclusive_jets_ycut" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_n_exclusive_jets_ycut" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (int)((fastjet::ClusterSequence const *)arg1)->n_exclusive_jets_ycut(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets_ycut(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ycut",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_exclusive_jets_ycut", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_jets_ycut" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_jets_ycut" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_jets_ycut(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subjets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_subjets((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_n_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  (char *)"dcut",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequence_n_exclusive_subjets", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_n_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_n_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)((fastjet::ClusterSequence const *)arg1)->n_exclusive_subjets((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subjets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_subjets((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subjets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ClusterSequence_exclusive_subjets", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClusterSequence_exclusive_subjets__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClusterSequence_exclusive_subjets__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ClusterSequence_exclusive_subjets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::exclusive_subjets(fastjet::PseudoJet const &,double const) const\n"
    "    fastjet::ClusterSequence::exclusive_subjets(fastjet::PseudoJet const &,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subjets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  (char *)"nsub",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequence_exclusive_subjets_up_to", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subjets_up_to" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subjets_up_to" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_subjets_up_to((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subdmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  (char *)"nsub",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequence_exclusive_subdmerge", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subdmerge" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subdmerge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_subdmerge((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subdmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  (char *)"nsub",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequence_exclusive_subdmerge_max", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subdmerge_max" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subdmerge_max" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_subdmerge_max((fastjet::PseudoJet const &)*arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_Q(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_Q" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->Q(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_Q2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_Q2" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->Q2(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_object_in_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"object",  (char *)"jet",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequence_object_in_jet", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_object_in_jet" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->object_in_jet((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  (char *)"parent1",  (char *)"parent2",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:ClusterSequence_has_parents", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_has_parents" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequence_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->has_parents((fastjet::PseudoJet const &)*arg2,*arg3,*arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_has_child" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->has_child((fastjet::PseudoJet const &)*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_has_child" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet const *&""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet const *&""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet ** >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->has_child((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const *&)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ClusterSequence_has_child", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequence_has_child__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequence_has_child__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ClusterSequence_has_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::has_child(fastjet::PseudoJet const &,fastjet::PseudoJet &) const\n"
    "    fastjet::ClusterSequence::has_child(fastjet::PseudoJet const &,fastjet::PseudoJet const *&) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_partner(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  (char *)"partner",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequence_has_partner", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_has_partner" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->has_partner((fastjet::PseudoJet const &)*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_constituents", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_constituents" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->constituents((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_print_jets_for_root__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  std::ostream &arg3_defvalue = std::cout ;
  std::ostream *arg3 = (std::ostream *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__ostream,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::ostream &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::ostream &""'"); 
    }
    arg3 = reinterpret_cast< std::ostream * >(argp3);
  }
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->print_jets_for_root((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_print_jets_for_root__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string const &arg4_defvalue = "" ;
  std::string *arg4 = (std::string *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  if (swig_obj[3]) {
    {
      std::string *ptr = (std::string *)0;
      res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "4"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "4"" of type '" "std::string const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->print_jets_for_root((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_print_jets_for_root(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ClusterSequence_print_jets_for_root", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_ClusterSequence_print_jets_for_root__SWIG_0(self, argc, argv);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequence_print_jets_for_root__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 4)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          if (argc <= 3) {
            return _wrap_ClusterSequence_print_jets_for_root__SWIG_1(self, argc, argv);
          }
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ClusterSequence_print_jets_for_root__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ClusterSequence_print_jets_for_root'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::print_jets_for_root(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,std::ostream &) const\n"
    "    fastjet::ClusterSequence::print_jets_for_root(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,std::string const &,std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_add_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  (char *)"subjet_vector",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequence_add_constituents", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_add_constituents" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_add_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_add_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_add_constituents" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_add_constituents" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > * >(argp3);
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->add_constituents((fastjet::PseudoJet const &)*arg2,*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_strategy_used(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::Strategy result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_strategy_used" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::Strategy)((fastjet::ClusterSequence const *)arg1)->strategy_used(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_strategy_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_strategy_string" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->strategy_string(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_strategy_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::Strategy arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_strategy_string" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_strategy_string" "', argument " "2"" of type '" "fastjet::Strategy""'");
  } 
  arg2 = static_cast< fastjet::Strategy >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->strategy_string(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_strategy_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ClusterSequence_strategy_string", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClusterSequence_strategy_string__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequence_strategy_string__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ClusterSequence_strategy_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::strategy_string() const\n"
    "    fastjet::ClusterSequence::strategy_string(fastjet::Strategy) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_jet_def(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_jet_def" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::JetDefinition *) &((fastjet::ClusterSequence const *)arg1)->jet_def(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_delete_self_when_unused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_delete_self_when_unused" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      (arg1)->delete_self_when_unused(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_will_delete_self_when_unused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_will_delete_self_when_unused" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->will_delete_self_when_unused(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_signal_imminent_self_deletion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_signal_imminent_self_deletion" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->signal_imminent_self_deletion(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_jet_scale_for_algorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_jet_scale_for_algorithm", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_jet_scale_for_algorithm" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_jet_scale_for_algorithm" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_jet_scale_for_algorithm" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->jet_scale_for_algorithm((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_record_ij_recombination__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "5"" of type '" "int &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "5"" of type '" "int &""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      (arg1)->plugin_record_ij_recombination(arg2,arg3,arg4,*arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_record_ij_recombination__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  fastjet::PseudoJet *arg5 = 0 ;
  int *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "5"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "5"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg5 = reinterpret_cast< fastjet::PseudoJet * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "6"" of type '" "int &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "6"" of type '" "int &""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      (arg1)->plugin_record_ij_recombination(arg2,arg3,arg4,(fastjet::PseudoJet const &)*arg5,*arg6); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_record_ij_recombination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ClusterSequence_plugin_record_ij_recombination", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_ClusterSequence_plugin_record_ij_recombination__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NO_NULL | 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_ClusterSequence_plugin_record_ij_recombination__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ClusterSequence_plugin_record_ij_recombination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::plugin_record_ij_recombination(int,int,double,int &)\n"
    "    fastjet::ClusterSequence::plugin_record_ij_recombination(int,int,double,fastjet::PseudoJet const &,int &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_record_iB_recombination(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"jet_i",  (char *)"diB",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ClusterSequence_plugin_record_iB_recombination", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_record_iB_recombination" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_plugin_record_iB_recombination" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_plugin_record_iB_recombination" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->plugin_record_iB_recombination(arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_associate_extras(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::ClusterSequence::Extras *arg2 = (fastjet::ClusterSequence::Extras *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"extras_in",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_plugin_associate_extras", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_associate_extras" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__ClusterSequence__Extras, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_plugin_associate_extras" "', argument " "2"" of type '" "fastjet::ClusterSequence::Extras *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequence::Extras * >(argp2);
  {
    try {
      (arg1)->plugin_associate_extras(arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_activated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_activated" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->plugin_activated(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_extras(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::ClusterSequence::Extras *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_extras" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence::Extras *)((fastjet::ClusterSequence const *)arg1)->extras(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence__Extras, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *) &((fastjet::ClusterSequence const *)arg1)->jets(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::ClusterSequence::history_element,std::allocator< fastjet::ClusterSequence::history_element > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_history" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (std::vector< fastjet::ClusterSequence::history_element,std::allocator< fastjet::ClusterSequence::history_element > > *) &((fastjet::ClusterSequence const *)arg1)->history(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_n_particles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_n_particles" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (unsigned int)((fastjet::ClusterSequence const *)arg1)->n_particles(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_particle_jet_indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_particle_jet_indices", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_particle_jet_indices" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_particle_jet_indices" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_particle_jet_indices" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->particle_jet_indices((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(static_cast< const std::vector< int,std::allocator< int > >& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_unique_history_order(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_unique_history_order" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->unique_history_order(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(static_cast< const std::vector< int,std::allocator< int > >& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_unclustered_particles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_unclustered_particles" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->unclustered_particles(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_childless_pseudojets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_childless_pseudojets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->childless_pseudojets(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"object",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ClusterSequence_contains", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_contains" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_contains" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_contains" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->contains((fastjet::PseudoJet const &)*arg2); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_transfer_from_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::ClusterSequence *arg2 = 0 ;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *arg3 = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"from_seq",  (char *)"action_on_jets",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:ClusterSequence_transfer_from_sequence", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__ClusterSequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "2"" of type '" "fastjet::ClusterSequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "2"" of type '" "fastjet::ClusterSequence const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequence * >(argp2);
  if (obj2) {
    res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "3"" of type '" "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *""'"); 
    }
    arg3 = reinterpret_cast< fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > * >(argp3);
  }
  {
    try {
      (arg1)->transfer_from_sequence((fastjet::ClusterSequence const &)*arg2,(fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *)arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_structure_shared_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_structure_shared_ptr" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *) &((fastjet::ClusterSequence const *)arg1)->structure_shared_ptr(); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterSequence_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequence, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ClusterSequence_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_JetDefinition0Param(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::RecombinationScheme arg2 = (fastjet::RecombinationScheme) fastjet::E_scheme ;
  fastjet::Strategy arg3 = (fastjet::Strategy) fastjet::Best ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"jet_algorithm",  (char *)"recomb_scheme",  (char *)"strategy",  NULL 
  };
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OO:JetDefinition0Param", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition0Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition0Param" "', argument " "2"" of type '" "fastjet::RecombinationScheme""'");
    } 
    arg2 = static_cast< fastjet::RecombinationScheme >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetDefinition0Param" "', argument " "3"" of type '" "fastjet::Strategy""'");
    } 
    arg3 = static_cast< fastjet::Strategy >(val3);
  }
  {
    try {
      result = fastjet::JetDefinition0Param(arg1,arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition1Param(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::RecombinationScheme arg3 = (fastjet::RecombinationScheme) fastjet::E_scheme ;
  fastjet::Strategy arg4 = (fastjet::Strategy) fastjet::Best ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"jet_algorithm",  (char *)"R_in",  (char *)"recomb_scheme",  (char *)"strategy",  NULL 
  };
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:JetDefinition1Param", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition1Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition1Param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetDefinition1Param" "', argument " "3"" of type '" "fastjet::RecombinationScheme""'");
    } 
    arg3 = static_cast< fastjet::RecombinationScheme >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JetDefinition1Param" "', argument " "4"" of type '" "fastjet::Strategy""'");
    } 
    arg4 = static_cast< fastjet::Strategy >(val4);
  }
  {
    try {
      result = fastjet::JetDefinition1Param(arg1,arg2,arg3,arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition2Param(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  fastjet::RecombinationScheme arg4 = (fastjet::RecombinationScheme) fastjet::E_scheme ;
  fastjet::Strategy arg5 = (fastjet::Strategy) fastjet::Best ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"jet_algorithm",  (char *)"R_in",  (char *)"xtra_param",  (char *)"recomb_scheme",  (char *)"strategy",  NULL 
  };
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|OO:JetDefinition2Param", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition2Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition2Param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetDefinition2Param" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JetDefinition2Param" "', argument " "4"" of type '" "fastjet::RecombinationScheme""'");
    } 
    arg4 = static_cast< fastjet::RecombinationScheme >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "JetDefinition2Param" "', argument " "5"" of type '" "fastjet::Strategy""'");
    } 
    arg5 = static_cast< fastjet::Strategy >(val5);
  }
  {
    try {
      result = fastjet::JetDefinition2Param(arg1,arg2,arg3,arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_PseudoJetRep__set(PyObject *_val) {
  if (sizeof(int) != sizeof(fastjet::PseudoJetRep_)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only fastjet::PseudoJetRep_""' of type '""fastjet::PseudoJetRepresentation""'");
  }  else {
    int ecode = SWIG_AsVal_int (_val, reinterpret_cast< int* >(&fastjet::PseudoJetRep_));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""fastjet::PseudoJetRep_""' of type '""fastjet::PseudoJetRepresentation""'");
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_PseudoJetRep__get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(fastjet::PseudoJetRep_));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_set_pseudojet_format(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetRepresentation arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"rep",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:set_pseudojet_format", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_pseudojet_format" "', argument " "1"" of type '" "fastjet::PseudoJetRepresentation""'");
  } 
  arg1 = static_cast< fastjet::PseudoJetRepresentation >(val1);
  {
    try {
      fastjet::set_pseudojet_format(arg1); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ptyphim_array_to_pseudojets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"particles",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:ptyphim_array_to_pseudojets", kwnames, &obj0)) SWIG_fail;
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 2) ||
      !require_size(array1, size, 2)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
    arg3 = (int) array_size(array1,1);
  }
  {
    try {
      result = fastjet::ptyphim_array_to_pseudojets(arg1,arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_epxpypz_array_to_pseudojets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"particles",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:epxpypz_array_to_pseudojets", kwnames, &obj0)) SWIG_fail;
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 2) ||
      !require_size(array1, size, 2)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
    arg3 = (int) array_size(array1,1);
  }
  {
    try {
      result = fastjet::epxpypz_array_to_pseudojets(arg1,arg2,arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_to_pseudojets(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  fastjet::PseudoJetRepresentation arg4 = (fastjet::PseudoJetRepresentation) fastjet::ptyphim ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"particles",  (char *)"pjrep",  NULL 
  };
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:array_to_pseudojets", kwnames, &obj0, &obj1)) SWIG_fail;
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 2) ||
      !require_size(array1, size, 2)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
    arg3 = (int) array_size(array1,1);
  }
  if (obj1) {
    ecode4 = SWIG_AsVal_int(obj1, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "array_to_pseudojets" "', argument " "4"" of type '" "fastjet::PseudoJetRepresentation""'");
    } 
    arg4 = static_cast< fastjet::PseudoJetRepresentation >(val4);
  }
  {
    try {
      result = fastjet::array_to_pseudojets(arg1,arg2,arg3,arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_pseudojets_to_epxpypz_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg4 = 0 ;
  double *data_temp1 = NULL ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"pjs",  NULL 
  };
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:pseudojets_to_epxpypz_array", kwnames, &obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res4 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "pseudojets_to_epxpypz_array" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pseudojets_to_epxpypz_array" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      fastjet::pseudojets_to_epxpypz_array(arg1,arg2,arg3,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg4); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg2, *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    
#ifdef SWIGPY_USE_CAPSULE
    PyObject* cap = PyCapsule_New((void*)(*arg1), SWIGPY_CAPSULE_NAME, free_cap);
#else
    PyObject* cap = PyCObject_FromVoidPtr((void*)(*arg1), free);
#endif
    
#if NPY_API_VERSION < 0x00000007
    PyArray_BASE(array) = cap;
#else
    PyArray_SetBaseObject(array,cap);
#endif
    
    resultobj = SWIG_Python_AppendOutput(resultobj,obj);
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pseudojets_to_ptyphim_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg4 = 0 ;
  bool arg5 = (bool) true ;
  double *data_temp1 = NULL ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  int res4 = SWIG_OLDOBJ ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"pjs",  (char *)"mass",  NULL 
  };
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:pseudojets_to_ptyphim_array", kwnames, &obj0, &obj1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res4 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "pseudojets_to_ptyphim_array" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pseudojets_to_ptyphim_array" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg4 = ptr;
  }
  if (obj1) {
    ecode5 = SWIG_AsVal_bool(obj1, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pseudojets_to_ptyphim_array" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      fastjet::pseudojets_to_ptyphim_array(arg1,arg2,arg3,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg2, *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    
#ifdef SWIGPY_USE_CAPSULE
    PyObject* cap = PyCapsule_New((void*)(*arg1), SWIGPY_CAPSULE_NAME, free_cap);
#else
    PyObject* cap = PyCObject_FromVoidPtr((void*)(*arg1), free);
#endif
    
#if NPY_API_VERSION < 0x00000007
    PyArray_BASE(array) = cap;
#else
    PyArray_SetBaseObject(array,cap);
#endif
    
    resultobj = SWIG_Python_AppendOutput(resultobj,obj);
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pseudojets_to_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg4 = 0 ;
  fastjet::PseudoJetRepresentation arg5 = (fastjet::PseudoJetRepresentation) fastjet::ptyphim ;
  double *data_temp1 = NULL ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"pjs",  (char *)"pjrep",  NULL 
  };
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:pseudojets_to_array", kwnames, &obj0, &obj1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res4 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "pseudojets_to_array" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pseudojets_to_array" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg4 = ptr;
  }
  if (obj1) {
    ecode5 = SWIG_AsVal_int(obj1, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pseudojets_to_array" "', argument " "5"" of type '" "fastjet::PseudoJetRepresentation""'");
    } 
    arg5 = static_cast< fastjet::PseudoJetRepresentation >(val5);
  }
  {
    try {
      fastjet::pseudojets_to_array(arg1,arg2,arg3,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg4,arg5); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg2, *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    
#ifdef SWIGPY_USE_CAPSULE
    PyObject* cap = PyCapsule_New((void*)(*arg1), SWIGPY_CAPSULE_NAME, free_cap);
#else
    PyObject* cap = PyCObject_FromVoidPtr((void*)(*arg1), free);
#endif
    
#if NPY_API_VERSION < 0x00000007
    PyArray_BASE(array) = cap;
#else
    PyArray_SetBaseObject(array,cap);
#endif
    
    resultobj = SWIG_Python_AppendOutput(resultobj,obj);
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"pjs",  NULL 
  };
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:user_indices", kwnames, &obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res3 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "user_indices" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "user_indices" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      fastjet::user_indices(arg1,arg2,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg3); 
    }
    catch (fastjet::Error & e) {
      PyErr_SetString(FastJetError_, e.message().c_str());
      SWIG_fail;
    }
    catch (std::exception & e) {
      SWIG_exception(SWIG_SystemError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    
#ifdef SWIGPY_USE_CAPSULE
    PyObject* cap = PyCapsule_New((void*)(*arg1), SWIGPY_CAPSULE_NAME, free_cap);
#else
    PyObject* cap = PyCObject_FromVoidPtr((void*)(*arg1), free);
#endif
    
#if NPY_API_VERSION < 0x00000007
    PyArray_BASE(array) = cap;
#else
    PyArray_SetBaseObject(array,cap);
#endif
    
    resultobj = SWIG_Python_AppendOutput(resultobj,obj);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, "delete_SwigPyIterator(SwigPyIterator self)"},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, "SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_incr", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_incr, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator_incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
	 { "SwigPyIterator_decr", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_decr, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator_decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
	 { "SwigPyIterator_distance", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_distance, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { "SwigPyIterator_equal", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_equal, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, "SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, "SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, "SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, "SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_advance", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_advance, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___eq__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___eq__, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator___ne__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___ne__, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator___iadd__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___iadd__, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___isub__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___isub__, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___add__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___add__, METH_VARARGS|METH_KEYWORDS, "SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, "\n"
		"SwigPyIterator___sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "vectorPseudoJet_iterator", _wrap_vectorPseudoJet_iterator, METH_O, "vectorPseudoJet_iterator(vectorPseudoJet self) -> SwigPyIterator"},
	 { "vectorPseudoJet___nonzero__", _wrap_vectorPseudoJet___nonzero__, METH_O, "vectorPseudoJet___nonzero__(vectorPseudoJet self) -> bool"},
	 { "vectorPseudoJet___bool__", _wrap_vectorPseudoJet___bool__, METH_O, "vectorPseudoJet___bool__(vectorPseudoJet self) -> bool"},
	 { "vectorPseudoJet___len__", _wrap_vectorPseudoJet___len__, METH_O, "vectorPseudoJet___len__(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::size_type"},
	 { "vectorPseudoJet___getslice__", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet___getslice__, METH_VARARGS|METH_KEYWORDS, "vectorPseudoJet___getslice__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, std::vector< fastjet::PseudoJet >::difference_type j) -> vectorPseudoJet"},
	 { "vectorPseudoJet___setslice__", _wrap_vectorPseudoJet___setslice__, METH_VARARGS, "\n"
		"vectorPseudoJet___setslice__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, std::vector< fastjet::PseudoJet >::difference_type j)\n"
		"vectorPseudoJet___setslice__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, std::vector< fastjet::PseudoJet >::difference_type j, vectorPseudoJet v)\n"
		""},
	 { "vectorPseudoJet___delslice__", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet___delslice__, METH_VARARGS|METH_KEYWORDS, "vectorPseudoJet___delslice__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, std::vector< fastjet::PseudoJet >::difference_type j)"},
	 { "vectorPseudoJet___delitem__", _wrap_vectorPseudoJet___delitem__, METH_VARARGS, "\n"
		"vectorPseudoJet___delitem__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i)\n"
		"vectorPseudoJet___delitem__(vectorPseudoJet self, PySliceObject * slice)\n"
		""},
	 { "vectorPseudoJet___getitem__", _wrap_vectorPseudoJet___getitem__, METH_VARARGS, "\n"
		"vectorPseudoJet___getitem__(vectorPseudoJet self, PySliceObject * slice) -> vectorPseudoJet\n"
		"vectorPseudoJet___getitem__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i) -> PseudoJet\n"
		""},
	 { "vectorPseudoJet___setitem__", _wrap_vectorPseudoJet___setitem__, METH_VARARGS, "\n"
		"vectorPseudoJet___setitem__(vectorPseudoJet self, PySliceObject * slice, vectorPseudoJet v)\n"
		"vectorPseudoJet___setitem__(vectorPseudoJet self, PySliceObject * slice)\n"
		"vectorPseudoJet___setitem__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, PseudoJet x)\n"
		""},
	 { "vectorPseudoJet_pop", _wrap_vectorPseudoJet_pop, METH_O, "vectorPseudoJet_pop(vectorPseudoJet self) -> PseudoJet"},
	 { "vectorPseudoJet_append", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_append, METH_VARARGS|METH_KEYWORDS, "vectorPseudoJet_append(vectorPseudoJet self, PseudoJet x)"},
	 { "vectorPseudoJet_empty", _wrap_vectorPseudoJet_empty, METH_O, "vectorPseudoJet_empty(vectorPseudoJet self) -> bool"},
	 { "vectorPseudoJet_size", _wrap_vectorPseudoJet_size, METH_O, "vectorPseudoJet_size(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::size_type"},
	 { "vectorPseudoJet_swap", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_swap, METH_VARARGS|METH_KEYWORDS, "vectorPseudoJet_swap(vectorPseudoJet self, vectorPseudoJet v)"},
	 { "vectorPseudoJet_begin", _wrap_vectorPseudoJet_begin, METH_O, "vectorPseudoJet_begin(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::iterator"},
	 { "vectorPseudoJet_end", _wrap_vectorPseudoJet_end, METH_O, "vectorPseudoJet_end(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::iterator"},
	 { "vectorPseudoJet_rbegin", _wrap_vectorPseudoJet_rbegin, METH_O, "vectorPseudoJet_rbegin(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::reverse_iterator"},
	 { "vectorPseudoJet_rend", _wrap_vectorPseudoJet_rend, METH_O, "vectorPseudoJet_rend(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::reverse_iterator"},
	 { "vectorPseudoJet_clear", _wrap_vectorPseudoJet_clear, METH_O, "vectorPseudoJet_clear(vectorPseudoJet self)"},
	 { "vectorPseudoJet_get_allocator", _wrap_vectorPseudoJet_get_allocator, METH_O, "vectorPseudoJet_get_allocator(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::allocator_type"},
	 { "vectorPseudoJet_pop_back", _wrap_vectorPseudoJet_pop_back, METH_O, "vectorPseudoJet_pop_back(vectorPseudoJet self)"},
	 { "vectorPseudoJet_erase", _wrap_vectorPseudoJet_erase, METH_VARARGS, "\n"
		"vectorPseudoJet_erase(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::iterator pos) -> std::vector< fastjet::PseudoJet >::iterator\n"
		"vectorPseudoJet_erase(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::iterator first, std::vector< fastjet::PseudoJet >::iterator last) -> std::vector< fastjet::PseudoJet >::iterator\n"
		""},
	 { "new_vectorPseudoJet", _wrap_new_vectorPseudoJet, METH_VARARGS, "\n"
		"vectorPseudoJet()\n"
		"vectorPseudoJet(vectorPseudoJet other)\n"
		"vectorPseudoJet(std::vector< fastjet::PseudoJet >::size_type size)\n"
		"new_vectorPseudoJet(std::vector< fastjet::PseudoJet >::size_type size, PseudoJet value) -> vectorPseudoJet\n"
		""},
	 { "vectorPseudoJet_push_back", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_push_back, METH_VARARGS|METH_KEYWORDS, "vectorPseudoJet_push_back(vectorPseudoJet self, PseudoJet x)"},
	 { "vectorPseudoJet_front", _wrap_vectorPseudoJet_front, METH_O, "vectorPseudoJet_front(vectorPseudoJet self) -> PseudoJet"},
	 { "vectorPseudoJet_back", _wrap_vectorPseudoJet_back, METH_O, "vectorPseudoJet_back(vectorPseudoJet self) -> PseudoJet"},
	 { "vectorPseudoJet_assign", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_assign, METH_VARARGS|METH_KEYWORDS, "vectorPseudoJet_assign(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::size_type n, PseudoJet x)"},
	 { "vectorPseudoJet_resize", _wrap_vectorPseudoJet_resize, METH_VARARGS, "\n"
		"vectorPseudoJet_resize(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::size_type new_size)\n"
		"vectorPseudoJet_resize(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::size_type new_size, PseudoJet x)\n"
		""},
	 { "vectorPseudoJet_insert", _wrap_vectorPseudoJet_insert, METH_VARARGS, "\n"
		"vectorPseudoJet_insert(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::iterator pos, PseudoJet x) -> std::vector< fastjet::PseudoJet >::iterator\n"
		"vectorPseudoJet_insert(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::iterator pos, std::vector< fastjet::PseudoJet >::size_type n, PseudoJet x)\n"
		""},
	 { "vectorPseudoJet_reserve", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_reserve, METH_VARARGS|METH_KEYWORDS, "vectorPseudoJet_reserve(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::size_type n)"},
	 { "vectorPseudoJet_capacity", _wrap_vectorPseudoJet_capacity, METH_O, "vectorPseudoJet_capacity(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::size_type"},
	 { "delete_vectorPseudoJet", _wrap_delete_vectorPseudoJet, METH_O, "delete_vectorPseudoJet(vectorPseudoJet self)"},
	 { "vectorPseudoJet_swigregister", vectorPseudoJet_swigregister, METH_O, NULL},
	 { "vectorPseudoJet_swiginit", vectorPseudoJet_swiginit, METH_VARARGS, NULL},
	 { "new_PseudoJetStructureBase", _wrap_new_PseudoJetStructureBase, METH_NOARGS, "new_PseudoJetStructureBase() -> PseudoJetStructureBase"},
	 { "delete_PseudoJetStructureBase", _wrap_delete_PseudoJetStructureBase, METH_O, "delete_PseudoJetStructureBase(PseudoJetStructureBase self)"},
	 { "PseudoJetStructureBase_description", _wrap_PseudoJetStructureBase_description, METH_O, "PseudoJetStructureBase_description(PseudoJetStructureBase self) -> std::string"},
	 { "PseudoJetStructureBase_has_associated_cluster_sequence", _wrap_PseudoJetStructureBase_has_associated_cluster_sequence, METH_O, "PseudoJetStructureBase_has_associated_cluster_sequence(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_associated_cluster_sequence", _wrap_PseudoJetStructureBase_associated_cluster_sequence, METH_O, "PseudoJetStructureBase_associated_cluster_sequence(PseudoJetStructureBase self) -> ClusterSequence"},
	 { "PseudoJetStructureBase_has_valid_cluster_sequence", _wrap_PseudoJetStructureBase_has_valid_cluster_sequence, METH_O, "PseudoJetStructureBase_has_valid_cluster_sequence(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_validated_cs", _wrap_PseudoJetStructureBase_validated_cs, METH_O, "PseudoJetStructureBase_validated_cs(PseudoJetStructureBase self) -> ClusterSequence"},
	 { "PseudoJetStructureBase_validated_csab", _wrap_PseudoJetStructureBase_validated_csab, METH_O, "PseudoJetStructureBase_validated_csab(PseudoJetStructureBase self) -> fastjet::ClusterSequenceAreaBase const *"},
	 { "PseudoJetStructureBase_has_partner", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_has_partner, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_has_partner(PseudoJetStructureBase self, PseudoJet reference, PseudoJet partner) -> bool"},
	 { "PseudoJetStructureBase_has_child", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_has_child, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_has_child(PseudoJetStructureBase self, PseudoJet reference, PseudoJet child) -> bool"},
	 { "PseudoJetStructureBase_has_parents", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_has_parents, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_has_parents(PseudoJetStructureBase self, PseudoJet reference, PseudoJet parent1, PseudoJet parent2) -> bool"},
	 { "PseudoJetStructureBase_object_in_jet", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_object_in_jet, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_object_in_jet(PseudoJetStructureBase self, PseudoJet reference, PseudoJet jet) -> bool"},
	 { "PseudoJetStructureBase_has_constituents", _wrap_PseudoJetStructureBase_has_constituents, METH_O, "PseudoJetStructureBase_has_constituents(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_constituents", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_constituents, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_constituents(PseudoJetStructureBase self, PseudoJet reference) -> vectorPseudoJet"},
	 { "PseudoJetStructureBase_has_exclusive_subjets", _wrap_PseudoJetStructureBase_has_exclusive_subjets, METH_O, "PseudoJetStructureBase_has_exclusive_subjets(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_exclusive_subjets(PseudoJetStructureBase self, PseudoJet reference, double const & dcut) -> vectorPseudoJet"},
	 { "PseudoJetStructureBase_n_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_n_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_n_exclusive_subjets(PseudoJetStructureBase self, PseudoJet reference, double const & dcut) -> int"},
	 { "PseudoJetStructureBase_exclusive_subjets_up_to", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_exclusive_subjets_up_to, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_exclusive_subjets_up_to(PseudoJetStructureBase self, PseudoJet reference, int nsub) -> vectorPseudoJet"},
	 { "PseudoJetStructureBase_exclusive_subdmerge", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_exclusive_subdmerge, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_exclusive_subdmerge(PseudoJetStructureBase self, PseudoJet reference, int nsub) -> double"},
	 { "PseudoJetStructureBase_exclusive_subdmerge_max", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_exclusive_subdmerge_max, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_exclusive_subdmerge_max(PseudoJetStructureBase self, PseudoJet reference, int nsub) -> double"},
	 { "PseudoJetStructureBase_has_pieces", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_has_pieces, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_has_pieces(PseudoJetStructureBase self, PseudoJet arg2) -> bool"},
	 { "PseudoJetStructureBase_pieces", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_pieces, METH_VARARGS|METH_KEYWORDS, "PseudoJetStructureBase_pieces(PseudoJetStructureBase self, PseudoJet arg2) -> vectorPseudoJet"},
	 { "PseudoJetStructureBase_has_area", _wrap_PseudoJetStructureBase_has_area, METH_O, "PseudoJetStructureBase_has_area(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_area", _wrap_PseudoJetStructureBase_area, METH_O, "PseudoJetStructureBase_area(PseudoJetStructureBase self) -> double"},
	 { "PseudoJetStructureBase_area_error", _wrap_PseudoJetStructureBase_area_error, METH_O, "PseudoJetStructureBase_area_error(PseudoJetStructureBase self) -> double"},
	 { "PseudoJetStructureBase_area_4vector", _wrap_PseudoJetStructureBase_area_4vector, METH_O, "PseudoJetStructureBase_area_4vector(PseudoJetStructureBase self) -> PseudoJet"},
	 { "PseudoJetStructureBase_is_pure_ghost", _wrap_PseudoJetStructureBase_is_pure_ghost, METH_O, "PseudoJetStructureBase_is_pure_ghost(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_swigregister", PseudoJetStructureBase_swigregister, METH_O, NULL},
	 { "PseudoJetStructureBase_swiginit", PseudoJetStructureBase_swiginit, METH_VARARGS, NULL},
	 { "new_PseudoJet", _wrap_new_PseudoJet, METH_VARARGS, "\n"
		"PseudoJet()\n"
		"PseudoJet(double const px, double const py, double const pz, double const E)\n"
		"new_PseudoJet(bool arg1) -> PseudoJet\n"
		""},
	 { "delete_PseudoJet", _wrap_delete_PseudoJet, METH_O, "delete_PseudoJet(PseudoJet self)"},
	 { "PseudoJet_E", _wrap_PseudoJet_E, METH_O, "PseudoJet_E(PseudoJet self) -> double"},
	 { "PseudoJet_e", _wrap_PseudoJet_e, METH_O, "PseudoJet_e(PseudoJet self) -> double"},
	 { "PseudoJet_px", _wrap_PseudoJet_px, METH_O, "PseudoJet_px(PseudoJet self) -> double"},
	 { "PseudoJet_py", _wrap_PseudoJet_py, METH_O, "PseudoJet_py(PseudoJet self) -> double"},
	 { "PseudoJet_pz", _wrap_PseudoJet_pz, METH_O, "PseudoJet_pz(PseudoJet self) -> double"},
	 { "PseudoJet_phi", _wrap_PseudoJet_phi, METH_O, "PseudoJet_phi(PseudoJet self) -> double"},
	 { "PseudoJet_phi_std", _wrap_PseudoJet_phi_std, METH_O, "PseudoJet_phi_std(PseudoJet self) -> double"},
	 { "PseudoJet_phi_02pi", _wrap_PseudoJet_phi_02pi, METH_O, "PseudoJet_phi_02pi(PseudoJet self) -> double"},
	 { "PseudoJet_rap", _wrap_PseudoJet_rap, METH_O, "PseudoJet_rap(PseudoJet self) -> double"},
	 { "PseudoJet_rapidity", _wrap_PseudoJet_rapidity, METH_O, "PseudoJet_rapidity(PseudoJet self) -> double"},
	 { "PseudoJet_pseudorapidity", _wrap_PseudoJet_pseudorapidity, METH_O, "PseudoJet_pseudorapidity(PseudoJet self) -> double"},
	 { "PseudoJet_eta", _wrap_PseudoJet_eta, METH_O, "PseudoJet_eta(PseudoJet self) -> double"},
	 { "PseudoJet_pt2", _wrap_PseudoJet_pt2, METH_O, "PseudoJet_pt2(PseudoJet self) -> double"},
	 { "PseudoJet_pt", _wrap_PseudoJet_pt, METH_O, "PseudoJet_pt(PseudoJet self) -> double"},
	 { "PseudoJet_perp2", _wrap_PseudoJet_perp2, METH_O, "PseudoJet_perp2(PseudoJet self) -> double"},
	 { "PseudoJet_perp", _wrap_PseudoJet_perp, METH_O, "PseudoJet_perp(PseudoJet self) -> double"},
	 { "PseudoJet_kt2", _wrap_PseudoJet_kt2, METH_O, "PseudoJet_kt2(PseudoJet self) -> double"},
	 { "PseudoJet_m2", _wrap_PseudoJet_m2, METH_O, "PseudoJet_m2(PseudoJet self) -> double"},
	 { "PseudoJet_m", _wrap_PseudoJet_m, METH_O, "PseudoJet_m(PseudoJet self) -> double"},
	 { "PseudoJet_mperp2", _wrap_PseudoJet_mperp2, METH_O, "PseudoJet_mperp2(PseudoJet self) -> double"},
	 { "PseudoJet_mperp", _wrap_PseudoJet_mperp, METH_O, "PseudoJet_mperp(PseudoJet self) -> double"},
	 { "PseudoJet_mt2", _wrap_PseudoJet_mt2, METH_O, "PseudoJet_mt2(PseudoJet self) -> double"},
	 { "PseudoJet_mt", _wrap_PseudoJet_mt, METH_O, "PseudoJet_mt(PseudoJet self) -> double"},
	 { "PseudoJet_modp2", _wrap_PseudoJet_modp2, METH_O, "PseudoJet_modp2(PseudoJet self) -> double"},
	 { "PseudoJet_modp", _wrap_PseudoJet_modp, METH_O, "PseudoJet_modp(PseudoJet self) -> double"},
	 { "PseudoJet_Et", _wrap_PseudoJet_Et, METH_O, "PseudoJet_Et(PseudoJet self) -> double"},
	 { "PseudoJet_Et2", _wrap_PseudoJet_Et2, METH_O, "PseudoJet_Et2(PseudoJet self) -> double"},
	 { "PseudoJet_cos_theta", _wrap_PseudoJet_cos_theta, METH_O, "PseudoJet_cos_theta(PseudoJet self) -> double"},
	 { "PseudoJet_theta", _wrap_PseudoJet_theta, METH_O, "PseudoJet_theta(PseudoJet self) -> double"},
	 { "PseudoJet___call__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___call__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___call__(PseudoJet self, int i) -> double"},
	 { "PseudoJet_kt_distance", (PyCFunction)(void(*)(void))_wrap_PseudoJet_kt_distance, METH_VARARGS|METH_KEYWORDS, "PseudoJet_kt_distance(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_plain_distance", (PyCFunction)(void(*)(void))_wrap_PseudoJet_plain_distance, METH_VARARGS|METH_KEYWORDS, "PseudoJet_plain_distance(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_squared_distance", (PyCFunction)(void(*)(void))_wrap_PseudoJet_squared_distance, METH_VARARGS|METH_KEYWORDS, "PseudoJet_squared_distance(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_delta_R", (PyCFunction)(void(*)(void))_wrap_PseudoJet_delta_R, METH_VARARGS|METH_KEYWORDS, "PseudoJet_delta_R(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_delta_phi_to", (PyCFunction)(void(*)(void))_wrap_PseudoJet_delta_phi_to, METH_VARARGS|METH_KEYWORDS, "PseudoJet_delta_phi_to(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_beam_distance", _wrap_PseudoJet_beam_distance, METH_O, "PseudoJet_beam_distance(PseudoJet self) -> double"},
	 { "PseudoJet_four_mom", _wrap_PseudoJet_four_mom, METH_O, "PseudoJet_four_mom(PseudoJet self) -> std::valarray< double >"},
	 { "PseudoJet_boost", (PyCFunction)(void(*)(void))_wrap_PseudoJet_boost, METH_VARARGS|METH_KEYWORDS, "PseudoJet_boost(PseudoJet self, PseudoJet prest) -> PseudoJet"},
	 { "PseudoJet_unboost", (PyCFunction)(void(*)(void))_wrap_PseudoJet_unboost, METH_VARARGS|METH_KEYWORDS, "PseudoJet_unboost(PseudoJet self, PseudoJet prest) -> PseudoJet"},
	 { "PseudoJet___imul__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___imul__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___imul__(PseudoJet self, double arg2) -> PseudoJet"},
	 { "PseudoJet___itruediv__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___itruediv__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___itruediv__(PseudoJet self, double arg2) -> PseudoJet"},
	 { "PseudoJet___iadd__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___iadd__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___iadd__(PseudoJet self, PseudoJet arg2) -> PseudoJet"},
	 { "PseudoJet___isub__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___isub__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___isub__(PseudoJet self, PseudoJet arg2) -> PseudoJet"},
	 { "PseudoJet_reset", _wrap_PseudoJet_reset, METH_VARARGS, "\n"
		"PseudoJet_reset(PseudoJet self, double px, double py, double pz, double E)\n"
		"PseudoJet_reset(PseudoJet self, PseudoJet psjet)\n"
		""},
	 { "PseudoJet_reset_PtYPhiM", (PyCFunction)(void(*)(void))_wrap_PseudoJet_reset_PtYPhiM, METH_VARARGS|METH_KEYWORDS, "PseudoJet_reset_PtYPhiM(PseudoJet self, double pt_in, double y_in, double phi_in, double m_in=0.0)"},
	 { "PseudoJet_reset_momentum", _wrap_PseudoJet_reset_momentum, METH_VARARGS, "\n"
		"PseudoJet_reset_momentum(PseudoJet self, double px, double py, double pz, double E)\n"
		"PseudoJet_reset_momentum(PseudoJet self, PseudoJet pj)\n"
		""},
	 { "PseudoJet_reset_momentum_PtYPhiM", (PyCFunction)(void(*)(void))_wrap_PseudoJet_reset_momentum_PtYPhiM, METH_VARARGS|METH_KEYWORDS, "PseudoJet_reset_momentum_PtYPhiM(PseudoJet self, double pt, double y, double phi, double m=0.0)"},
	 { "PseudoJet_set_cached_rap_phi", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_cached_rap_phi, METH_VARARGS|METH_KEYWORDS, "PseudoJet_set_cached_rap_phi(PseudoJet self, double rap, double phi)"},
	 { "PseudoJet_user_index", _wrap_PseudoJet_user_index, METH_O, "PseudoJet_user_index(PseudoJet self) -> int"},
	 { "PseudoJet_set_user_index", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_user_index, METH_VARARGS|METH_KEYWORDS, "PseudoJet_set_user_index(PseudoJet self, int const index)"},
	 { "PseudoJet_set_user_info", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_user_info, METH_VARARGS|METH_KEYWORDS, "PseudoJet_set_user_info(PseudoJet self, fastjet::PseudoJet::UserInfoBase * user_info_in)"},
	 { "PseudoJet_has_user_info", _wrap_PseudoJet_has_user_info, METH_O, "PseudoJet_has_user_info(PseudoJet self) -> bool"},
	 { "PseudoJet_user_info_ptr", _wrap_PseudoJet_user_info_ptr, METH_O, "PseudoJet_user_info_ptr(PseudoJet self) -> fastjet::PseudoJet::UserInfoBase const *"},
	 { "PseudoJet_user_info_shared_ptr", _wrap_PseudoJet_user_info_shared_ptr, METH_VARARGS, "\n"
		"PseudoJet_user_info_shared_ptr(PseudoJet self) -> fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > const\n"
		"PseudoJet_user_info_shared_ptr(PseudoJet self) -> fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > &\n"
		""},
	 { "PseudoJet_description", _wrap_PseudoJet_description, METH_O, "PseudoJet_description(PseudoJet self) -> std::string"},
	 { "PseudoJet_has_associated_cluster_sequence", _wrap_PseudoJet_has_associated_cluster_sequence, METH_O, "PseudoJet_has_associated_cluster_sequence(PseudoJet self) -> bool"},
	 { "PseudoJet_has_associated_cs", _wrap_PseudoJet_has_associated_cs, METH_O, "PseudoJet_has_associated_cs(PseudoJet self) -> bool"},
	 { "PseudoJet_has_valid_cluster_sequence", _wrap_PseudoJet_has_valid_cluster_sequence, METH_O, "PseudoJet_has_valid_cluster_sequence(PseudoJet self) -> bool"},
	 { "PseudoJet_has_valid_cs", _wrap_PseudoJet_has_valid_cs, METH_O, "PseudoJet_has_valid_cs(PseudoJet self) -> bool"},
	 { "PseudoJet_associated_cluster_sequence", _wrap_PseudoJet_associated_cluster_sequence, METH_O, "PseudoJet_associated_cluster_sequence(PseudoJet self) -> ClusterSequence"},
	 { "PseudoJet_associated_cs", _wrap_PseudoJet_associated_cs, METH_O, "PseudoJet_associated_cs(PseudoJet self) -> ClusterSequence"},
	 { "PseudoJet_validated_cluster_sequence", _wrap_PseudoJet_validated_cluster_sequence, METH_O, "PseudoJet_validated_cluster_sequence(PseudoJet self) -> ClusterSequence"},
	 { "PseudoJet_validated_cs", _wrap_PseudoJet_validated_cs, METH_O, "PseudoJet_validated_cs(PseudoJet self) -> ClusterSequence"},
	 { "PseudoJet_validated_cluster_sequence_area_base", _wrap_PseudoJet_validated_cluster_sequence_area_base, METH_O, "PseudoJet_validated_cluster_sequence_area_base(PseudoJet self) -> fastjet::ClusterSequenceAreaBase const *"},
	 { "PseudoJet_validated_csab", _wrap_PseudoJet_validated_csab, METH_O, "PseudoJet_validated_csab(PseudoJet self) -> fastjet::ClusterSequenceAreaBase const *"},
	 { "PseudoJet_set_structure_shared_ptr", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_structure_shared_ptr, METH_VARARGS|METH_KEYWORDS, "PseudoJet_set_structure_shared_ptr(PseudoJet self, fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const & structure)"},
	 { "PseudoJet_has_structure", _wrap_PseudoJet_has_structure, METH_O, "PseudoJet_has_structure(PseudoJet self) -> bool"},
	 { "PseudoJet_structure_ptr", _wrap_PseudoJet_structure_ptr, METH_O, "PseudoJet_structure_ptr(PseudoJet self) -> PseudoJetStructureBase"},
	 { "PseudoJet_structure_non_const_ptr", _wrap_PseudoJet_structure_non_const_ptr, METH_O, "PseudoJet_structure_non_const_ptr(PseudoJet self) -> PseudoJetStructureBase"},
	 { "PseudoJet_validated_structure_ptr", _wrap_PseudoJet_validated_structure_ptr, METH_O, "PseudoJet_validated_structure_ptr(PseudoJet self) -> PseudoJetStructureBase"},
	 { "PseudoJet_structure_shared_ptr", _wrap_PseudoJet_structure_shared_ptr, METH_O, "PseudoJet_structure_shared_ptr(PseudoJet self) -> fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &"},
	 { "PseudoJet_has_partner", (PyCFunction)(void(*)(void))_wrap_PseudoJet_has_partner, METH_VARARGS|METH_KEYWORDS, "PseudoJet_has_partner(PseudoJet self, PseudoJet partner) -> bool"},
	 { "PseudoJet_has_child", (PyCFunction)(void(*)(void))_wrap_PseudoJet_has_child, METH_VARARGS|METH_KEYWORDS, "PseudoJet_has_child(PseudoJet self, PseudoJet child) -> bool"},
	 { "PseudoJet_has_parents", (PyCFunction)(void(*)(void))_wrap_PseudoJet_has_parents, METH_VARARGS|METH_KEYWORDS, "PseudoJet_has_parents(PseudoJet self, PseudoJet parent1, PseudoJet parent2) -> bool"},
	 { "PseudoJet_contains", (PyCFunction)(void(*)(void))_wrap_PseudoJet_contains, METH_VARARGS|METH_KEYWORDS, "PseudoJet_contains(PseudoJet self, PseudoJet constituent) -> bool"},
	 { "PseudoJet_is_inside", (PyCFunction)(void(*)(void))_wrap_PseudoJet_is_inside, METH_VARARGS|METH_KEYWORDS, "PseudoJet_is_inside(PseudoJet self, PseudoJet jet) -> bool"},
	 { "PseudoJet_has_constituents", _wrap_PseudoJet_has_constituents, METH_O, "PseudoJet_has_constituents(PseudoJet self) -> bool"},
	 { "PseudoJet_constituents", _wrap_PseudoJet_constituents, METH_O, "PseudoJet_constituents(PseudoJet self) -> vectorPseudoJet"},
	 { "PseudoJet_has_exclusive_subjets", _wrap_PseudoJet_has_exclusive_subjets, METH_O, "PseudoJet_has_exclusive_subjets(PseudoJet self) -> bool"},
	 { "PseudoJet_n_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_PseudoJet_n_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "PseudoJet_n_exclusive_subjets(PseudoJet self, double const dcut) -> int"},
	 { "PseudoJet_exclusive_subjets", _wrap_PseudoJet_exclusive_subjets, METH_VARARGS, "\n"
		"PseudoJet_exclusive_subjets(PseudoJet self, double const dcut) -> vectorPseudoJet\n"
		"PseudoJet_exclusive_subjets(PseudoJet self, int nsub) -> vectorPseudoJet\n"
		""},
	 { "PseudoJet_exclusive_subjets_up_to", (PyCFunction)(void(*)(void))_wrap_PseudoJet_exclusive_subjets_up_to, METH_VARARGS|METH_KEYWORDS, "PseudoJet_exclusive_subjets_up_to(PseudoJet self, int nsub) -> vectorPseudoJet"},
	 { "PseudoJet_exclusive_subdmerge", (PyCFunction)(void(*)(void))_wrap_PseudoJet_exclusive_subdmerge, METH_VARARGS|METH_KEYWORDS, "PseudoJet_exclusive_subdmerge(PseudoJet self, int nsub) -> double"},
	 { "PseudoJet_exclusive_subdmerge_max", (PyCFunction)(void(*)(void))_wrap_PseudoJet_exclusive_subdmerge_max, METH_VARARGS|METH_KEYWORDS, "PseudoJet_exclusive_subdmerge_max(PseudoJet self, int nsub) -> double"},
	 { "PseudoJet_has_pieces", _wrap_PseudoJet_has_pieces, METH_O, "PseudoJet_has_pieces(PseudoJet self) -> bool"},
	 { "PseudoJet_pieces", _wrap_PseudoJet_pieces, METH_O, "PseudoJet_pieces(PseudoJet self) -> vectorPseudoJet"},
	 { "PseudoJet_has_area", _wrap_PseudoJet_has_area, METH_O, "PseudoJet_has_area(PseudoJet self) -> bool"},
	 { "PseudoJet_area", _wrap_PseudoJet_area, METH_O, "PseudoJet_area(PseudoJet self) -> double"},
	 { "PseudoJet_area_error", _wrap_PseudoJet_area_error, METH_O, "PseudoJet_area_error(PseudoJet self) -> double"},
	 { "PseudoJet_area_4vector", _wrap_PseudoJet_area_4vector, METH_O, "PseudoJet_area_4vector(PseudoJet self) -> PseudoJet"},
	 { "PseudoJet_is_pure_ghost", _wrap_PseudoJet_is_pure_ghost, METH_O, "PseudoJet_is_pure_ghost(PseudoJet self) -> bool"},
	 { "PseudoJet_cluster_hist_index", _wrap_PseudoJet_cluster_hist_index, METH_O, "PseudoJet_cluster_hist_index(PseudoJet self) -> int"},
	 { "PseudoJet_set_cluster_hist_index", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_cluster_hist_index, METH_VARARGS|METH_KEYWORDS, "PseudoJet_set_cluster_hist_index(PseudoJet self, int const index)"},
	 { "PseudoJet_cluster_sequence_history_index", _wrap_PseudoJet_cluster_sequence_history_index, METH_O, "PseudoJet_cluster_sequence_history_index(PseudoJet self) -> int"},
	 { "PseudoJet_set_cluster_sequence_history_index", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_cluster_sequence_history_index, METH_VARARGS|METH_KEYWORDS, "PseudoJet_set_cluster_sequence_history_index(PseudoJet self, int const index)"},
	 { "PseudoJet___repr__", _wrap_PseudoJet___repr__, METH_O, "PseudoJet___repr__(PseudoJet self) -> std::string"},
	 { "PseudoJet_set_python_info", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_python_info, METH_VARARGS|METH_KEYWORDS, "PseudoJet_set_python_info(PseudoJet self, PyObject * pyobj)"},
	 { "PseudoJet_python_info", _wrap_PseudoJet_python_info, METH_O, "PseudoJet_python_info(PseudoJet self) -> PyObject *"},
	 { "PseudoJet___add__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___add__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___add__(PseudoJet self, PseudoJet p) -> PseudoJet"},
	 { "PseudoJet___sub__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___sub__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___sub__(PseudoJet self, PseudoJet p) -> PseudoJet"},
	 { "PseudoJet___mul__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___mul__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___mul__(PseudoJet self, double x) -> PseudoJet"},
	 { "PseudoJet___rmul__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___rmul__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___rmul__(PseudoJet self, double x) -> PseudoJet"},
	 { "PseudoJet___div__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___div__, METH_VARARGS|METH_KEYWORDS, "PseudoJet___div__(PseudoJet self, double x) -> PseudoJet"},
	 { "PseudoJet___eq__", _wrap_PseudoJet___eq__, METH_VARARGS, "\n"
		"PseudoJet___eq__(PseudoJet self, PseudoJet p) -> bool\n"
		"PseudoJet___eq__(PseudoJet self, double x) -> bool\n"
		""},
	 { "PseudoJet___ne__", _wrap_PseudoJet___ne__, METH_VARARGS, "\n"
		"PseudoJet___ne__(PseudoJet self, PseudoJet p) -> bool\n"
		"PseudoJet___ne__(PseudoJet self, double x) -> bool\n"
		""},
	 { "PseudoJet_swigregister", PseudoJet_swigregister, METH_O, NULL},
	 { "PseudoJet_swiginit", PseudoJet_swiginit, METH_VARARGS, NULL},
	 { "dot_product", (PyCFunction)(void(*)(void))_wrap_dot_product, METH_VARARGS|METH_KEYWORDS, "dot_product(PseudoJet a, PseudoJet b) -> double"},
	 { "cos_theta", (PyCFunction)(void(*)(void))_wrap_cos_theta, METH_VARARGS|METH_KEYWORDS, "cos_theta(PseudoJet a, PseudoJet b) -> double"},
	 { "theta", (PyCFunction)(void(*)(void))_wrap_theta, METH_VARARGS|METH_KEYWORDS, "theta(PseudoJet a, PseudoJet b) -> double"},
	 { "have_same_momentum", (PyCFunction)(void(*)(void))_wrap_have_same_momentum, METH_VARARGS|METH_KEYWORDS, "have_same_momentum(PseudoJet arg1, PseudoJet arg2) -> bool"},
	 { "PtYPhiM", (PyCFunction)(void(*)(void))_wrap_PtYPhiM, METH_VARARGS|METH_KEYWORDS, "PtYPhiM(double pt, double y, double phi, double m=0.0) -> PseudoJet"},
	 { "sorted_by_pt", (PyCFunction)(void(*)(void))_wrap_sorted_by_pt, METH_VARARGS|METH_KEYWORDS, "sorted_by_pt(vectorPseudoJet jets) -> vectorPseudoJet"},
	 { "sorted_by_rapidity", (PyCFunction)(void(*)(void))_wrap_sorted_by_rapidity, METH_VARARGS|METH_KEYWORDS, "sorted_by_rapidity(vectorPseudoJet jets) -> vectorPseudoJet"},
	 { "sorted_by_E", (PyCFunction)(void(*)(void))_wrap_sorted_by_E, METH_VARARGS|METH_KEYWORDS, "sorted_by_E(vectorPseudoJet jets) -> vectorPseudoJet"},
	 { "sorted_by_pz", (PyCFunction)(void(*)(void))_wrap_sorted_by_pz, METH_VARARGS|METH_KEYWORDS, "sorted_by_pz(vectorPseudoJet jets) -> vectorPseudoJet"},
	 { "sort_indices", (PyCFunction)(void(*)(void))_wrap_sort_indices, METH_VARARGS|METH_KEYWORDS, "sort_indices(std::vector< int,std::allocator< int > > & indices, std::vector< double,std::allocator< double > > const & values)"},
	 { "new_Selector", _wrap_new_Selector, METH_VARARGS, "\n"
		"Selector()\n"
		"new_Selector(fastjet::SelectorWorker * worker_in) -> Selector\n"
		""},
	 { "delete_Selector", _wrap_delete_Selector, METH_O, "delete_Selector(Selector self)"},
	 { "Selector__pass", (PyCFunction)(void(*)(void))_wrap_Selector__pass, METH_VARARGS|METH_KEYWORDS, "Selector__pass(Selector self, PseudoJet jet) -> bool"},
	 { "Selector_count", (PyCFunction)(void(*)(void))_wrap_Selector_count, METH_VARARGS|METH_KEYWORDS, "Selector_count(Selector self, vectorPseudoJet jets) -> unsigned int"},
	 { "Selector_sum", (PyCFunction)(void(*)(void))_wrap_Selector_sum, METH_VARARGS|METH_KEYWORDS, "Selector_sum(Selector self, vectorPseudoJet jets) -> PseudoJet"},
	 { "Selector_scalar_pt_sum", (PyCFunction)(void(*)(void))_wrap_Selector_scalar_pt_sum, METH_VARARGS|METH_KEYWORDS, "Selector_scalar_pt_sum(Selector self, vectorPseudoJet jets) -> double"},
	 { "Selector_sift", (PyCFunction)(void(*)(void))_wrap_Selector_sift, METH_VARARGS|METH_KEYWORDS, "Selector_sift(Selector self, vectorPseudoJet jets, vectorPseudoJet jets_that_pass, vectorPseudoJet jets_that_fail)"},
	 { "Selector_applies_jet_by_jet", _wrap_Selector_applies_jet_by_jet, METH_O, "Selector_applies_jet_by_jet(Selector self) -> bool"},
	 { "Selector___call__", _wrap_Selector___call__, METH_VARARGS, "\n"
		"Selector___call__(Selector self, PseudoJet jet) -> bool\n"
		"Selector___call__(Selector self, vectorPseudoJet jets) -> vectorPseudoJet\n"
		""},
	 { "Selector_nullify_non_selected", (PyCFunction)(void(*)(void))_wrap_Selector_nullify_non_selected, METH_VARARGS|METH_KEYWORDS, "Selector_nullify_non_selected(Selector self, std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > & jets)"},
	 { "Selector_get_rapidity_extent", (PyCFunction)(void(*)(void))_wrap_Selector_get_rapidity_extent, METH_VARARGS|METH_KEYWORDS, "Selector_get_rapidity_extent(Selector self, double & rapmin, double & rapmax)"},
	 { "Selector_description", _wrap_Selector_description, METH_O, "Selector_description(Selector self) -> std::string"},
	 { "Selector_is_geometric", _wrap_Selector_is_geometric, METH_O, "Selector_is_geometric(Selector self) -> bool"},
	 { "Selector_has_finite_area", _wrap_Selector_has_finite_area, METH_O, "Selector_has_finite_area(Selector self) -> bool"},
	 { "Selector_worker", _wrap_Selector_worker, METH_O, "Selector_worker(Selector self) -> fastjet::SharedPtr< fastjet::SelectorWorker > const &"},
	 { "Selector_validated_worker", _wrap_Selector_validated_worker, METH_O, "Selector_validated_worker(Selector self) -> fastjet::SelectorWorker const *"},
	 { "Selector_takes_reference", _wrap_Selector_takes_reference, METH_O, "Selector_takes_reference(Selector self) -> bool"},
	 { "Selector_set_reference", (PyCFunction)(void(*)(void))_wrap_Selector_set_reference, METH_VARARGS|METH_KEYWORDS, "Selector_set_reference(Selector self, PseudoJet reference) -> Selector"},
	 { "Selector_area", _wrap_Selector_area, METH_VARARGS, "\n"
		"Selector_area(Selector self) -> double\n"
		"Selector_area(Selector self, double arg2) -> double\n"
		""},
	 { "Selector___iand__", (PyCFunction)(void(*)(void))_wrap_Selector___iand__, METH_VARARGS|METH_KEYWORDS, "Selector___iand__(Selector self, Selector b) -> Selector"},
	 { "Selector___ior__", (PyCFunction)(void(*)(void))_wrap_Selector___ior__, METH_VARARGS|METH_KEYWORDS, "Selector___ior__(Selector self, Selector b) -> Selector"},
	 { "Selector___mul__", (PyCFunction)(void(*)(void))_wrap_Selector___mul__, METH_VARARGS|METH_KEYWORDS, "Selector___mul__(Selector self, Selector other) -> Selector"},
	 { "Selector___and__", (PyCFunction)(void(*)(void))_wrap_Selector___and__, METH_VARARGS|METH_KEYWORDS, "Selector___and__(Selector self, Selector other) -> Selector"},
	 { "Selector___or__", (PyCFunction)(void(*)(void))_wrap_Selector___or__, METH_VARARGS|METH_KEYWORDS, "Selector___or__(Selector self, Selector other) -> Selector"},
	 { "Selector___invert__", _wrap_Selector___invert__, METH_O, "Selector___invert__(Selector self) -> Selector"},
	 { "Selector_swigregister", Selector_swigregister, METH_O, NULL},
	 { "Selector_swiginit", Selector_swiginit, METH_VARARGS, NULL},
	 { "SelectorIdentity", _wrap_SelectorIdentity, METH_NOARGS, "SelectorIdentity() -> Selector"},
	 { "SelectorPtMin", (PyCFunction)(void(*)(void))_wrap_SelectorPtMin, METH_VARARGS|METH_KEYWORDS, "SelectorPtMin(double ptmin) -> Selector"},
	 { "SelectorPtMax", (PyCFunction)(void(*)(void))_wrap_SelectorPtMax, METH_VARARGS|METH_KEYWORDS, "SelectorPtMax(double ptmax) -> Selector"},
	 { "SelectorPtRange", (PyCFunction)(void(*)(void))_wrap_SelectorPtRange, METH_VARARGS|METH_KEYWORDS, "SelectorPtRange(double ptmin, double ptmax) -> Selector"},
	 { "SelectorEtMin", (PyCFunction)(void(*)(void))_wrap_SelectorEtMin, METH_VARARGS|METH_KEYWORDS, "SelectorEtMin(double Etmin) -> Selector"},
	 { "SelectorEtMax", (PyCFunction)(void(*)(void))_wrap_SelectorEtMax, METH_VARARGS|METH_KEYWORDS, "SelectorEtMax(double Etmax) -> Selector"},
	 { "SelectorEtRange", (PyCFunction)(void(*)(void))_wrap_SelectorEtRange, METH_VARARGS|METH_KEYWORDS, "SelectorEtRange(double Etmin, double Etmax) -> Selector"},
	 { "SelectorEMin", (PyCFunction)(void(*)(void))_wrap_SelectorEMin, METH_VARARGS|METH_KEYWORDS, "SelectorEMin(double Emin) -> Selector"},
	 { "SelectorEMax", (PyCFunction)(void(*)(void))_wrap_SelectorEMax, METH_VARARGS|METH_KEYWORDS, "SelectorEMax(double Emax) -> Selector"},
	 { "SelectorERange", (PyCFunction)(void(*)(void))_wrap_SelectorERange, METH_VARARGS|METH_KEYWORDS, "SelectorERange(double Emin, double Emax) -> Selector"},
	 { "SelectorMassMin", (PyCFunction)(void(*)(void))_wrap_SelectorMassMin, METH_VARARGS|METH_KEYWORDS, "SelectorMassMin(double Mmin) -> Selector"},
	 { "SelectorMassMax", (PyCFunction)(void(*)(void))_wrap_SelectorMassMax, METH_VARARGS|METH_KEYWORDS, "SelectorMassMax(double Mmax) -> Selector"},
	 { "SelectorMassRange", (PyCFunction)(void(*)(void))_wrap_SelectorMassRange, METH_VARARGS|METH_KEYWORDS, "SelectorMassRange(double Mmin, double Mmax) -> Selector"},
	 { "SelectorRapMin", (PyCFunction)(void(*)(void))_wrap_SelectorRapMin, METH_VARARGS|METH_KEYWORDS, "SelectorRapMin(double rapmin) -> Selector"},
	 { "SelectorRapMax", (PyCFunction)(void(*)(void))_wrap_SelectorRapMax, METH_VARARGS|METH_KEYWORDS, "SelectorRapMax(double rapmax) -> Selector"},
	 { "SelectorRapRange", (PyCFunction)(void(*)(void))_wrap_SelectorRapRange, METH_VARARGS|METH_KEYWORDS, "SelectorRapRange(double rapmin, double rapmax) -> Selector"},
	 { "SelectorAbsRapMin", (PyCFunction)(void(*)(void))_wrap_SelectorAbsRapMin, METH_VARARGS|METH_KEYWORDS, "SelectorAbsRapMin(double absrapmin) -> Selector"},
	 { "SelectorAbsRapMax", (PyCFunction)(void(*)(void))_wrap_SelectorAbsRapMax, METH_VARARGS|METH_KEYWORDS, "SelectorAbsRapMax(double absrapmax) -> Selector"},
	 { "SelectorAbsRapRange", (PyCFunction)(void(*)(void))_wrap_SelectorAbsRapRange, METH_VARARGS|METH_KEYWORDS, "SelectorAbsRapRange(double absrapmin, double absrapmax) -> Selector"},
	 { "SelectorEtaMin", (PyCFunction)(void(*)(void))_wrap_SelectorEtaMin, METH_VARARGS|METH_KEYWORDS, "SelectorEtaMin(double etamin) -> Selector"},
	 { "SelectorEtaMax", (PyCFunction)(void(*)(void))_wrap_SelectorEtaMax, METH_VARARGS|METH_KEYWORDS, "SelectorEtaMax(double etamax) -> Selector"},
	 { "SelectorEtaRange", (PyCFunction)(void(*)(void))_wrap_SelectorEtaRange, METH_VARARGS|METH_KEYWORDS, "SelectorEtaRange(double etamin, double etamax) -> Selector"},
	 { "SelectorAbsEtaMin", (PyCFunction)(void(*)(void))_wrap_SelectorAbsEtaMin, METH_VARARGS|METH_KEYWORDS, "SelectorAbsEtaMin(double absetamin) -> Selector"},
	 { "SelectorAbsEtaMax", (PyCFunction)(void(*)(void))_wrap_SelectorAbsEtaMax, METH_VARARGS|METH_KEYWORDS, "SelectorAbsEtaMax(double absetamax) -> Selector"},
	 { "SelectorAbsEtaRange", (PyCFunction)(void(*)(void))_wrap_SelectorAbsEtaRange, METH_VARARGS|METH_KEYWORDS, "SelectorAbsEtaRange(double absetamin, double absetamax) -> Selector"},
	 { "SelectorPhiRange", (PyCFunction)(void(*)(void))_wrap_SelectorPhiRange, METH_VARARGS|METH_KEYWORDS, "SelectorPhiRange(double phimin, double phimax) -> Selector"},
	 { "SelectorRapPhiRange", (PyCFunction)(void(*)(void))_wrap_SelectorRapPhiRange, METH_VARARGS|METH_KEYWORDS, "SelectorRapPhiRange(double rapmin, double rapmax, double phimin, double phimax) -> Selector"},
	 { "SelectorNHardest", (PyCFunction)(void(*)(void))_wrap_SelectorNHardest, METH_VARARGS|METH_KEYWORDS, "SelectorNHardest(unsigned int n) -> Selector"},
	 { "SelectorCircle", (PyCFunction)(void(*)(void))_wrap_SelectorCircle, METH_VARARGS|METH_KEYWORDS, "SelectorCircle(double const radius) -> Selector"},
	 { "SelectorDoughnut", (PyCFunction)(void(*)(void))_wrap_SelectorDoughnut, METH_VARARGS|METH_KEYWORDS, "SelectorDoughnut(double const radius_in, double const radius_out) -> Selector"},
	 { "SelectorStrip", (PyCFunction)(void(*)(void))_wrap_SelectorStrip, METH_VARARGS|METH_KEYWORDS, "SelectorStrip(double const half_width) -> Selector"},
	 { "SelectorRectangle", (PyCFunction)(void(*)(void))_wrap_SelectorRectangle, METH_VARARGS|METH_KEYWORDS, "SelectorRectangle(double const half_rap_width, double const half_phi_width) -> Selector"},
	 { "SelectorPtFractionMin", (PyCFunction)(void(*)(void))_wrap_SelectorPtFractionMin, METH_VARARGS|METH_KEYWORDS, "SelectorPtFractionMin(double fraction) -> Selector"},
	 { "SelectorIsZero", _wrap_SelectorIsZero, METH_NOARGS, "SelectorIsZero() -> Selector"},
	 { "SelectorIsPureGhost", _wrap_SelectorIsPureGhost, METH_NOARGS, "SelectorIsPureGhost() -> Selector"},
	 { "fastjet_version_string", _wrap_fastjet_version_string, METH_NOARGS, "fastjet_version_string() -> std::string"},
	 { "new_JetDefinition", _wrap_new_JetDefinition, METH_VARARGS, "\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, fastjet::RecombinationScheme recomb_scheme_in=E_scheme, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, fastjet::RecombinationScheme recomb_scheme_in=E_scheme, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, double xtra_param_in, fastjet::RecombinationScheme recomb_scheme_in=E_scheme, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, fastjet::JetDefinition::Recombiner const * recombiner_in, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, fastjet::JetDefinition::Recombiner const * recombiner_in, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, double xtra_param_in, fastjet::JetDefinition::Recombiner const * recombiner_in, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition()\n"
		"JetDefinition(fastjet::JetDefinition::Plugin const * plugin_in)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, fastjet::RecombinationScheme recomb_scheme_in, fastjet::Strategy strategy_in, int nparameters_in)\n"
		"new_JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, fastjet::Strategy strategy_in, fastjet::RecombinationScheme recomb_scheme_in=E_scheme, int nparameters_in=1) -> JetDefinition\n"
		""},
	 { "JetDefinition_set_recombination_scheme", (PyCFunction)(void(*)(void))_wrap_JetDefinition_set_recombination_scheme, METH_VARARGS|METH_KEYWORDS, "JetDefinition_set_recombination_scheme(JetDefinition self, fastjet::RecombinationScheme arg2)"},
	 { "JetDefinition_set_recombiner", _wrap_JetDefinition_set_recombiner, METH_VARARGS, "\n"
		"JetDefinition_set_recombiner(JetDefinition self, fastjet::JetDefinition::Recombiner const * recomb)\n"
		"JetDefinition_set_recombiner(JetDefinition self, JetDefinition other_jet_def)\n"
		""},
	 { "JetDefinition_delete_recombiner_when_unused", _wrap_JetDefinition_delete_recombiner_when_unused, METH_O, "JetDefinition_delete_recombiner_when_unused(JetDefinition self)"},
	 { "JetDefinition_plugin", _wrap_JetDefinition_plugin, METH_O, "JetDefinition_plugin(JetDefinition self) -> fastjet::JetDefinition::Plugin const *"},
	 { "JetDefinition_delete_plugin_when_unused", _wrap_JetDefinition_delete_plugin_when_unused, METH_O, "JetDefinition_delete_plugin_when_unused(JetDefinition self)"},
	 { "JetDefinition_jet_algorithm", _wrap_JetDefinition_jet_algorithm, METH_O, "JetDefinition_jet_algorithm(JetDefinition self) -> fastjet::JetAlgorithm"},
	 { "JetDefinition_jet_finder", _wrap_JetDefinition_jet_finder, METH_O, "JetDefinition_jet_finder(JetDefinition self) -> fastjet::JetAlgorithm"},
	 { "JetDefinition_R", _wrap_JetDefinition_R, METH_O, "JetDefinition_R(JetDefinition self) -> double"},
	 { "JetDefinition_extra_param", _wrap_JetDefinition_extra_param, METH_O, "JetDefinition_extra_param(JetDefinition self) -> double"},
	 { "JetDefinition_strategy", _wrap_JetDefinition_strategy, METH_O, "JetDefinition_strategy(JetDefinition self) -> fastjet::Strategy"},
	 { "JetDefinition_recombination_scheme", _wrap_JetDefinition_recombination_scheme, METH_O, "JetDefinition_recombination_scheme(JetDefinition self) -> fastjet::RecombinationScheme"},
	 { "JetDefinition_set_jet_algorithm", (PyCFunction)(void(*)(void))_wrap_JetDefinition_set_jet_algorithm, METH_VARARGS|METH_KEYWORDS, "JetDefinition_set_jet_algorithm(JetDefinition self, fastjet::JetAlgorithm njf)"},
	 { "JetDefinition_set_jet_finder", (PyCFunction)(void(*)(void))_wrap_JetDefinition_set_jet_finder, METH_VARARGS|METH_KEYWORDS, "JetDefinition_set_jet_finder(JetDefinition self, fastjet::JetAlgorithm njf)"},
	 { "JetDefinition_set_extra_param", (PyCFunction)(void(*)(void))_wrap_JetDefinition_set_extra_param, METH_VARARGS|METH_KEYWORDS, "JetDefinition_set_extra_param(JetDefinition self, double xtra_param)"},
	 { "JetDefinition_recombiner", _wrap_JetDefinition_recombiner, METH_O, "JetDefinition_recombiner(JetDefinition self) -> fastjet::JetDefinition::Recombiner const *"},
	 { "JetDefinition_has_same_recombiner", (PyCFunction)(void(*)(void))_wrap_JetDefinition_has_same_recombiner, METH_VARARGS|METH_KEYWORDS, "JetDefinition_has_same_recombiner(JetDefinition self, JetDefinition other_jd) -> bool"},
	 { "JetDefinition_is_spherical", _wrap_JetDefinition_is_spherical, METH_O, "JetDefinition_is_spherical(JetDefinition self) -> bool"},
	 { "JetDefinition_description", _wrap_JetDefinition_description, METH_O, "JetDefinition_description(JetDefinition self) -> std::string"},
	 { "JetDefinition_description_no_recombiner", _wrap_JetDefinition_description_no_recombiner, METH_O, "JetDefinition_description_no_recombiner(JetDefinition self) -> std::string"},
	 { "JetDefinition_algorithm_description", (PyCFunction)(void(*)(void))_wrap_JetDefinition_algorithm_description, METH_VARARGS|METH_KEYWORDS, "JetDefinition_algorithm_description(fastjet::JetAlgorithm const jet_alg) -> std::string"},
	 { "JetDefinition_n_parameters_for_algorithm", (PyCFunction)(void(*)(void))_wrap_JetDefinition_n_parameters_for_algorithm, METH_VARARGS|METH_KEYWORDS, "JetDefinition_n_parameters_for_algorithm(fastjet::JetAlgorithm const jet_alg) -> unsigned int"},
	 { "JetDefinition___call__", (PyCFunction)(void(*)(void))_wrap_JetDefinition___call__, METH_VARARGS|METH_KEYWORDS, "JetDefinition___call__(JetDefinition self, vectorPseudoJet particles) -> vectorPseudoJet"},
	 { "delete_JetDefinition", _wrap_delete_JetDefinition, METH_O, "delete_JetDefinition(JetDefinition self)"},
	 { "JetDefinition_swigregister", JetDefinition_swigregister, METH_O, NULL},
	 { "JetDefinition_swiginit", JetDefinition_swiginit, METH_VARARGS, NULL},
	 { "join", _wrap_join, METH_VARARGS, "\n"
		"join(vectorPseudoJet pieces) -> PseudoJet\n"
		"join(PseudoJet j1) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, PseudoJet j3) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, PseudoJet j3, PseudoJet j4) -> PseudoJet\n"
		"join(vectorPseudoJet pieces, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		"join(PseudoJet j1, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, PseudoJet j3, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, PseudoJet j3, PseudoJet j4, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		""},
	 { "new_CompositeJetStructure", _wrap_new_CompositeJetStructure, METH_VARARGS, "\n"
		"CompositeJetStructure()\n"
		"new_CompositeJetStructure(vectorPseudoJet initial_pieces, fastjet::JetDefinition::Recombiner const * recombiner=None) -> CompositeJetStructure\n"
		""},
	 { "delete_CompositeJetStructure", _wrap_delete_CompositeJetStructure, METH_O, "delete_CompositeJetStructure(CompositeJetStructure self)"},
	 { "CompositeJetStructure_description", _wrap_CompositeJetStructure_description, METH_O, "CompositeJetStructure_description(CompositeJetStructure self) -> std::string"},
	 { "CompositeJetStructure_has_constituents", _wrap_CompositeJetStructure_has_constituents, METH_O, "CompositeJetStructure_has_constituents(CompositeJetStructure self) -> bool"},
	 { "CompositeJetStructure_constituents", (PyCFunction)(void(*)(void))_wrap_CompositeJetStructure_constituents, METH_VARARGS|METH_KEYWORDS, "CompositeJetStructure_constituents(CompositeJetStructure self, PseudoJet jet) -> vectorPseudoJet"},
	 { "CompositeJetStructure_has_pieces", (PyCFunction)(void(*)(void))_wrap_CompositeJetStructure_has_pieces, METH_VARARGS|METH_KEYWORDS, "CompositeJetStructure_has_pieces(CompositeJetStructure self, PseudoJet arg2) -> bool"},
	 { "CompositeJetStructure_pieces", (PyCFunction)(void(*)(void))_wrap_CompositeJetStructure_pieces, METH_VARARGS|METH_KEYWORDS, "CompositeJetStructure_pieces(CompositeJetStructure self, PseudoJet jet) -> vectorPseudoJet"},
	 { "CompositeJetStructure_has_area", _wrap_CompositeJetStructure_has_area, METH_O, "CompositeJetStructure_has_area(CompositeJetStructure self) -> bool"},
	 { "CompositeJetStructure_area", _wrap_CompositeJetStructure_area, METH_O, "CompositeJetStructure_area(CompositeJetStructure self) -> double"},
	 { "CompositeJetStructure_area_error", _wrap_CompositeJetStructure_area_error, METH_O, "CompositeJetStructure_area_error(CompositeJetStructure self) -> double"},
	 { "CompositeJetStructure_area_4vector", _wrap_CompositeJetStructure_area_4vector, METH_O, "CompositeJetStructure_area_4vector(CompositeJetStructure self) -> PseudoJet"},
	 { "CompositeJetStructure_is_pure_ghost", _wrap_CompositeJetStructure_is_pure_ghost, METH_O, "CompositeJetStructure_is_pure_ghost(CompositeJetStructure self) -> bool"},
	 { "CompositeJetStructure_swigregister", CompositeJetStructure_swigregister, METH_O, NULL},
	 { "CompositeJetStructure_swiginit", CompositeJetStructure_swiginit, METH_VARARGS, NULL},
	 { "new_ClusterSequenceStructure", _wrap_new_ClusterSequenceStructure, METH_VARARGS, "\n"
		"ClusterSequenceStructure()\n"
		"new_ClusterSequenceStructure(ClusterSequence cs) -> ClusterSequenceStructure\n"
		""},
	 { "delete_ClusterSequenceStructure", _wrap_delete_ClusterSequenceStructure, METH_O, "delete_ClusterSequenceStructure(ClusterSequenceStructure self)"},
	 { "ClusterSequenceStructure_description", _wrap_ClusterSequenceStructure_description, METH_O, "ClusterSequenceStructure_description(ClusterSequenceStructure self) -> std::string"},
	 { "ClusterSequenceStructure_has_associated_cluster_sequence", _wrap_ClusterSequenceStructure_has_associated_cluster_sequence, METH_O, "ClusterSequenceStructure_has_associated_cluster_sequence(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_associated_cluster_sequence", _wrap_ClusterSequenceStructure_associated_cluster_sequence, METH_O, "ClusterSequenceStructure_associated_cluster_sequence(ClusterSequenceStructure self) -> ClusterSequence"},
	 { "ClusterSequenceStructure_has_valid_cluster_sequence", _wrap_ClusterSequenceStructure_has_valid_cluster_sequence, METH_O, "ClusterSequenceStructure_has_valid_cluster_sequence(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_validated_cs", _wrap_ClusterSequenceStructure_validated_cs, METH_O, "ClusterSequenceStructure_validated_cs(ClusterSequenceStructure self) -> ClusterSequence"},
	 { "ClusterSequenceStructure_validated_csab", _wrap_ClusterSequenceStructure_validated_csab, METH_O, "ClusterSequenceStructure_validated_csab(ClusterSequenceStructure self) -> fastjet::ClusterSequenceAreaBase const *"},
	 { "ClusterSequenceStructure_set_associated_cs", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_set_associated_cs, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_set_associated_cs(ClusterSequenceStructure self, ClusterSequence new_cs)"},
	 { "ClusterSequenceStructure_has_partner", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_has_partner, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_has_partner(ClusterSequenceStructure self, PseudoJet reference, PseudoJet partner) -> bool"},
	 { "ClusterSequenceStructure_has_child", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_has_child, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_has_child(ClusterSequenceStructure self, PseudoJet reference, PseudoJet child) -> bool"},
	 { "ClusterSequenceStructure_has_parents", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_has_parents, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_has_parents(ClusterSequenceStructure self, PseudoJet reference, PseudoJet parent1, PseudoJet parent2) -> bool"},
	 { "ClusterSequenceStructure_object_in_jet", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_object_in_jet, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_object_in_jet(ClusterSequenceStructure self, PseudoJet reference, PseudoJet jet) -> bool"},
	 { "ClusterSequenceStructure_has_constituents", _wrap_ClusterSequenceStructure_has_constituents, METH_O, "ClusterSequenceStructure_has_constituents(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_constituents", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_constituents, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_constituents(ClusterSequenceStructure self, PseudoJet reference) -> vectorPseudoJet"},
	 { "ClusterSequenceStructure_has_exclusive_subjets", _wrap_ClusterSequenceStructure_has_exclusive_subjets, METH_O, "ClusterSequenceStructure_has_exclusive_subjets(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_exclusive_subjets(ClusterSequenceStructure self, PseudoJet reference, double const & dcut) -> vectorPseudoJet"},
	 { "ClusterSequenceStructure_n_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_n_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_n_exclusive_subjets(ClusterSequenceStructure self, PseudoJet reference, double const & dcut) -> int"},
	 { "ClusterSequenceStructure_exclusive_subjets_up_to", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_exclusive_subjets_up_to, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_exclusive_subjets_up_to(ClusterSequenceStructure self, PseudoJet reference, int nsub) -> vectorPseudoJet"},
	 { "ClusterSequenceStructure_exclusive_subdmerge", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_exclusive_subdmerge, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_exclusive_subdmerge(ClusterSequenceStructure self, PseudoJet reference, int nsub) -> double"},
	 { "ClusterSequenceStructure_exclusive_subdmerge_max", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_exclusive_subdmerge_max, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_exclusive_subdmerge_max(ClusterSequenceStructure self, PseudoJet reference, int nsub) -> double"},
	 { "ClusterSequenceStructure_has_pieces", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_has_pieces, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_has_pieces(ClusterSequenceStructure self, PseudoJet reference) -> bool"},
	 { "ClusterSequenceStructure_pieces", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_pieces, METH_VARARGS|METH_KEYWORDS, "ClusterSequenceStructure_pieces(ClusterSequenceStructure self, PseudoJet reference) -> vectorPseudoJet"},
	 { "ClusterSequenceStructure_has_area", _wrap_ClusterSequenceStructure_has_area, METH_O, "ClusterSequenceStructure_has_area(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_area", _wrap_ClusterSequenceStructure_area, METH_O, "ClusterSequenceStructure_area(ClusterSequenceStructure self) -> double"},
	 { "ClusterSequenceStructure_area_error", _wrap_ClusterSequenceStructure_area_error, METH_O, "ClusterSequenceStructure_area_error(ClusterSequenceStructure self) -> double"},
	 { "ClusterSequenceStructure_area_4vector", _wrap_ClusterSequenceStructure_area_4vector, METH_O, "ClusterSequenceStructure_area_4vector(ClusterSequenceStructure self) -> PseudoJet"},
	 { "ClusterSequenceStructure_is_pure_ghost", _wrap_ClusterSequenceStructure_is_pure_ghost, METH_O, "ClusterSequenceStructure_is_pure_ghost(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_swigregister", ClusterSequenceStructure_swigregister, METH_O, NULL},
	 { "ClusterSequenceStructure_swiginit", ClusterSequenceStructure_swiginit, METH_VARARGS, NULL},
	 { "new_ClusterSequence", (PyCFunction)(void(*)(void))_wrap_new_ClusterSequence, METH_VARARGS|METH_KEYWORDS, "new_ClusterSequence(vectorPseudoJet pseudojets, JetDefinition jet_def, bool const & writeout_combinations=False) -> ClusterSequence"},
	 { "delete_ClusterSequence", _wrap_delete_ClusterSequence, METH_O, "delete_ClusterSequence(ClusterSequence self)"},
	 { "ClusterSequence_inclusive_jets", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_inclusive_jets, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_inclusive_jets(ClusterSequence self, double const ptmin=0.0) -> vectorPseudoJet"},
	 { "ClusterSequence_n_exclusive_jets", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_n_exclusive_jets, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_n_exclusive_jets(ClusterSequence self, double const dcut) -> int"},
	 { "ClusterSequence_exclusive_jets", _wrap_ClusterSequence_exclusive_jets, METH_VARARGS, "\n"
		"ClusterSequence_exclusive_jets(ClusterSequence self, double const dcut) -> vectorPseudoJet\n"
		"ClusterSequence_exclusive_jets(ClusterSequence self, int const njets) -> vectorPseudoJet\n"
		""},
	 { "ClusterSequence_exclusive_jets_up_to", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_jets_up_to, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_exclusive_jets_up_to(ClusterSequence self, int const njets) -> vectorPseudoJet"},
	 { "ClusterSequence_exclusive_dmerge", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_dmerge, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_exclusive_dmerge(ClusterSequence self, int const njets) -> double"},
	 { "ClusterSequence_exclusive_dmerge_max", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_dmerge_max, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_exclusive_dmerge_max(ClusterSequence self, int const njets) -> double"},
	 { "ClusterSequence_exclusive_ymerge", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_ymerge, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_exclusive_ymerge(ClusterSequence self, int njets) -> double"},
	 { "ClusterSequence_exclusive_ymerge_max", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_ymerge_max, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_exclusive_ymerge_max(ClusterSequence self, int njets) -> double"},
	 { "ClusterSequence_n_exclusive_jets_ycut", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_n_exclusive_jets_ycut, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_n_exclusive_jets_ycut(ClusterSequence self, double ycut) -> int"},
	 { "ClusterSequence_exclusive_jets_ycut", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_jets_ycut, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_exclusive_jets_ycut(ClusterSequence self, double ycut) -> vectorPseudoJet"},
	 { "ClusterSequence_n_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_n_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_n_exclusive_subjets(ClusterSequence self, PseudoJet jet, double const dcut) -> int"},
	 { "ClusterSequence_exclusive_subjets", _wrap_ClusterSequence_exclusive_subjets, METH_VARARGS, "\n"
		"ClusterSequence_exclusive_subjets(ClusterSequence self, PseudoJet jet, double const dcut) -> vectorPseudoJet\n"
		"ClusterSequence_exclusive_subjets(ClusterSequence self, PseudoJet jet, int nsub) -> vectorPseudoJet\n"
		""},
	 { "ClusterSequence_exclusive_subjets_up_to", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_subjets_up_to, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_exclusive_subjets_up_to(ClusterSequence self, PseudoJet jet, int nsub) -> vectorPseudoJet"},
	 { "ClusterSequence_exclusive_subdmerge", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_subdmerge, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_exclusive_subdmerge(ClusterSequence self, PseudoJet jet, int nsub) -> double"},
	 { "ClusterSequence_exclusive_subdmerge_max", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_subdmerge_max, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_exclusive_subdmerge_max(ClusterSequence self, PseudoJet jet, int nsub) -> double"},
	 { "ClusterSequence_Q", _wrap_ClusterSequence_Q, METH_O, "ClusterSequence_Q(ClusterSequence self) -> double"},
	 { "ClusterSequence_Q2", _wrap_ClusterSequence_Q2, METH_O, "ClusterSequence_Q2(ClusterSequence self) -> double"},
	 { "ClusterSequence_object_in_jet", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_object_in_jet, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_object_in_jet(ClusterSequence self, PseudoJet object, PseudoJet jet) -> bool"},
	 { "ClusterSequence_has_parents", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_has_parents, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_has_parents(ClusterSequence self, PseudoJet jet, PseudoJet parent1, PseudoJet parent2) -> bool"},
	 { "ClusterSequence_has_child", _wrap_ClusterSequence_has_child, METH_VARARGS, "\n"
		"ClusterSequence_has_child(ClusterSequence self, PseudoJet jet, PseudoJet child) -> bool\n"
		"ClusterSequence_has_child(ClusterSequence self, PseudoJet jet, fastjet::PseudoJet const *& childp) -> bool\n"
		""},
	 { "ClusterSequence_has_partner", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_has_partner, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_has_partner(ClusterSequence self, PseudoJet jet, PseudoJet partner) -> bool"},
	 { "ClusterSequence_constituents", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_constituents, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_constituents(ClusterSequence self, PseudoJet jet) -> vectorPseudoJet"},
	 { "ClusterSequence_print_jets_for_root", _wrap_ClusterSequence_print_jets_for_root, METH_VARARGS, "\n"
		"ClusterSequence_print_jets_for_root(ClusterSequence self, vectorPseudoJet jets, std::ostream & ostr=std::cout)\n"
		"ClusterSequence_print_jets_for_root(ClusterSequence self, vectorPseudoJet jets, std::string const & filename, std::string const & comment=\"\")\n"
		""},
	 { "ClusterSequence_add_constituents", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_add_constituents, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_add_constituents(ClusterSequence self, PseudoJet jet, vectorPseudoJet subjet_vector)"},
	 { "ClusterSequence_strategy_used", _wrap_ClusterSequence_strategy_used, METH_O, "ClusterSequence_strategy_used(ClusterSequence self) -> fastjet::Strategy"},
	 { "ClusterSequence_strategy_string", _wrap_ClusterSequence_strategy_string, METH_VARARGS, "\n"
		"ClusterSequence_strategy_string(ClusterSequence self) -> std::string\n"
		"ClusterSequence_strategy_string(ClusterSequence self, fastjet::Strategy strategy_in) -> std::string\n"
		""},
	 { "ClusterSequence_jet_def", _wrap_ClusterSequence_jet_def, METH_O, "ClusterSequence_jet_def(ClusterSequence self) -> JetDefinition"},
	 { "ClusterSequence_delete_self_when_unused", _wrap_ClusterSequence_delete_self_when_unused, METH_O, "ClusterSequence_delete_self_when_unused(ClusterSequence self)"},
	 { "ClusterSequence_will_delete_self_when_unused", _wrap_ClusterSequence_will_delete_self_when_unused, METH_O, "ClusterSequence_will_delete_self_when_unused(ClusterSequence self) -> bool"},
	 { "ClusterSequence_signal_imminent_self_deletion", _wrap_ClusterSequence_signal_imminent_self_deletion, METH_O, "ClusterSequence_signal_imminent_self_deletion(ClusterSequence self)"},
	 { "ClusterSequence_jet_scale_for_algorithm", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_jet_scale_for_algorithm, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_jet_scale_for_algorithm(ClusterSequence self, PseudoJet jet) -> double"},
	 { "ClusterSequence_plugin_record_ij_recombination", _wrap_ClusterSequence_plugin_record_ij_recombination, METH_VARARGS, "\n"
		"ClusterSequence_plugin_record_ij_recombination(ClusterSequence self, int jet_i, int jet_j, double dij, int & newjet_k)\n"
		"ClusterSequence_plugin_record_ij_recombination(ClusterSequence self, int jet_i, int jet_j, double dij, PseudoJet newjet, int & newjet_k)\n"
		""},
	 { "ClusterSequence_plugin_record_iB_recombination", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_plugin_record_iB_recombination, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_plugin_record_iB_recombination(ClusterSequence self, int jet_i, double diB)"},
	 { "ClusterSequence_plugin_associate_extras", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_plugin_associate_extras, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_plugin_associate_extras(ClusterSequence self, fastjet::ClusterSequence::Extras * extras_in)"},
	 { "ClusterSequence_plugin_activated", _wrap_ClusterSequence_plugin_activated, METH_O, "ClusterSequence_plugin_activated(ClusterSequence self) -> bool"},
	 { "ClusterSequence_extras", _wrap_ClusterSequence_extras, METH_O, "ClusterSequence_extras(ClusterSequence self) -> fastjet::ClusterSequence::Extras const *"},
	 { "ClusterSequence_jets", _wrap_ClusterSequence_jets, METH_O, "ClusterSequence_jets(ClusterSequence self) -> vectorPseudoJet"},
	 { "ClusterSequence_history", _wrap_ClusterSequence_history, METH_O, "ClusterSequence_history(ClusterSequence self) -> std::vector< fastjet::ClusterSequence::history_element,std::allocator< fastjet::ClusterSequence::history_element > > const &"},
	 { "ClusterSequence_n_particles", _wrap_ClusterSequence_n_particles, METH_O, "ClusterSequence_n_particles(ClusterSequence self) -> unsigned int"},
	 { "ClusterSequence_particle_jet_indices", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_particle_jet_indices, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_particle_jet_indices(ClusterSequence self, vectorPseudoJet arg2) -> std::vector< int,std::allocator< int > >"},
	 { "ClusterSequence_unique_history_order", _wrap_ClusterSequence_unique_history_order, METH_O, "ClusterSequence_unique_history_order(ClusterSequence self) -> std::vector< int,std::allocator< int > >"},
	 { "ClusterSequence_unclustered_particles", _wrap_ClusterSequence_unclustered_particles, METH_O, "ClusterSequence_unclustered_particles(ClusterSequence self) -> vectorPseudoJet"},
	 { "ClusterSequence_childless_pseudojets", _wrap_ClusterSequence_childless_pseudojets, METH_O, "ClusterSequence_childless_pseudojets(ClusterSequence self) -> vectorPseudoJet"},
	 { "ClusterSequence_contains", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_contains, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_contains(ClusterSequence self, PseudoJet object) -> bool"},
	 { "ClusterSequence_transfer_from_sequence", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_transfer_from_sequence, METH_VARARGS|METH_KEYWORDS, "ClusterSequence_transfer_from_sequence(ClusterSequence self, ClusterSequence from_seq, fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const * action_on_jets=None)"},
	 { "ClusterSequence_structure_shared_ptr", _wrap_ClusterSequence_structure_shared_ptr, METH_O, "ClusterSequence_structure_shared_ptr(ClusterSequence self) -> fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &"},
	 { "ClusterSequence_swigregister", ClusterSequence_swigregister, METH_O, NULL},
	 { "ClusterSequence_swiginit", ClusterSequence_swiginit, METH_VARARGS, NULL},
	 { "JetDefinition0Param", (PyCFunction)(void(*)(void))_wrap_JetDefinition0Param, METH_VARARGS|METH_KEYWORDS, "JetDefinition0Param(fastjet::JetAlgorithm jet_algorithm, fastjet::RecombinationScheme recomb_scheme=E_scheme, fastjet::Strategy strategy=Best) -> JetDefinition"},
	 { "JetDefinition1Param", (PyCFunction)(void(*)(void))_wrap_JetDefinition1Param, METH_VARARGS|METH_KEYWORDS, "JetDefinition1Param(fastjet::JetAlgorithm jet_algorithm, double R_in, fastjet::RecombinationScheme recomb_scheme=E_scheme, fastjet::Strategy strategy=Best) -> JetDefinition"},
	 { "JetDefinition2Param", (PyCFunction)(void(*)(void))_wrap_JetDefinition2Param, METH_VARARGS|METH_KEYWORDS, "JetDefinition2Param(fastjet::JetAlgorithm jet_algorithm, double R_in, double xtra_param, fastjet::RecombinationScheme recomb_scheme=E_scheme, fastjet::Strategy strategy=Best) -> JetDefinition"},
	 { "set_pseudojet_format", (PyCFunction)(void(*)(void))_wrap_set_pseudojet_format, METH_VARARGS|METH_KEYWORDS, "set_pseudojet_format(fastjet::PseudoJetRepresentation rep)"},
	 { "ptyphim_array_to_pseudojets", (PyCFunction)(void(*)(void))_wrap_ptyphim_array_to_pseudojets, METH_VARARGS|METH_KEYWORDS, "ptyphim_array_to_pseudojets(double * particles) -> vectorPseudoJet"},
	 { "epxpypz_array_to_pseudojets", (PyCFunction)(void(*)(void))_wrap_epxpypz_array_to_pseudojets, METH_VARARGS|METH_KEYWORDS, "epxpypz_array_to_pseudojets(double * particles) -> vectorPseudoJet"},
	 { "array_to_pseudojets", (PyCFunction)(void(*)(void))_wrap_array_to_pseudojets, METH_VARARGS|METH_KEYWORDS, "array_to_pseudojets(double * particles, fastjet::PseudoJetRepresentation pjrep=ptyphim) -> vectorPseudoJet"},
	 { "pseudojets_to_epxpypz_array", (PyCFunction)(void(*)(void))_wrap_pseudojets_to_epxpypz_array, METH_VARARGS|METH_KEYWORDS, "pseudojets_to_epxpypz_array(vectorPseudoJet pjs)"},
	 { "pseudojets_to_ptyphim_array", (PyCFunction)(void(*)(void))_wrap_pseudojets_to_ptyphim_array, METH_VARARGS|METH_KEYWORDS, "pseudojets_to_ptyphim_array(vectorPseudoJet pjs, bool mass=True)"},
	 { "pseudojets_to_array", (PyCFunction)(void(*)(void))_wrap_pseudojets_to_array, METH_VARARGS|METH_KEYWORDS, "pseudojets_to_array(vectorPseudoJet pjs, fastjet::PseudoJetRepresentation pjrep=ptyphim)"},
	 { "user_indices", (PyCFunction)(void(*)(void))_wrap_user_indices, METH_VARARGS|METH_KEYWORDS, "user_indices(vectorPseudoJet pjs)"},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, "delete_SwigPyIterator(SwigPyIterator self)"},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, "value(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_incr", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_incr, METH_VARARGS|METH_KEYWORDS, "incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
	 { "SwigPyIterator_decr", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_decr, METH_VARARGS|METH_KEYWORDS, "decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
	 { "SwigPyIterator_distance", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_distance, METH_VARARGS|METH_KEYWORDS, "distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { "SwigPyIterator_equal", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_equal, METH_VARARGS|METH_KEYWORDS, "equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, "copy(SwigPyIterator self) -> SwigPyIterator"},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, "next(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, "__next__(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, "previous(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_advance", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator_advance, METH_VARARGS|METH_KEYWORDS, "advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___eq__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___eq__, METH_VARARGS|METH_KEYWORDS, "__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator___ne__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___ne__, METH_VARARGS|METH_KEYWORDS, "__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator___iadd__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___iadd__, METH_VARARGS|METH_KEYWORDS, "__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___isub__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___isub__, METH_VARARGS|METH_KEYWORDS, "__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___add__", (PyCFunction)(void(*)(void))_wrap_SwigPyIterator___add__, METH_VARARGS|METH_KEYWORDS, "__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, "\n"
		"__sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"__sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "vectorPseudoJet_iterator", _wrap_vectorPseudoJet_iterator, METH_O, "iterator(vectorPseudoJet self) -> SwigPyIterator"},
	 { "vectorPseudoJet___nonzero__", _wrap_vectorPseudoJet___nonzero__, METH_O, "__nonzero__(vectorPseudoJet self) -> bool"},
	 { "vectorPseudoJet___bool__", _wrap_vectorPseudoJet___bool__, METH_O, "__bool__(vectorPseudoJet self) -> bool"},
	 { "vectorPseudoJet___len__", _wrap_vectorPseudoJet___len__, METH_O, "__len__(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::size_type"},
	 { "vectorPseudoJet___getslice__", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet___getslice__, METH_VARARGS|METH_KEYWORDS, "__getslice__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, std::vector< fastjet::PseudoJet >::difference_type j) -> vectorPseudoJet"},
	 { "vectorPseudoJet___setslice__", _wrap_vectorPseudoJet___setslice__, METH_VARARGS, "\n"
		"__setslice__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, std::vector< fastjet::PseudoJet >::difference_type j)\n"
		"__setslice__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, std::vector< fastjet::PseudoJet >::difference_type j, vectorPseudoJet v)\n"
		""},
	 { "vectorPseudoJet___delslice__", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet___delslice__, METH_VARARGS|METH_KEYWORDS, "__delslice__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, std::vector< fastjet::PseudoJet >::difference_type j)"},
	 { "vectorPseudoJet___delitem__", _wrap_vectorPseudoJet___delitem__, METH_VARARGS, "\n"
		"__delitem__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i)\n"
		"__delitem__(vectorPseudoJet self, PySliceObject * slice)\n"
		""},
	 { "vectorPseudoJet___getitem__", _wrap_vectorPseudoJet___getitem__, METH_VARARGS, "\n"
		"__getitem__(vectorPseudoJet self, PySliceObject * slice) -> vectorPseudoJet\n"
		"__getitem__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i) -> PseudoJet\n"
		""},
	 { "vectorPseudoJet___setitem__", _wrap_vectorPseudoJet___setitem__, METH_VARARGS, "\n"
		"__setitem__(vectorPseudoJet self, PySliceObject * slice, vectorPseudoJet v)\n"
		"__setitem__(vectorPseudoJet self, PySliceObject * slice)\n"
		"__setitem__(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::difference_type i, PseudoJet x)\n"
		""},
	 { "vectorPseudoJet_pop", _wrap_vectorPseudoJet_pop, METH_O, "pop(vectorPseudoJet self) -> PseudoJet"},
	 { "vectorPseudoJet_append", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_append, METH_VARARGS|METH_KEYWORDS, "append(vectorPseudoJet self, PseudoJet x)"},
	 { "vectorPseudoJet_empty", _wrap_vectorPseudoJet_empty, METH_O, "empty(vectorPseudoJet self) -> bool"},
	 { "vectorPseudoJet_size", _wrap_vectorPseudoJet_size, METH_O, "size(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::size_type"},
	 { "vectorPseudoJet_swap", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_swap, METH_VARARGS|METH_KEYWORDS, "swap(vectorPseudoJet self, vectorPseudoJet v)"},
	 { "vectorPseudoJet_begin", _wrap_vectorPseudoJet_begin, METH_O, "begin(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::iterator"},
	 { "vectorPseudoJet_end", _wrap_vectorPseudoJet_end, METH_O, "end(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::iterator"},
	 { "vectorPseudoJet_rbegin", _wrap_vectorPseudoJet_rbegin, METH_O, "rbegin(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::reverse_iterator"},
	 { "vectorPseudoJet_rend", _wrap_vectorPseudoJet_rend, METH_O, "rend(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::reverse_iterator"},
	 { "vectorPseudoJet_clear", _wrap_vectorPseudoJet_clear, METH_O, "clear(vectorPseudoJet self)"},
	 { "vectorPseudoJet_get_allocator", _wrap_vectorPseudoJet_get_allocator, METH_O, "get_allocator(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::allocator_type"},
	 { "vectorPseudoJet_pop_back", _wrap_vectorPseudoJet_pop_back, METH_O, "pop_back(vectorPseudoJet self)"},
	 { "vectorPseudoJet_erase", _wrap_vectorPseudoJet_erase, METH_VARARGS, "\n"
		"erase(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::iterator pos) -> std::vector< fastjet::PseudoJet >::iterator\n"
		"erase(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::iterator first, std::vector< fastjet::PseudoJet >::iterator last) -> std::vector< fastjet::PseudoJet >::iterator\n"
		""},
	 { "new_vectorPseudoJet", _wrap_new_vectorPseudoJet, METH_VARARGS, "\n"
		"vectorPseudoJet()\n"
		"vectorPseudoJet(vectorPseudoJet other)\n"
		"vectorPseudoJet(std::vector< fastjet::PseudoJet >::size_type size)\n"
		"new_vectorPseudoJet(std::vector< fastjet::PseudoJet >::size_type size, PseudoJet value) -> vectorPseudoJet\n"
		""},
	 { "vectorPseudoJet_push_back", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_push_back, METH_VARARGS|METH_KEYWORDS, "push_back(vectorPseudoJet self, PseudoJet x)"},
	 { "vectorPseudoJet_front", _wrap_vectorPseudoJet_front, METH_O, "front(vectorPseudoJet self) -> PseudoJet"},
	 { "vectorPseudoJet_back", _wrap_vectorPseudoJet_back, METH_O, "back(vectorPseudoJet self) -> PseudoJet"},
	 { "vectorPseudoJet_assign", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_assign, METH_VARARGS|METH_KEYWORDS, "assign(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::size_type n, PseudoJet x)"},
	 { "vectorPseudoJet_resize", _wrap_vectorPseudoJet_resize, METH_VARARGS, "\n"
		"resize(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::size_type new_size)\n"
		"resize(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::size_type new_size, PseudoJet x)\n"
		""},
	 { "vectorPseudoJet_insert", _wrap_vectorPseudoJet_insert, METH_VARARGS, "\n"
		"insert(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::iterator pos, PseudoJet x) -> std::vector< fastjet::PseudoJet >::iterator\n"
		"insert(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::iterator pos, std::vector< fastjet::PseudoJet >::size_type n, PseudoJet x)\n"
		""},
	 { "vectorPseudoJet_reserve", (PyCFunction)(void(*)(void))_wrap_vectorPseudoJet_reserve, METH_VARARGS|METH_KEYWORDS, "reserve(vectorPseudoJet self, std::vector< fastjet::PseudoJet >::size_type n)"},
	 { "vectorPseudoJet_capacity", _wrap_vectorPseudoJet_capacity, METH_O, "capacity(vectorPseudoJet self) -> std::vector< fastjet::PseudoJet >::size_type"},
	 { "delete_vectorPseudoJet", _wrap_delete_vectorPseudoJet, METH_O, "delete_vectorPseudoJet(vectorPseudoJet self)"},
	 { "vectorPseudoJet_swigregister", vectorPseudoJet_swigregister, METH_O, NULL},
	 { "vectorPseudoJet_swiginit", vectorPseudoJet_swiginit, METH_VARARGS, NULL},
	 { "new_PseudoJetStructureBase", _wrap_new_PseudoJetStructureBase, METH_NOARGS, "new_PseudoJetStructureBase() -> PseudoJetStructureBase"},
	 { "delete_PseudoJetStructureBase", _wrap_delete_PseudoJetStructureBase, METH_O, "delete_PseudoJetStructureBase(PseudoJetStructureBase self)"},
	 { "PseudoJetStructureBase_description", _wrap_PseudoJetStructureBase_description, METH_O, "description(PseudoJetStructureBase self) -> std::string"},
	 { "PseudoJetStructureBase_has_associated_cluster_sequence", _wrap_PseudoJetStructureBase_has_associated_cluster_sequence, METH_O, "has_associated_cluster_sequence(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_associated_cluster_sequence", _wrap_PseudoJetStructureBase_associated_cluster_sequence, METH_O, "associated_cluster_sequence(PseudoJetStructureBase self) -> ClusterSequence"},
	 { "PseudoJetStructureBase_has_valid_cluster_sequence", _wrap_PseudoJetStructureBase_has_valid_cluster_sequence, METH_O, "has_valid_cluster_sequence(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_validated_cs", _wrap_PseudoJetStructureBase_validated_cs, METH_O, "validated_cs(PseudoJetStructureBase self) -> ClusterSequence"},
	 { "PseudoJetStructureBase_validated_csab", _wrap_PseudoJetStructureBase_validated_csab, METH_O, "validated_csab(PseudoJetStructureBase self) -> fastjet::ClusterSequenceAreaBase const *"},
	 { "PseudoJetStructureBase_has_partner", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_has_partner, METH_VARARGS|METH_KEYWORDS, "has_partner(PseudoJetStructureBase self, PseudoJet reference, PseudoJet partner) -> bool"},
	 { "PseudoJetStructureBase_has_child", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_has_child, METH_VARARGS|METH_KEYWORDS, "has_child(PseudoJetStructureBase self, PseudoJet reference, PseudoJet child) -> bool"},
	 { "PseudoJetStructureBase_has_parents", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_has_parents, METH_VARARGS|METH_KEYWORDS, "has_parents(PseudoJetStructureBase self, PseudoJet reference, PseudoJet parent1, PseudoJet parent2) -> bool"},
	 { "PseudoJetStructureBase_object_in_jet", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_object_in_jet, METH_VARARGS|METH_KEYWORDS, "object_in_jet(PseudoJetStructureBase self, PseudoJet reference, PseudoJet jet) -> bool"},
	 { "PseudoJetStructureBase_has_constituents", _wrap_PseudoJetStructureBase_has_constituents, METH_O, "has_constituents(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_constituents", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_constituents, METH_VARARGS|METH_KEYWORDS, "constituents(PseudoJetStructureBase self, PseudoJet reference) -> vectorPseudoJet"},
	 { "PseudoJetStructureBase_has_exclusive_subjets", _wrap_PseudoJetStructureBase_has_exclusive_subjets, METH_O, "has_exclusive_subjets(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "exclusive_subjets(PseudoJetStructureBase self, PseudoJet reference, double const & dcut) -> vectorPseudoJet"},
	 { "PseudoJetStructureBase_n_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_n_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "n_exclusive_subjets(PseudoJetStructureBase self, PseudoJet reference, double const & dcut) -> int"},
	 { "PseudoJetStructureBase_exclusive_subjets_up_to", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_exclusive_subjets_up_to, METH_VARARGS|METH_KEYWORDS, "exclusive_subjets_up_to(PseudoJetStructureBase self, PseudoJet reference, int nsub) -> vectorPseudoJet"},
	 { "PseudoJetStructureBase_exclusive_subdmerge", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_exclusive_subdmerge, METH_VARARGS|METH_KEYWORDS, "exclusive_subdmerge(PseudoJetStructureBase self, PseudoJet reference, int nsub) -> double"},
	 { "PseudoJetStructureBase_exclusive_subdmerge_max", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_exclusive_subdmerge_max, METH_VARARGS|METH_KEYWORDS, "exclusive_subdmerge_max(PseudoJetStructureBase self, PseudoJet reference, int nsub) -> double"},
	 { "PseudoJetStructureBase_has_pieces", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_has_pieces, METH_VARARGS|METH_KEYWORDS, "has_pieces(PseudoJetStructureBase self, PseudoJet arg2) -> bool"},
	 { "PseudoJetStructureBase_pieces", (PyCFunction)(void(*)(void))_wrap_PseudoJetStructureBase_pieces, METH_VARARGS|METH_KEYWORDS, "pieces(PseudoJetStructureBase self, PseudoJet arg2) -> vectorPseudoJet"},
	 { "PseudoJetStructureBase_has_area", _wrap_PseudoJetStructureBase_has_area, METH_O, "has_area(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_area", _wrap_PseudoJetStructureBase_area, METH_O, "area(PseudoJetStructureBase self) -> double"},
	 { "PseudoJetStructureBase_area_error", _wrap_PseudoJetStructureBase_area_error, METH_O, "area_error(PseudoJetStructureBase self) -> double"},
	 { "PseudoJetStructureBase_area_4vector", _wrap_PseudoJetStructureBase_area_4vector, METH_O, "area_4vector(PseudoJetStructureBase self) -> PseudoJet"},
	 { "PseudoJetStructureBase_is_pure_ghost", _wrap_PseudoJetStructureBase_is_pure_ghost, METH_O, "is_pure_ghost(PseudoJetStructureBase self) -> bool"},
	 { "PseudoJetStructureBase_swigregister", PseudoJetStructureBase_swigregister, METH_O, NULL},
	 { "PseudoJetStructureBase_swiginit", PseudoJetStructureBase_swiginit, METH_VARARGS, NULL},
	 { "new_PseudoJet", _wrap_new_PseudoJet, METH_VARARGS, "\n"
		"PseudoJet()\n"
		"PseudoJet(double const px, double const py, double const pz, double const E)\n"
		"new_PseudoJet(bool arg1) -> PseudoJet\n"
		""},
	 { "delete_PseudoJet", _wrap_delete_PseudoJet, METH_O, "delete_PseudoJet(PseudoJet self)"},
	 { "PseudoJet_E", _wrap_PseudoJet_E, METH_O, "E(PseudoJet self) -> double"},
	 { "PseudoJet_e", _wrap_PseudoJet_e, METH_O, "e(PseudoJet self) -> double"},
	 { "PseudoJet_px", _wrap_PseudoJet_px, METH_O, "px(PseudoJet self) -> double"},
	 { "PseudoJet_py", _wrap_PseudoJet_py, METH_O, "py(PseudoJet self) -> double"},
	 { "PseudoJet_pz", _wrap_PseudoJet_pz, METH_O, "pz(PseudoJet self) -> double"},
	 { "PseudoJet_phi", _wrap_PseudoJet_phi, METH_O, "phi(PseudoJet self) -> double"},
	 { "PseudoJet_phi_std", _wrap_PseudoJet_phi_std, METH_O, "phi_std(PseudoJet self) -> double"},
	 { "PseudoJet_phi_02pi", _wrap_PseudoJet_phi_02pi, METH_O, "phi_02pi(PseudoJet self) -> double"},
	 { "PseudoJet_rap", _wrap_PseudoJet_rap, METH_O, "rap(PseudoJet self) -> double"},
	 { "PseudoJet_rapidity", _wrap_PseudoJet_rapidity, METH_O, "rapidity(PseudoJet self) -> double"},
	 { "PseudoJet_pseudorapidity", _wrap_PseudoJet_pseudorapidity, METH_O, "pseudorapidity(PseudoJet self) -> double"},
	 { "PseudoJet_eta", _wrap_PseudoJet_eta, METH_O, "eta(PseudoJet self) -> double"},
	 { "PseudoJet_pt2", _wrap_PseudoJet_pt2, METH_O, "pt2(PseudoJet self) -> double"},
	 { "PseudoJet_pt", _wrap_PseudoJet_pt, METH_O, "pt(PseudoJet self) -> double"},
	 { "PseudoJet_perp2", _wrap_PseudoJet_perp2, METH_O, "perp2(PseudoJet self) -> double"},
	 { "PseudoJet_perp", _wrap_PseudoJet_perp, METH_O, "perp(PseudoJet self) -> double"},
	 { "PseudoJet_kt2", _wrap_PseudoJet_kt2, METH_O, "kt2(PseudoJet self) -> double"},
	 { "PseudoJet_m2", _wrap_PseudoJet_m2, METH_O, "m2(PseudoJet self) -> double"},
	 { "PseudoJet_m", _wrap_PseudoJet_m, METH_O, "m(PseudoJet self) -> double"},
	 { "PseudoJet_mperp2", _wrap_PseudoJet_mperp2, METH_O, "mperp2(PseudoJet self) -> double"},
	 { "PseudoJet_mperp", _wrap_PseudoJet_mperp, METH_O, "mperp(PseudoJet self) -> double"},
	 { "PseudoJet_mt2", _wrap_PseudoJet_mt2, METH_O, "mt2(PseudoJet self) -> double"},
	 { "PseudoJet_mt", _wrap_PseudoJet_mt, METH_O, "mt(PseudoJet self) -> double"},
	 { "PseudoJet_modp2", _wrap_PseudoJet_modp2, METH_O, "modp2(PseudoJet self) -> double"},
	 { "PseudoJet_modp", _wrap_PseudoJet_modp, METH_O, "modp(PseudoJet self) -> double"},
	 { "PseudoJet_Et", _wrap_PseudoJet_Et, METH_O, "Et(PseudoJet self) -> double"},
	 { "PseudoJet_Et2", _wrap_PseudoJet_Et2, METH_O, "Et2(PseudoJet self) -> double"},
	 { "PseudoJet_cos_theta", _wrap_PseudoJet_cos_theta, METH_O, "cos_theta(PseudoJet self) -> double"},
	 { "PseudoJet_theta", _wrap_PseudoJet_theta, METH_O, "theta(PseudoJet self) -> double"},
	 { "PseudoJet___call__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___call__, METH_VARARGS|METH_KEYWORDS, "__call__(PseudoJet self, int i) -> double"},
	 { "PseudoJet_kt_distance", (PyCFunction)(void(*)(void))_wrap_PseudoJet_kt_distance, METH_VARARGS|METH_KEYWORDS, "kt_distance(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_plain_distance", (PyCFunction)(void(*)(void))_wrap_PseudoJet_plain_distance, METH_VARARGS|METH_KEYWORDS, "plain_distance(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_squared_distance", (PyCFunction)(void(*)(void))_wrap_PseudoJet_squared_distance, METH_VARARGS|METH_KEYWORDS, "squared_distance(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_delta_R", (PyCFunction)(void(*)(void))_wrap_PseudoJet_delta_R, METH_VARARGS|METH_KEYWORDS, "delta_R(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_delta_phi_to", (PyCFunction)(void(*)(void))_wrap_PseudoJet_delta_phi_to, METH_VARARGS|METH_KEYWORDS, "delta_phi_to(PseudoJet self, PseudoJet other) -> double"},
	 { "PseudoJet_beam_distance", _wrap_PseudoJet_beam_distance, METH_O, "beam_distance(PseudoJet self) -> double"},
	 { "PseudoJet_four_mom", _wrap_PseudoJet_four_mom, METH_O, "four_mom(PseudoJet self) -> std::valarray< double >"},
	 { "PseudoJet_boost", (PyCFunction)(void(*)(void))_wrap_PseudoJet_boost, METH_VARARGS|METH_KEYWORDS, "boost(PseudoJet self, PseudoJet prest) -> PseudoJet"},
	 { "PseudoJet_unboost", (PyCFunction)(void(*)(void))_wrap_PseudoJet_unboost, METH_VARARGS|METH_KEYWORDS, "unboost(PseudoJet self, PseudoJet prest) -> PseudoJet"},
	 { "PseudoJet___imul__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___imul__, METH_VARARGS|METH_KEYWORDS, "__imul__(PseudoJet self, double arg2) -> PseudoJet"},
	 { "PseudoJet___itruediv__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___itruediv__, METH_VARARGS|METH_KEYWORDS, "__itruediv__(PseudoJet self, double arg2) -> PseudoJet"},
	 { "PseudoJet___iadd__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___iadd__, METH_VARARGS|METH_KEYWORDS, "__iadd__(PseudoJet self, PseudoJet arg2) -> PseudoJet"},
	 { "PseudoJet___isub__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___isub__, METH_VARARGS|METH_KEYWORDS, "__isub__(PseudoJet self, PseudoJet arg2) -> PseudoJet"},
	 { "PseudoJet_reset", _wrap_PseudoJet_reset, METH_VARARGS, "\n"
		"reset(PseudoJet self, double px, double py, double pz, double E)\n"
		"reset(PseudoJet self, PseudoJet psjet)\n"
		""},
	 { "PseudoJet_reset_PtYPhiM", (PyCFunction)(void(*)(void))_wrap_PseudoJet_reset_PtYPhiM, METH_VARARGS|METH_KEYWORDS, "reset_PtYPhiM(PseudoJet self, double pt_in, double y_in, double phi_in, double m_in=0.0)"},
	 { "PseudoJet_reset_momentum", _wrap_PseudoJet_reset_momentum, METH_VARARGS, "\n"
		"reset_momentum(PseudoJet self, double px, double py, double pz, double E)\n"
		"reset_momentum(PseudoJet self, PseudoJet pj)\n"
		""},
	 { "PseudoJet_reset_momentum_PtYPhiM", (PyCFunction)(void(*)(void))_wrap_PseudoJet_reset_momentum_PtYPhiM, METH_VARARGS|METH_KEYWORDS, "reset_momentum_PtYPhiM(PseudoJet self, double pt, double y, double phi, double m=0.0)"},
	 { "PseudoJet_set_cached_rap_phi", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_cached_rap_phi, METH_VARARGS|METH_KEYWORDS, "set_cached_rap_phi(PseudoJet self, double rap, double phi)"},
	 { "PseudoJet_user_index", _wrap_PseudoJet_user_index, METH_O, "user_index(PseudoJet self) -> int"},
	 { "PseudoJet_set_user_index", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_user_index, METH_VARARGS|METH_KEYWORDS, "set_user_index(PseudoJet self, int const index)"},
	 { "PseudoJet_set_user_info", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_user_info, METH_VARARGS|METH_KEYWORDS, "set_user_info(PseudoJet self, fastjet::PseudoJet::UserInfoBase * user_info_in)"},
	 { "PseudoJet_has_user_info", _wrap_PseudoJet_has_user_info, METH_O, "has_user_info(PseudoJet self) -> bool"},
	 { "PseudoJet_user_info_ptr", _wrap_PseudoJet_user_info_ptr, METH_O, "user_info_ptr(PseudoJet self) -> fastjet::PseudoJet::UserInfoBase const *"},
	 { "PseudoJet_user_info_shared_ptr", _wrap_PseudoJet_user_info_shared_ptr, METH_VARARGS, "\n"
		"user_info_shared_ptr(PseudoJet self) -> fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > const\n"
		"user_info_shared_ptr(PseudoJet self) -> fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > &\n"
		""},
	 { "PseudoJet_description", _wrap_PseudoJet_description, METH_O, "description(PseudoJet self) -> std::string"},
	 { "PseudoJet_has_associated_cluster_sequence", _wrap_PseudoJet_has_associated_cluster_sequence, METH_O, "has_associated_cluster_sequence(PseudoJet self) -> bool"},
	 { "PseudoJet_has_associated_cs", _wrap_PseudoJet_has_associated_cs, METH_O, "has_associated_cs(PseudoJet self) -> bool"},
	 { "PseudoJet_has_valid_cluster_sequence", _wrap_PseudoJet_has_valid_cluster_sequence, METH_O, "has_valid_cluster_sequence(PseudoJet self) -> bool"},
	 { "PseudoJet_has_valid_cs", _wrap_PseudoJet_has_valid_cs, METH_O, "has_valid_cs(PseudoJet self) -> bool"},
	 { "PseudoJet_associated_cluster_sequence", _wrap_PseudoJet_associated_cluster_sequence, METH_O, "associated_cluster_sequence(PseudoJet self) -> ClusterSequence"},
	 { "PseudoJet_associated_cs", _wrap_PseudoJet_associated_cs, METH_O, "associated_cs(PseudoJet self) -> ClusterSequence"},
	 { "PseudoJet_validated_cluster_sequence", _wrap_PseudoJet_validated_cluster_sequence, METH_O, "validated_cluster_sequence(PseudoJet self) -> ClusterSequence"},
	 { "PseudoJet_validated_cs", _wrap_PseudoJet_validated_cs, METH_O, "validated_cs(PseudoJet self) -> ClusterSequence"},
	 { "PseudoJet_validated_cluster_sequence_area_base", _wrap_PseudoJet_validated_cluster_sequence_area_base, METH_O, "validated_cluster_sequence_area_base(PseudoJet self) -> fastjet::ClusterSequenceAreaBase const *"},
	 { "PseudoJet_validated_csab", _wrap_PseudoJet_validated_csab, METH_O, "validated_csab(PseudoJet self) -> fastjet::ClusterSequenceAreaBase const *"},
	 { "PseudoJet_set_structure_shared_ptr", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_structure_shared_ptr, METH_VARARGS|METH_KEYWORDS, "set_structure_shared_ptr(PseudoJet self, fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const & structure)"},
	 { "PseudoJet_has_structure", _wrap_PseudoJet_has_structure, METH_O, "has_structure(PseudoJet self) -> bool"},
	 { "PseudoJet_structure_ptr", _wrap_PseudoJet_structure_ptr, METH_O, "structure_ptr(PseudoJet self) -> PseudoJetStructureBase"},
	 { "PseudoJet_structure_non_const_ptr", _wrap_PseudoJet_structure_non_const_ptr, METH_O, "structure_non_const_ptr(PseudoJet self) -> PseudoJetStructureBase"},
	 { "PseudoJet_validated_structure_ptr", _wrap_PseudoJet_validated_structure_ptr, METH_O, "validated_structure_ptr(PseudoJet self) -> PseudoJetStructureBase"},
	 { "PseudoJet_structure_shared_ptr", _wrap_PseudoJet_structure_shared_ptr, METH_O, "structure_shared_ptr(PseudoJet self) -> fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &"},
	 { "PseudoJet_has_partner", (PyCFunction)(void(*)(void))_wrap_PseudoJet_has_partner, METH_VARARGS|METH_KEYWORDS, "has_partner(PseudoJet self, PseudoJet partner) -> bool"},
	 { "PseudoJet_has_child", (PyCFunction)(void(*)(void))_wrap_PseudoJet_has_child, METH_VARARGS|METH_KEYWORDS, "has_child(PseudoJet self, PseudoJet child) -> bool"},
	 { "PseudoJet_has_parents", (PyCFunction)(void(*)(void))_wrap_PseudoJet_has_parents, METH_VARARGS|METH_KEYWORDS, "has_parents(PseudoJet self, PseudoJet parent1, PseudoJet parent2) -> bool"},
	 { "PseudoJet_contains", (PyCFunction)(void(*)(void))_wrap_PseudoJet_contains, METH_VARARGS|METH_KEYWORDS, "contains(PseudoJet self, PseudoJet constituent) -> bool"},
	 { "PseudoJet_is_inside", (PyCFunction)(void(*)(void))_wrap_PseudoJet_is_inside, METH_VARARGS|METH_KEYWORDS, "is_inside(PseudoJet self, PseudoJet jet) -> bool"},
	 { "PseudoJet_has_constituents", _wrap_PseudoJet_has_constituents, METH_O, "has_constituents(PseudoJet self) -> bool"},
	 { "PseudoJet_constituents", _wrap_PseudoJet_constituents, METH_O, "constituents(PseudoJet self) -> vectorPseudoJet"},
	 { "PseudoJet_has_exclusive_subjets", _wrap_PseudoJet_has_exclusive_subjets, METH_O, "has_exclusive_subjets(PseudoJet self) -> bool"},
	 { "PseudoJet_n_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_PseudoJet_n_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "n_exclusive_subjets(PseudoJet self, double const dcut) -> int"},
	 { "PseudoJet_exclusive_subjets", _wrap_PseudoJet_exclusive_subjets, METH_VARARGS, "\n"
		"exclusive_subjets(PseudoJet self, double const dcut) -> vectorPseudoJet\n"
		"exclusive_subjets(PseudoJet self, int nsub) -> vectorPseudoJet\n"
		""},
	 { "PseudoJet_exclusive_subjets_up_to", (PyCFunction)(void(*)(void))_wrap_PseudoJet_exclusive_subjets_up_to, METH_VARARGS|METH_KEYWORDS, "exclusive_subjets_up_to(PseudoJet self, int nsub) -> vectorPseudoJet"},
	 { "PseudoJet_exclusive_subdmerge", (PyCFunction)(void(*)(void))_wrap_PseudoJet_exclusive_subdmerge, METH_VARARGS|METH_KEYWORDS, "exclusive_subdmerge(PseudoJet self, int nsub) -> double"},
	 { "PseudoJet_exclusive_subdmerge_max", (PyCFunction)(void(*)(void))_wrap_PseudoJet_exclusive_subdmerge_max, METH_VARARGS|METH_KEYWORDS, "exclusive_subdmerge_max(PseudoJet self, int nsub) -> double"},
	 { "PseudoJet_has_pieces", _wrap_PseudoJet_has_pieces, METH_O, "has_pieces(PseudoJet self) -> bool"},
	 { "PseudoJet_pieces", _wrap_PseudoJet_pieces, METH_O, "pieces(PseudoJet self) -> vectorPseudoJet"},
	 { "PseudoJet_has_area", _wrap_PseudoJet_has_area, METH_O, "has_area(PseudoJet self) -> bool"},
	 { "PseudoJet_area", _wrap_PseudoJet_area, METH_O, "area(PseudoJet self) -> double"},
	 { "PseudoJet_area_error", _wrap_PseudoJet_area_error, METH_O, "area_error(PseudoJet self) -> double"},
	 { "PseudoJet_area_4vector", _wrap_PseudoJet_area_4vector, METH_O, "area_4vector(PseudoJet self) -> PseudoJet"},
	 { "PseudoJet_is_pure_ghost", _wrap_PseudoJet_is_pure_ghost, METH_O, "is_pure_ghost(PseudoJet self) -> bool"},
	 { "PseudoJet_cluster_hist_index", _wrap_PseudoJet_cluster_hist_index, METH_O, "cluster_hist_index(PseudoJet self) -> int"},
	 { "PseudoJet_set_cluster_hist_index", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_cluster_hist_index, METH_VARARGS|METH_KEYWORDS, "set_cluster_hist_index(PseudoJet self, int const index)"},
	 { "PseudoJet_cluster_sequence_history_index", _wrap_PseudoJet_cluster_sequence_history_index, METH_O, "cluster_sequence_history_index(PseudoJet self) -> int"},
	 { "PseudoJet_set_cluster_sequence_history_index", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_cluster_sequence_history_index, METH_VARARGS|METH_KEYWORDS, "set_cluster_sequence_history_index(PseudoJet self, int const index)"},
	 { "PseudoJet___repr__", _wrap_PseudoJet___repr__, METH_O, "__repr__(PseudoJet self) -> std::string"},
	 { "PseudoJet_set_python_info", (PyCFunction)(void(*)(void))_wrap_PseudoJet_set_python_info, METH_VARARGS|METH_KEYWORDS, "set_python_info(PseudoJet self, PyObject * pyobj)"},
	 { "PseudoJet_python_info", _wrap_PseudoJet_python_info, METH_O, "python_info(PseudoJet self) -> PyObject *"},
	 { "PseudoJet___add__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___add__, METH_VARARGS|METH_KEYWORDS, "__add__(PseudoJet self, PseudoJet p) -> PseudoJet"},
	 { "PseudoJet___sub__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___sub__, METH_VARARGS|METH_KEYWORDS, "__sub__(PseudoJet self, PseudoJet p) -> PseudoJet"},
	 { "PseudoJet___mul__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___mul__, METH_VARARGS|METH_KEYWORDS, "__mul__(PseudoJet self, double x) -> PseudoJet"},
	 { "PseudoJet___rmul__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___rmul__, METH_VARARGS|METH_KEYWORDS, "__rmul__(PseudoJet self, double x) -> PseudoJet"},
	 { "PseudoJet___div__", (PyCFunction)(void(*)(void))_wrap_PseudoJet___div__, METH_VARARGS|METH_KEYWORDS, "__div__(PseudoJet self, double x) -> PseudoJet"},
	 { "PseudoJet___eq__", _wrap_PseudoJet___eq__, METH_VARARGS, "\n"
		"__eq__(PseudoJet self, PseudoJet p) -> bool\n"
		"__eq__(PseudoJet self, double x) -> bool\n"
		""},
	 { "PseudoJet___ne__", _wrap_PseudoJet___ne__, METH_VARARGS, "\n"
		"__ne__(PseudoJet self, PseudoJet p) -> bool\n"
		"__ne__(PseudoJet self, double x) -> bool\n"
		""},
	 { "PseudoJet_swigregister", PseudoJet_swigregister, METH_O, NULL},
	 { "PseudoJet_swiginit", PseudoJet_swiginit, METH_VARARGS, NULL},
	 { "dot_product", (PyCFunction)(void(*)(void))_wrap_dot_product, METH_VARARGS|METH_KEYWORDS, "dot_product(PseudoJet a, PseudoJet b) -> double"},
	 { "cos_theta", (PyCFunction)(void(*)(void))_wrap_cos_theta, METH_VARARGS|METH_KEYWORDS, "cos_theta(PseudoJet a, PseudoJet b) -> double"},
	 { "theta", (PyCFunction)(void(*)(void))_wrap_theta, METH_VARARGS|METH_KEYWORDS, "theta(PseudoJet a, PseudoJet b) -> double"},
	 { "have_same_momentum", (PyCFunction)(void(*)(void))_wrap_have_same_momentum, METH_VARARGS|METH_KEYWORDS, "have_same_momentum(PseudoJet arg1, PseudoJet arg2) -> bool"},
	 { "PtYPhiM", (PyCFunction)(void(*)(void))_wrap_PtYPhiM, METH_VARARGS|METH_KEYWORDS, "PtYPhiM(double pt, double y, double phi, double m=0.0) -> PseudoJet"},
	 { "sorted_by_pt", (PyCFunction)(void(*)(void))_wrap_sorted_by_pt, METH_VARARGS|METH_KEYWORDS, "sorted_by_pt(vectorPseudoJet jets) -> vectorPseudoJet"},
	 { "sorted_by_rapidity", (PyCFunction)(void(*)(void))_wrap_sorted_by_rapidity, METH_VARARGS|METH_KEYWORDS, "sorted_by_rapidity(vectorPseudoJet jets) -> vectorPseudoJet"},
	 { "sorted_by_E", (PyCFunction)(void(*)(void))_wrap_sorted_by_E, METH_VARARGS|METH_KEYWORDS, "sorted_by_E(vectorPseudoJet jets) -> vectorPseudoJet"},
	 { "sorted_by_pz", (PyCFunction)(void(*)(void))_wrap_sorted_by_pz, METH_VARARGS|METH_KEYWORDS, "sorted_by_pz(vectorPseudoJet jets) -> vectorPseudoJet"},
	 { "sort_indices", (PyCFunction)(void(*)(void))_wrap_sort_indices, METH_VARARGS|METH_KEYWORDS, "sort_indices(std::vector< int,std::allocator< int > > & indices, std::vector< double,std::allocator< double > > const & values)"},
	 { "new_Selector", _wrap_new_Selector, METH_VARARGS, "\n"
		"Selector()\n"
		"new_Selector(fastjet::SelectorWorker * worker_in) -> Selector\n"
		""},
	 { "delete_Selector", _wrap_delete_Selector, METH_O, "delete_Selector(Selector self)"},
	 { "Selector__pass", (PyCFunction)(void(*)(void))_wrap_Selector__pass, METH_VARARGS|METH_KEYWORDS, "_pass(Selector self, PseudoJet jet) -> bool"},
	 { "Selector_count", (PyCFunction)(void(*)(void))_wrap_Selector_count, METH_VARARGS|METH_KEYWORDS, "count(Selector self, vectorPseudoJet jets) -> unsigned int"},
	 { "Selector_sum", (PyCFunction)(void(*)(void))_wrap_Selector_sum, METH_VARARGS|METH_KEYWORDS, "sum(Selector self, vectorPseudoJet jets) -> PseudoJet"},
	 { "Selector_scalar_pt_sum", (PyCFunction)(void(*)(void))_wrap_Selector_scalar_pt_sum, METH_VARARGS|METH_KEYWORDS, "scalar_pt_sum(Selector self, vectorPseudoJet jets) -> double"},
	 { "Selector_sift", (PyCFunction)(void(*)(void))_wrap_Selector_sift, METH_VARARGS|METH_KEYWORDS, "sift(Selector self, vectorPseudoJet jets, vectorPseudoJet jets_that_pass, vectorPseudoJet jets_that_fail)"},
	 { "Selector_applies_jet_by_jet", _wrap_Selector_applies_jet_by_jet, METH_O, "applies_jet_by_jet(Selector self) -> bool"},
	 { "Selector___call__", _wrap_Selector___call__, METH_VARARGS, "\n"
		"__call__(Selector self, PseudoJet jet) -> bool\n"
		"__call__(Selector self, vectorPseudoJet jets) -> vectorPseudoJet\n"
		""},
	 { "Selector_nullify_non_selected", (PyCFunction)(void(*)(void))_wrap_Selector_nullify_non_selected, METH_VARARGS|METH_KEYWORDS, "nullify_non_selected(Selector self, std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > & jets)"},
	 { "Selector_get_rapidity_extent", (PyCFunction)(void(*)(void))_wrap_Selector_get_rapidity_extent, METH_VARARGS|METH_KEYWORDS, "get_rapidity_extent(Selector self, double & rapmin, double & rapmax)"},
	 { "Selector_description", _wrap_Selector_description, METH_O, "description(Selector self) -> std::string"},
	 { "Selector_is_geometric", _wrap_Selector_is_geometric, METH_O, "is_geometric(Selector self) -> bool"},
	 { "Selector_has_finite_area", _wrap_Selector_has_finite_area, METH_O, "has_finite_area(Selector self) -> bool"},
	 { "Selector_worker", _wrap_Selector_worker, METH_O, "worker(Selector self) -> fastjet::SharedPtr< fastjet::SelectorWorker > const &"},
	 { "Selector_validated_worker", _wrap_Selector_validated_worker, METH_O, "validated_worker(Selector self) -> fastjet::SelectorWorker const *"},
	 { "Selector_takes_reference", _wrap_Selector_takes_reference, METH_O, "takes_reference(Selector self) -> bool"},
	 { "Selector_set_reference", (PyCFunction)(void(*)(void))_wrap_Selector_set_reference, METH_VARARGS|METH_KEYWORDS, "set_reference(Selector self, PseudoJet reference) -> Selector"},
	 { "Selector_area", _wrap_Selector_area, METH_VARARGS, "\n"
		"area(Selector self) -> double\n"
		"area(Selector self, double arg2) -> double\n"
		""},
	 { "Selector___iand__", (PyCFunction)(void(*)(void))_wrap_Selector___iand__, METH_VARARGS|METH_KEYWORDS, "__iand__(Selector self, Selector b) -> Selector"},
	 { "Selector___ior__", (PyCFunction)(void(*)(void))_wrap_Selector___ior__, METH_VARARGS|METH_KEYWORDS, "__ior__(Selector self, Selector b) -> Selector"},
	 { "Selector___mul__", (PyCFunction)(void(*)(void))_wrap_Selector___mul__, METH_VARARGS|METH_KEYWORDS, "__mul__(Selector self, Selector other) -> Selector"},
	 { "Selector___and__", (PyCFunction)(void(*)(void))_wrap_Selector___and__, METH_VARARGS|METH_KEYWORDS, "__and__(Selector self, Selector other) -> Selector"},
	 { "Selector___or__", (PyCFunction)(void(*)(void))_wrap_Selector___or__, METH_VARARGS|METH_KEYWORDS, "__or__(Selector self, Selector other) -> Selector"},
	 { "Selector___invert__", _wrap_Selector___invert__, METH_O, "__invert__(Selector self) -> Selector"},
	 { "Selector_swigregister", Selector_swigregister, METH_O, NULL},
	 { "Selector_swiginit", Selector_swiginit, METH_VARARGS, NULL},
	 { "SelectorIdentity", _wrap_SelectorIdentity, METH_NOARGS, "SelectorIdentity() -> Selector"},
	 { "SelectorPtMin", (PyCFunction)(void(*)(void))_wrap_SelectorPtMin, METH_VARARGS|METH_KEYWORDS, "SelectorPtMin(double ptmin) -> Selector"},
	 { "SelectorPtMax", (PyCFunction)(void(*)(void))_wrap_SelectorPtMax, METH_VARARGS|METH_KEYWORDS, "SelectorPtMax(double ptmax) -> Selector"},
	 { "SelectorPtRange", (PyCFunction)(void(*)(void))_wrap_SelectorPtRange, METH_VARARGS|METH_KEYWORDS, "SelectorPtRange(double ptmin, double ptmax) -> Selector"},
	 { "SelectorEtMin", (PyCFunction)(void(*)(void))_wrap_SelectorEtMin, METH_VARARGS|METH_KEYWORDS, "SelectorEtMin(double Etmin) -> Selector"},
	 { "SelectorEtMax", (PyCFunction)(void(*)(void))_wrap_SelectorEtMax, METH_VARARGS|METH_KEYWORDS, "SelectorEtMax(double Etmax) -> Selector"},
	 { "SelectorEtRange", (PyCFunction)(void(*)(void))_wrap_SelectorEtRange, METH_VARARGS|METH_KEYWORDS, "SelectorEtRange(double Etmin, double Etmax) -> Selector"},
	 { "SelectorEMin", (PyCFunction)(void(*)(void))_wrap_SelectorEMin, METH_VARARGS|METH_KEYWORDS, "SelectorEMin(double Emin) -> Selector"},
	 { "SelectorEMax", (PyCFunction)(void(*)(void))_wrap_SelectorEMax, METH_VARARGS|METH_KEYWORDS, "SelectorEMax(double Emax) -> Selector"},
	 { "SelectorERange", (PyCFunction)(void(*)(void))_wrap_SelectorERange, METH_VARARGS|METH_KEYWORDS, "SelectorERange(double Emin, double Emax) -> Selector"},
	 { "SelectorMassMin", (PyCFunction)(void(*)(void))_wrap_SelectorMassMin, METH_VARARGS|METH_KEYWORDS, "SelectorMassMin(double Mmin) -> Selector"},
	 { "SelectorMassMax", (PyCFunction)(void(*)(void))_wrap_SelectorMassMax, METH_VARARGS|METH_KEYWORDS, "SelectorMassMax(double Mmax) -> Selector"},
	 { "SelectorMassRange", (PyCFunction)(void(*)(void))_wrap_SelectorMassRange, METH_VARARGS|METH_KEYWORDS, "SelectorMassRange(double Mmin, double Mmax) -> Selector"},
	 { "SelectorRapMin", (PyCFunction)(void(*)(void))_wrap_SelectorRapMin, METH_VARARGS|METH_KEYWORDS, "SelectorRapMin(double rapmin) -> Selector"},
	 { "SelectorRapMax", (PyCFunction)(void(*)(void))_wrap_SelectorRapMax, METH_VARARGS|METH_KEYWORDS, "SelectorRapMax(double rapmax) -> Selector"},
	 { "SelectorRapRange", (PyCFunction)(void(*)(void))_wrap_SelectorRapRange, METH_VARARGS|METH_KEYWORDS, "SelectorRapRange(double rapmin, double rapmax) -> Selector"},
	 { "SelectorAbsRapMin", (PyCFunction)(void(*)(void))_wrap_SelectorAbsRapMin, METH_VARARGS|METH_KEYWORDS, "SelectorAbsRapMin(double absrapmin) -> Selector"},
	 { "SelectorAbsRapMax", (PyCFunction)(void(*)(void))_wrap_SelectorAbsRapMax, METH_VARARGS|METH_KEYWORDS, "SelectorAbsRapMax(double absrapmax) -> Selector"},
	 { "SelectorAbsRapRange", (PyCFunction)(void(*)(void))_wrap_SelectorAbsRapRange, METH_VARARGS|METH_KEYWORDS, "SelectorAbsRapRange(double absrapmin, double absrapmax) -> Selector"},
	 { "SelectorEtaMin", (PyCFunction)(void(*)(void))_wrap_SelectorEtaMin, METH_VARARGS|METH_KEYWORDS, "SelectorEtaMin(double etamin) -> Selector"},
	 { "SelectorEtaMax", (PyCFunction)(void(*)(void))_wrap_SelectorEtaMax, METH_VARARGS|METH_KEYWORDS, "SelectorEtaMax(double etamax) -> Selector"},
	 { "SelectorEtaRange", (PyCFunction)(void(*)(void))_wrap_SelectorEtaRange, METH_VARARGS|METH_KEYWORDS, "SelectorEtaRange(double etamin, double etamax) -> Selector"},
	 { "SelectorAbsEtaMin", (PyCFunction)(void(*)(void))_wrap_SelectorAbsEtaMin, METH_VARARGS|METH_KEYWORDS, "SelectorAbsEtaMin(double absetamin) -> Selector"},
	 { "SelectorAbsEtaMax", (PyCFunction)(void(*)(void))_wrap_SelectorAbsEtaMax, METH_VARARGS|METH_KEYWORDS, "SelectorAbsEtaMax(double absetamax) -> Selector"},
	 { "SelectorAbsEtaRange", (PyCFunction)(void(*)(void))_wrap_SelectorAbsEtaRange, METH_VARARGS|METH_KEYWORDS, "SelectorAbsEtaRange(double absetamin, double absetamax) -> Selector"},
	 { "SelectorPhiRange", (PyCFunction)(void(*)(void))_wrap_SelectorPhiRange, METH_VARARGS|METH_KEYWORDS, "SelectorPhiRange(double phimin, double phimax) -> Selector"},
	 { "SelectorRapPhiRange", (PyCFunction)(void(*)(void))_wrap_SelectorRapPhiRange, METH_VARARGS|METH_KEYWORDS, "SelectorRapPhiRange(double rapmin, double rapmax, double phimin, double phimax) -> Selector"},
	 { "SelectorNHardest", (PyCFunction)(void(*)(void))_wrap_SelectorNHardest, METH_VARARGS|METH_KEYWORDS, "SelectorNHardest(unsigned int n) -> Selector"},
	 { "SelectorCircle", (PyCFunction)(void(*)(void))_wrap_SelectorCircle, METH_VARARGS|METH_KEYWORDS, "SelectorCircle(double const radius) -> Selector"},
	 { "SelectorDoughnut", (PyCFunction)(void(*)(void))_wrap_SelectorDoughnut, METH_VARARGS|METH_KEYWORDS, "SelectorDoughnut(double const radius_in, double const radius_out) -> Selector"},
	 { "SelectorStrip", (PyCFunction)(void(*)(void))_wrap_SelectorStrip, METH_VARARGS|METH_KEYWORDS, "SelectorStrip(double const half_width) -> Selector"},
	 { "SelectorRectangle", (PyCFunction)(void(*)(void))_wrap_SelectorRectangle, METH_VARARGS|METH_KEYWORDS, "SelectorRectangle(double const half_rap_width, double const half_phi_width) -> Selector"},
	 { "SelectorPtFractionMin", (PyCFunction)(void(*)(void))_wrap_SelectorPtFractionMin, METH_VARARGS|METH_KEYWORDS, "SelectorPtFractionMin(double fraction) -> Selector"},
	 { "SelectorIsZero", _wrap_SelectorIsZero, METH_NOARGS, "SelectorIsZero() -> Selector"},
	 { "SelectorIsPureGhost", _wrap_SelectorIsPureGhost, METH_NOARGS, "SelectorIsPureGhost() -> Selector"},
	 { "fastjet_version_string", _wrap_fastjet_version_string, METH_NOARGS, "fastjet_version_string() -> std::string"},
	 { "new_JetDefinition", _wrap_new_JetDefinition, METH_VARARGS, "\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, fastjet::RecombinationScheme recomb_scheme_in=E_scheme, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, fastjet::RecombinationScheme recomb_scheme_in=E_scheme, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, double xtra_param_in, fastjet::RecombinationScheme recomb_scheme_in=E_scheme, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, fastjet::JetDefinition::Recombiner const * recombiner_in, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, fastjet::JetDefinition::Recombiner const * recombiner_in, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, double xtra_param_in, fastjet::JetDefinition::Recombiner const * recombiner_in, fastjet::Strategy strategy_in=Best)\n"
		"JetDefinition()\n"
		"JetDefinition(fastjet::JetDefinition::Plugin const * plugin_in)\n"
		"JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, fastjet::RecombinationScheme recomb_scheme_in, fastjet::Strategy strategy_in, int nparameters_in)\n"
		"new_JetDefinition(fastjet::JetAlgorithm jet_algorithm_in, double R_in, fastjet::Strategy strategy_in, fastjet::RecombinationScheme recomb_scheme_in=E_scheme, int nparameters_in=1) -> JetDefinition\n"
		""},
	 { "JetDefinition_set_recombination_scheme", (PyCFunction)(void(*)(void))_wrap_JetDefinition_set_recombination_scheme, METH_VARARGS|METH_KEYWORDS, "set_recombination_scheme(JetDefinition self, fastjet::RecombinationScheme arg2)"},
	 { "JetDefinition_set_recombiner", _wrap_JetDefinition_set_recombiner, METH_VARARGS, "\n"
		"set_recombiner(JetDefinition self, fastjet::JetDefinition::Recombiner const * recomb)\n"
		"set_recombiner(JetDefinition self, JetDefinition other_jet_def)\n"
		""},
	 { "JetDefinition_delete_recombiner_when_unused", _wrap_JetDefinition_delete_recombiner_when_unused, METH_O, "delete_recombiner_when_unused(JetDefinition self)"},
	 { "JetDefinition_plugin", _wrap_JetDefinition_plugin, METH_O, "plugin(JetDefinition self) -> fastjet::JetDefinition::Plugin const *"},
	 { "JetDefinition_delete_plugin_when_unused", _wrap_JetDefinition_delete_plugin_when_unused, METH_O, "delete_plugin_when_unused(JetDefinition self)"},
	 { "JetDefinition_jet_algorithm", _wrap_JetDefinition_jet_algorithm, METH_O, "jet_algorithm(JetDefinition self) -> fastjet::JetAlgorithm"},
	 { "JetDefinition_jet_finder", _wrap_JetDefinition_jet_finder, METH_O, "jet_finder(JetDefinition self) -> fastjet::JetAlgorithm"},
	 { "JetDefinition_R", _wrap_JetDefinition_R, METH_O, "R(JetDefinition self) -> double"},
	 { "JetDefinition_extra_param", _wrap_JetDefinition_extra_param, METH_O, "extra_param(JetDefinition self) -> double"},
	 { "JetDefinition_strategy", _wrap_JetDefinition_strategy, METH_O, "strategy(JetDefinition self) -> fastjet::Strategy"},
	 { "JetDefinition_recombination_scheme", _wrap_JetDefinition_recombination_scheme, METH_O, "recombination_scheme(JetDefinition self) -> fastjet::RecombinationScheme"},
	 { "JetDefinition_set_jet_algorithm", (PyCFunction)(void(*)(void))_wrap_JetDefinition_set_jet_algorithm, METH_VARARGS|METH_KEYWORDS, "set_jet_algorithm(JetDefinition self, fastjet::JetAlgorithm njf)"},
	 { "JetDefinition_set_jet_finder", (PyCFunction)(void(*)(void))_wrap_JetDefinition_set_jet_finder, METH_VARARGS|METH_KEYWORDS, "set_jet_finder(JetDefinition self, fastjet::JetAlgorithm njf)"},
	 { "JetDefinition_set_extra_param", (PyCFunction)(void(*)(void))_wrap_JetDefinition_set_extra_param, METH_VARARGS|METH_KEYWORDS, "set_extra_param(JetDefinition self, double xtra_param)"},
	 { "JetDefinition_recombiner", _wrap_JetDefinition_recombiner, METH_O, "recombiner(JetDefinition self) -> fastjet::JetDefinition::Recombiner const *"},
	 { "JetDefinition_has_same_recombiner", (PyCFunction)(void(*)(void))_wrap_JetDefinition_has_same_recombiner, METH_VARARGS|METH_KEYWORDS, "has_same_recombiner(JetDefinition self, JetDefinition other_jd) -> bool"},
	 { "JetDefinition_is_spherical", _wrap_JetDefinition_is_spherical, METH_O, "is_spherical(JetDefinition self) -> bool"},
	 { "JetDefinition_description", _wrap_JetDefinition_description, METH_O, "description(JetDefinition self) -> std::string"},
	 { "JetDefinition_description_no_recombiner", _wrap_JetDefinition_description_no_recombiner, METH_O, "description_no_recombiner(JetDefinition self) -> std::string"},
	 { "JetDefinition_algorithm_description", (PyCFunction)(void(*)(void))_wrap_JetDefinition_algorithm_description, METH_VARARGS|METH_KEYWORDS, "algorithm_description(fastjet::JetAlgorithm const jet_alg) -> std::string"},
	 { "JetDefinition_n_parameters_for_algorithm", (PyCFunction)(void(*)(void))_wrap_JetDefinition_n_parameters_for_algorithm, METH_VARARGS|METH_KEYWORDS, "n_parameters_for_algorithm(fastjet::JetAlgorithm const jet_alg) -> unsigned int"},
	 { "JetDefinition___call__", (PyCFunction)(void(*)(void))_wrap_JetDefinition___call__, METH_VARARGS|METH_KEYWORDS, "__call__(JetDefinition self, vectorPseudoJet particles) -> vectorPseudoJet"},
	 { "delete_JetDefinition", _wrap_delete_JetDefinition, METH_O, "delete_JetDefinition(JetDefinition self)"},
	 { "JetDefinition_swigregister", JetDefinition_swigregister, METH_O, NULL},
	 { "JetDefinition_swiginit", JetDefinition_swiginit, METH_VARARGS, NULL},
	 { "join", _wrap_join, METH_VARARGS, "\n"
		"join(vectorPseudoJet pieces) -> PseudoJet\n"
		"join(PseudoJet j1) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, PseudoJet j3) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, PseudoJet j3, PseudoJet j4) -> PseudoJet\n"
		"join(vectorPseudoJet pieces, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		"join(PseudoJet j1, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, PseudoJet j3, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		"join(PseudoJet j1, PseudoJet j2, PseudoJet j3, PseudoJet j4, fastjet::JetDefinition::Recombiner const & recombiner) -> PseudoJet\n"
		""},
	 { "new_CompositeJetStructure", _wrap_new_CompositeJetStructure, METH_VARARGS, "\n"
		"CompositeJetStructure()\n"
		"new_CompositeJetStructure(vectorPseudoJet initial_pieces, fastjet::JetDefinition::Recombiner const * recombiner=None) -> CompositeJetStructure\n"
		""},
	 { "delete_CompositeJetStructure", _wrap_delete_CompositeJetStructure, METH_O, "delete_CompositeJetStructure(CompositeJetStructure self)"},
	 { "CompositeJetStructure_description", _wrap_CompositeJetStructure_description, METH_O, "description(CompositeJetStructure self) -> std::string"},
	 { "CompositeJetStructure_has_constituents", _wrap_CompositeJetStructure_has_constituents, METH_O, "has_constituents(CompositeJetStructure self) -> bool"},
	 { "CompositeJetStructure_constituents", (PyCFunction)(void(*)(void))_wrap_CompositeJetStructure_constituents, METH_VARARGS|METH_KEYWORDS, "constituents(CompositeJetStructure self, PseudoJet jet) -> vectorPseudoJet"},
	 { "CompositeJetStructure_has_pieces", (PyCFunction)(void(*)(void))_wrap_CompositeJetStructure_has_pieces, METH_VARARGS|METH_KEYWORDS, "has_pieces(CompositeJetStructure self, PseudoJet arg2) -> bool"},
	 { "CompositeJetStructure_pieces", (PyCFunction)(void(*)(void))_wrap_CompositeJetStructure_pieces, METH_VARARGS|METH_KEYWORDS, "pieces(CompositeJetStructure self, PseudoJet jet) -> vectorPseudoJet"},
	 { "CompositeJetStructure_has_area", _wrap_CompositeJetStructure_has_area, METH_O, "has_area(CompositeJetStructure self) -> bool"},
	 { "CompositeJetStructure_area", _wrap_CompositeJetStructure_area, METH_O, "area(CompositeJetStructure self) -> double"},
	 { "CompositeJetStructure_area_error", _wrap_CompositeJetStructure_area_error, METH_O, "area_error(CompositeJetStructure self) -> double"},
	 { "CompositeJetStructure_area_4vector", _wrap_CompositeJetStructure_area_4vector, METH_O, "area_4vector(CompositeJetStructure self) -> PseudoJet"},
	 { "CompositeJetStructure_is_pure_ghost", _wrap_CompositeJetStructure_is_pure_ghost, METH_O, "is_pure_ghost(CompositeJetStructure self) -> bool"},
	 { "CompositeJetStructure_swigregister", CompositeJetStructure_swigregister, METH_O, NULL},
	 { "CompositeJetStructure_swiginit", CompositeJetStructure_swiginit, METH_VARARGS, NULL},
	 { "new_ClusterSequenceStructure", _wrap_new_ClusterSequenceStructure, METH_VARARGS, "\n"
		"ClusterSequenceStructure()\n"
		"new_ClusterSequenceStructure(ClusterSequence cs) -> ClusterSequenceStructure\n"
		""},
	 { "delete_ClusterSequenceStructure", _wrap_delete_ClusterSequenceStructure, METH_O, "delete_ClusterSequenceStructure(ClusterSequenceStructure self)"},
	 { "ClusterSequenceStructure_description", _wrap_ClusterSequenceStructure_description, METH_O, "description(ClusterSequenceStructure self) -> std::string"},
	 { "ClusterSequenceStructure_has_associated_cluster_sequence", _wrap_ClusterSequenceStructure_has_associated_cluster_sequence, METH_O, "has_associated_cluster_sequence(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_associated_cluster_sequence", _wrap_ClusterSequenceStructure_associated_cluster_sequence, METH_O, "associated_cluster_sequence(ClusterSequenceStructure self) -> ClusterSequence"},
	 { "ClusterSequenceStructure_has_valid_cluster_sequence", _wrap_ClusterSequenceStructure_has_valid_cluster_sequence, METH_O, "has_valid_cluster_sequence(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_validated_cs", _wrap_ClusterSequenceStructure_validated_cs, METH_O, "validated_cs(ClusterSequenceStructure self) -> ClusterSequence"},
	 { "ClusterSequenceStructure_validated_csab", _wrap_ClusterSequenceStructure_validated_csab, METH_O, "validated_csab(ClusterSequenceStructure self) -> fastjet::ClusterSequenceAreaBase const *"},
	 { "ClusterSequenceStructure_set_associated_cs", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_set_associated_cs, METH_VARARGS|METH_KEYWORDS, "set_associated_cs(ClusterSequenceStructure self, ClusterSequence new_cs)"},
	 { "ClusterSequenceStructure_has_partner", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_has_partner, METH_VARARGS|METH_KEYWORDS, "has_partner(ClusterSequenceStructure self, PseudoJet reference, PseudoJet partner) -> bool"},
	 { "ClusterSequenceStructure_has_child", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_has_child, METH_VARARGS|METH_KEYWORDS, "has_child(ClusterSequenceStructure self, PseudoJet reference, PseudoJet child) -> bool"},
	 { "ClusterSequenceStructure_has_parents", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_has_parents, METH_VARARGS|METH_KEYWORDS, "has_parents(ClusterSequenceStructure self, PseudoJet reference, PseudoJet parent1, PseudoJet parent2) -> bool"},
	 { "ClusterSequenceStructure_object_in_jet", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_object_in_jet, METH_VARARGS|METH_KEYWORDS, "object_in_jet(ClusterSequenceStructure self, PseudoJet reference, PseudoJet jet) -> bool"},
	 { "ClusterSequenceStructure_has_constituents", _wrap_ClusterSequenceStructure_has_constituents, METH_O, "has_constituents(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_constituents", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_constituents, METH_VARARGS|METH_KEYWORDS, "constituents(ClusterSequenceStructure self, PseudoJet reference) -> vectorPseudoJet"},
	 { "ClusterSequenceStructure_has_exclusive_subjets", _wrap_ClusterSequenceStructure_has_exclusive_subjets, METH_O, "has_exclusive_subjets(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "exclusive_subjets(ClusterSequenceStructure self, PseudoJet reference, double const & dcut) -> vectorPseudoJet"},
	 { "ClusterSequenceStructure_n_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_n_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "n_exclusive_subjets(ClusterSequenceStructure self, PseudoJet reference, double const & dcut) -> int"},
	 { "ClusterSequenceStructure_exclusive_subjets_up_to", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_exclusive_subjets_up_to, METH_VARARGS|METH_KEYWORDS, "exclusive_subjets_up_to(ClusterSequenceStructure self, PseudoJet reference, int nsub) -> vectorPseudoJet"},
	 { "ClusterSequenceStructure_exclusive_subdmerge", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_exclusive_subdmerge, METH_VARARGS|METH_KEYWORDS, "exclusive_subdmerge(ClusterSequenceStructure self, PseudoJet reference, int nsub) -> double"},
	 { "ClusterSequenceStructure_exclusive_subdmerge_max", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_exclusive_subdmerge_max, METH_VARARGS|METH_KEYWORDS, "exclusive_subdmerge_max(ClusterSequenceStructure self, PseudoJet reference, int nsub) -> double"},
	 { "ClusterSequenceStructure_has_pieces", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_has_pieces, METH_VARARGS|METH_KEYWORDS, "has_pieces(ClusterSequenceStructure self, PseudoJet reference) -> bool"},
	 { "ClusterSequenceStructure_pieces", (PyCFunction)(void(*)(void))_wrap_ClusterSequenceStructure_pieces, METH_VARARGS|METH_KEYWORDS, "pieces(ClusterSequenceStructure self, PseudoJet reference) -> vectorPseudoJet"},
	 { "ClusterSequenceStructure_has_area", _wrap_ClusterSequenceStructure_has_area, METH_O, "has_area(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_area", _wrap_ClusterSequenceStructure_area, METH_O, "area(ClusterSequenceStructure self) -> double"},
	 { "ClusterSequenceStructure_area_error", _wrap_ClusterSequenceStructure_area_error, METH_O, "area_error(ClusterSequenceStructure self) -> double"},
	 { "ClusterSequenceStructure_area_4vector", _wrap_ClusterSequenceStructure_area_4vector, METH_O, "area_4vector(ClusterSequenceStructure self) -> PseudoJet"},
	 { "ClusterSequenceStructure_is_pure_ghost", _wrap_ClusterSequenceStructure_is_pure_ghost, METH_O, "is_pure_ghost(ClusterSequenceStructure self) -> bool"},
	 { "ClusterSequenceStructure_swigregister", ClusterSequenceStructure_swigregister, METH_O, NULL},
	 { "ClusterSequenceStructure_swiginit", ClusterSequenceStructure_swiginit, METH_VARARGS, NULL},
	 { "new_ClusterSequence", (PyCFunction)(void(*)(void))_wrap_new_ClusterSequence, METH_VARARGS|METH_KEYWORDS, "new_ClusterSequence(vectorPseudoJet pseudojets, JetDefinition jet_def, bool const & writeout_combinations=False) -> ClusterSequence"},
	 { "delete_ClusterSequence", _wrap_delete_ClusterSequence, METH_O, "delete_ClusterSequence(ClusterSequence self)"},
	 { "ClusterSequence_inclusive_jets", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_inclusive_jets, METH_VARARGS|METH_KEYWORDS, "inclusive_jets(ClusterSequence self, double const ptmin=0.0) -> vectorPseudoJet"},
	 { "ClusterSequence_n_exclusive_jets", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_n_exclusive_jets, METH_VARARGS|METH_KEYWORDS, "n_exclusive_jets(ClusterSequence self, double const dcut) -> int"},
	 { "ClusterSequence_exclusive_jets", _wrap_ClusterSequence_exclusive_jets, METH_VARARGS, "\n"
		"exclusive_jets(ClusterSequence self, double const dcut) -> vectorPseudoJet\n"
		"exclusive_jets(ClusterSequence self, int const njets) -> vectorPseudoJet\n"
		""},
	 { "ClusterSequence_exclusive_jets_up_to", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_jets_up_to, METH_VARARGS|METH_KEYWORDS, "exclusive_jets_up_to(ClusterSequence self, int const njets) -> vectorPseudoJet"},
	 { "ClusterSequence_exclusive_dmerge", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_dmerge, METH_VARARGS|METH_KEYWORDS, "exclusive_dmerge(ClusterSequence self, int const njets) -> double"},
	 { "ClusterSequence_exclusive_dmerge_max", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_dmerge_max, METH_VARARGS|METH_KEYWORDS, "exclusive_dmerge_max(ClusterSequence self, int const njets) -> double"},
	 { "ClusterSequence_exclusive_ymerge", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_ymerge, METH_VARARGS|METH_KEYWORDS, "exclusive_ymerge(ClusterSequence self, int njets) -> double"},
	 { "ClusterSequence_exclusive_ymerge_max", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_ymerge_max, METH_VARARGS|METH_KEYWORDS, "exclusive_ymerge_max(ClusterSequence self, int njets) -> double"},
	 { "ClusterSequence_n_exclusive_jets_ycut", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_n_exclusive_jets_ycut, METH_VARARGS|METH_KEYWORDS, "n_exclusive_jets_ycut(ClusterSequence self, double ycut) -> int"},
	 { "ClusterSequence_exclusive_jets_ycut", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_jets_ycut, METH_VARARGS|METH_KEYWORDS, "exclusive_jets_ycut(ClusterSequence self, double ycut) -> vectorPseudoJet"},
	 { "ClusterSequence_n_exclusive_subjets", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_n_exclusive_subjets, METH_VARARGS|METH_KEYWORDS, "n_exclusive_subjets(ClusterSequence self, PseudoJet jet, double const dcut) -> int"},
	 { "ClusterSequence_exclusive_subjets", _wrap_ClusterSequence_exclusive_subjets, METH_VARARGS, "\n"
		"exclusive_subjets(ClusterSequence self, PseudoJet jet, double const dcut) -> vectorPseudoJet\n"
		"exclusive_subjets(ClusterSequence self, PseudoJet jet, int nsub) -> vectorPseudoJet\n"
		""},
	 { "ClusterSequence_exclusive_subjets_up_to", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_subjets_up_to, METH_VARARGS|METH_KEYWORDS, "exclusive_subjets_up_to(ClusterSequence self, PseudoJet jet, int nsub) -> vectorPseudoJet"},
	 { "ClusterSequence_exclusive_subdmerge", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_subdmerge, METH_VARARGS|METH_KEYWORDS, "exclusive_subdmerge(ClusterSequence self, PseudoJet jet, int nsub) -> double"},
	 { "ClusterSequence_exclusive_subdmerge_max", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_exclusive_subdmerge_max, METH_VARARGS|METH_KEYWORDS, "exclusive_subdmerge_max(ClusterSequence self, PseudoJet jet, int nsub) -> double"},
	 { "ClusterSequence_Q", _wrap_ClusterSequence_Q, METH_O, "Q(ClusterSequence self) -> double"},
	 { "ClusterSequence_Q2", _wrap_ClusterSequence_Q2, METH_O, "Q2(ClusterSequence self) -> double"},
	 { "ClusterSequence_object_in_jet", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_object_in_jet, METH_VARARGS|METH_KEYWORDS, "object_in_jet(ClusterSequence self, PseudoJet object, PseudoJet jet) -> bool"},
	 { "ClusterSequence_has_parents", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_has_parents, METH_VARARGS|METH_KEYWORDS, "has_parents(ClusterSequence self, PseudoJet jet, PseudoJet parent1, PseudoJet parent2) -> bool"},
	 { "ClusterSequence_has_child", _wrap_ClusterSequence_has_child, METH_VARARGS, "\n"
		"has_child(ClusterSequence self, PseudoJet jet, PseudoJet child) -> bool\n"
		"has_child(ClusterSequence self, PseudoJet jet, fastjet::PseudoJet const *& childp) -> bool\n"
		""},
	 { "ClusterSequence_has_partner", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_has_partner, METH_VARARGS|METH_KEYWORDS, "has_partner(ClusterSequence self, PseudoJet jet, PseudoJet partner) -> bool"},
	 { "ClusterSequence_constituents", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_constituents, METH_VARARGS|METH_KEYWORDS, "constituents(ClusterSequence self, PseudoJet jet) -> vectorPseudoJet"},
	 { "ClusterSequence_print_jets_for_root", _wrap_ClusterSequence_print_jets_for_root, METH_VARARGS, "\n"
		"print_jets_for_root(ClusterSequence self, vectorPseudoJet jets, std::ostream & ostr=std::cout)\n"
		"print_jets_for_root(ClusterSequence self, vectorPseudoJet jets, std::string const & filename, std::string const & comment=\"\")\n"
		""},
	 { "ClusterSequence_add_constituents", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_add_constituents, METH_VARARGS|METH_KEYWORDS, "add_constituents(ClusterSequence self, PseudoJet jet, vectorPseudoJet subjet_vector)"},
	 { "ClusterSequence_strategy_used", _wrap_ClusterSequence_strategy_used, METH_O, "strategy_used(ClusterSequence self) -> fastjet::Strategy"},
	 { "ClusterSequence_strategy_string", _wrap_ClusterSequence_strategy_string, METH_VARARGS, "\n"
		"strategy_string(ClusterSequence self) -> std::string\n"
		"strategy_string(ClusterSequence self, fastjet::Strategy strategy_in) -> std::string\n"
		""},
	 { "ClusterSequence_jet_def", _wrap_ClusterSequence_jet_def, METH_O, "jet_def(ClusterSequence self) -> JetDefinition"},
	 { "ClusterSequence_delete_self_when_unused", _wrap_ClusterSequence_delete_self_when_unused, METH_O, "delete_self_when_unused(ClusterSequence self)"},
	 { "ClusterSequence_will_delete_self_when_unused", _wrap_ClusterSequence_will_delete_self_when_unused, METH_O, "will_delete_self_when_unused(ClusterSequence self) -> bool"},
	 { "ClusterSequence_signal_imminent_self_deletion", _wrap_ClusterSequence_signal_imminent_self_deletion, METH_O, "signal_imminent_self_deletion(ClusterSequence self)"},
	 { "ClusterSequence_jet_scale_for_algorithm", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_jet_scale_for_algorithm, METH_VARARGS|METH_KEYWORDS, "jet_scale_for_algorithm(ClusterSequence self, PseudoJet jet) -> double"},
	 { "ClusterSequence_plugin_record_ij_recombination", _wrap_ClusterSequence_plugin_record_ij_recombination, METH_VARARGS, "\n"
		"plugin_record_ij_recombination(ClusterSequence self, int jet_i, int jet_j, double dij, int & newjet_k)\n"
		"plugin_record_ij_recombination(ClusterSequence self, int jet_i, int jet_j, double dij, PseudoJet newjet, int & newjet_k)\n"
		""},
	 { "ClusterSequence_plugin_record_iB_recombination", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_plugin_record_iB_recombination, METH_VARARGS|METH_KEYWORDS, "plugin_record_iB_recombination(ClusterSequence self, int jet_i, double diB)"},
	 { "ClusterSequence_plugin_associate_extras", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_plugin_associate_extras, METH_VARARGS|METH_KEYWORDS, "plugin_associate_extras(ClusterSequence self, fastjet::ClusterSequence::Extras * extras_in)"},
	 { "ClusterSequence_plugin_activated", _wrap_ClusterSequence_plugin_activated, METH_O, "plugin_activated(ClusterSequence self) -> bool"},
	 { "ClusterSequence_extras", _wrap_ClusterSequence_extras, METH_O, "extras(ClusterSequence self) -> fastjet::ClusterSequence::Extras const *"},
	 { "ClusterSequence_jets", _wrap_ClusterSequence_jets, METH_O, "jets(ClusterSequence self) -> vectorPseudoJet"},
	 { "ClusterSequence_history", _wrap_ClusterSequence_history, METH_O, "history(ClusterSequence self) -> std::vector< fastjet::ClusterSequence::history_element,std::allocator< fastjet::ClusterSequence::history_element > > const &"},
	 { "ClusterSequence_n_particles", _wrap_ClusterSequence_n_particles, METH_O, "n_particles(ClusterSequence self) -> unsigned int"},
	 { "ClusterSequence_particle_jet_indices", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_particle_jet_indices, METH_VARARGS|METH_KEYWORDS, "particle_jet_indices(ClusterSequence self, vectorPseudoJet arg2) -> std::vector< int,std::allocator< int > >"},
	 { "ClusterSequence_unique_history_order", _wrap_ClusterSequence_unique_history_order, METH_O, "unique_history_order(ClusterSequence self) -> std::vector< int,std::allocator< int > >"},
	 { "ClusterSequence_unclustered_particles", _wrap_ClusterSequence_unclustered_particles, METH_O, "unclustered_particles(ClusterSequence self) -> vectorPseudoJet"},
	 { "ClusterSequence_childless_pseudojets", _wrap_ClusterSequence_childless_pseudojets, METH_O, "childless_pseudojets(ClusterSequence self) -> vectorPseudoJet"},
	 { "ClusterSequence_contains", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_contains, METH_VARARGS|METH_KEYWORDS, "contains(ClusterSequence self, PseudoJet object) -> bool"},
	 { "ClusterSequence_transfer_from_sequence", (PyCFunction)(void(*)(void))_wrap_ClusterSequence_transfer_from_sequence, METH_VARARGS|METH_KEYWORDS, "transfer_from_sequence(ClusterSequence self, ClusterSequence from_seq, fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const * action_on_jets=None)"},
	 { "ClusterSequence_structure_shared_ptr", _wrap_ClusterSequence_structure_shared_ptr, METH_O, "structure_shared_ptr(ClusterSequence self) -> fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &"},
	 { "ClusterSequence_swigregister", ClusterSequence_swigregister, METH_O, NULL},
	 { "ClusterSequence_swiginit", ClusterSequence_swiginit, METH_VARARGS, NULL},
	 { "JetDefinition0Param", (PyCFunction)(void(*)(void))_wrap_JetDefinition0Param, METH_VARARGS|METH_KEYWORDS, "JetDefinition0Param(fastjet::JetAlgorithm jet_algorithm, fastjet::RecombinationScheme recomb_scheme=E_scheme, fastjet::Strategy strategy=Best) -> JetDefinition"},
	 { "JetDefinition1Param", (PyCFunction)(void(*)(void))_wrap_JetDefinition1Param, METH_VARARGS|METH_KEYWORDS, "JetDefinition1Param(fastjet::JetAlgorithm jet_algorithm, double R_in, fastjet::RecombinationScheme recomb_scheme=E_scheme, fastjet::Strategy strategy=Best) -> JetDefinition"},
	 { "JetDefinition2Param", (PyCFunction)(void(*)(void))_wrap_JetDefinition2Param, METH_VARARGS|METH_KEYWORDS, "JetDefinition2Param(fastjet::JetAlgorithm jet_algorithm, double R_in, double xtra_param, fastjet::RecombinationScheme recomb_scheme=E_scheme, fastjet::Strategy strategy=Best) -> JetDefinition"},
	 { "set_pseudojet_format", (PyCFunction)(void(*)(void))_wrap_set_pseudojet_format, METH_VARARGS|METH_KEYWORDS, "set_pseudojet_format(fastjet::PseudoJetRepresentation rep)"},
	 { "ptyphim_array_to_pseudojets", (PyCFunction)(void(*)(void))_wrap_ptyphim_array_to_pseudojets, METH_VARARGS|METH_KEYWORDS, "ptyphim_array_to_pseudojets(double * particles) -> vectorPseudoJet"},
	 { "epxpypz_array_to_pseudojets", (PyCFunction)(void(*)(void))_wrap_epxpypz_array_to_pseudojets, METH_VARARGS|METH_KEYWORDS, "epxpypz_array_to_pseudojets(double * particles) -> vectorPseudoJet"},
	 { "array_to_pseudojets", (PyCFunction)(void(*)(void))_wrap_array_to_pseudojets, METH_VARARGS|METH_KEYWORDS, "array_to_pseudojets(double * particles, fastjet::PseudoJetRepresentation pjrep=ptyphim) -> vectorPseudoJet"},
	 { "pseudojets_to_epxpypz_array", (PyCFunction)(void(*)(void))_wrap_pseudojets_to_epxpypz_array, METH_VARARGS|METH_KEYWORDS, "pseudojets_to_epxpypz_array(vectorPseudoJet pjs)"},
	 { "pseudojets_to_ptyphim_array", (PyCFunction)(void(*)(void))_wrap_pseudojets_to_ptyphim_array, METH_VARARGS|METH_KEYWORDS, "pseudojets_to_ptyphim_array(vectorPseudoJet pjs, bool mass=True)"},
	 { "pseudojets_to_array", (PyCFunction)(void(*)(void))_wrap_pseudojets_to_array, METH_VARARGS|METH_KEYWORDS, "pseudojets_to_array(vectorPseudoJet pjs, fastjet::PseudoJetRepresentation pjrep=ptyphim)"},
	 { "user_indices", (PyCFunction)(void(*)(void))_wrap_user_indices, METH_VARARGS|METH_KEYWORDS, "user_indices(vectorPseudoJet pjs)"},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_fastjet__CompositeJetStructureTo_p_fastjet__PseudoJetStructureBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::PseudoJetStructureBase *)  ((fastjet::CompositeJetStructure *) x));
}
static void *_p_fastjet__ClusterSequenceStructureTo_p_fastjet__PseudoJetStructureBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::PseudoJetStructureBase *)  ((fastjet::ClusterSequenceStructure *) x));
}
static void *_p_fastjet__InternalErrorTo_p_fastjet__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Error *)  ((fastjet::InternalError *) x));
}
static swig_type_info _swigt__p_StructureType = {"_p_StructureType", "StructureType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequence = {"_p_fastjet__ClusterSequence", "fastjet::ClusterSequence *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequenceAreaBase = {"_p_fastjet__ClusterSequenceAreaBase", "fastjet::ClusterSequenceAreaBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequenceStructure = {"_p_fastjet__ClusterSequenceStructure", "fastjet::ClusterSequenceStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequence__Extras = {"_p_fastjet__ClusterSequence__Extras", "fastjet::ClusterSequence::Extras *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__CompositeJetStructure = {"_p_fastjet__CompositeJetStructure", "fastjet::CompositeJetStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Error = {"_p_fastjet__Error", "fastjet::Error *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__InternalError = {"_p_fastjet__InternalError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t = {"_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t", "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JetAlgorithm = {"_p_fastjet__JetAlgorithm", "enum fastjet::JetAlgorithm *|fastjet::JetFinder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JetDefinition = {"_p_fastjet__JetDefinition", "fastjet::JetDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JetDefinition__Plugin = {"_p_fastjet__JetDefinition__Plugin", "fastjet::JetDefinition::Plugin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JetDefinition__Recombiner = {"_p_fastjet__JetDefinition__Recombiner", "fastjet::JetDefinition::Recombiner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__PseudoJet = {"_p_fastjet__PseudoJet", "std::vector< fastjet::PseudoJet >::value_type *|fastjet::PseudoJet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__PseudoJetStructureBase = {"_p_fastjet__PseudoJetStructureBase", "fastjet::PseudoJetStructureBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__PseudoJet__UserInfoBase = {"_p_fastjet__PseudoJet__UserInfoBase", "fastjet::PseudoJet::UserInfoBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Selector = {"_p_fastjet__Selector", "fastjet::Selector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__SelectorWorker = {"_p_fastjet__SelectorWorker", "fastjet::SelectorWorker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t = {"_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t", "fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t = {"_p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t", "fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t = {"_p_fastjet__SharedPtrT_fastjet__SelectorWorker_t", "fastjet::SharedPtr< fastjet::SelectorWorker > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__integral_typeT_bool_false_t = {"_p_fastjet__integral_typeT_bool_false_t", "fastjet::false_type *|fastjet::integral_type< bool,false > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__integral_typeT_bool_true_t = {"_p_fastjet__integral_typeT_bool_true_t", "fastjet::true_type *|fastjet::integral_type< bool,true > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_fastjet__PseudoJet = {"_p_p_fastjet__PseudoJet", "fastjet::PseudoJet **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_fastjet__PseudoJet_t = {"_p_std__allocatorT_fastjet__PseudoJet_t", "std::allocator< fastjet::PseudoJet > *|std::vector< fastjet::PseudoJet >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__valarrayT_double_t = {"_p_std__valarrayT_double_t", "std::valarray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t = {"_p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t", "std::vector< fastjet::ClusterSequence::history_element,std::allocator< fastjet::ClusterSequence::history_element > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t = {"_p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t", "std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t = {"_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t", "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *|std::vector< fastjet::PseudoJet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_StructureType,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_fastjet__ClusterSequence,
  &_swigt__p_fastjet__ClusterSequenceAreaBase,
  &_swigt__p_fastjet__ClusterSequenceStructure,
  &_swigt__p_fastjet__ClusterSequence__Extras,
  &_swigt__p_fastjet__CompositeJetStructure,
  &_swigt__p_fastjet__Error,
  &_swigt__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t,
  &_swigt__p_fastjet__InternalError,
  &_swigt__p_fastjet__JetAlgorithm,
  &_swigt__p_fastjet__JetDefinition,
  &_swigt__p_fastjet__JetDefinition__Plugin,
  &_swigt__p_fastjet__JetDefinition__Recombiner,
  &_swigt__p_fastjet__PseudoJet,
  &_swigt__p_fastjet__PseudoJetStructureBase,
  &_swigt__p_fastjet__PseudoJet__UserInfoBase,
  &_swigt__p_fastjet__Selector,
  &_swigt__p_fastjet__SelectorWorker,
  &_swigt__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t,
  &_swigt__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t,
  &_swigt__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t,
  &_swigt__p_fastjet__integral_typeT_bool_false_t,
  &_swigt__p_fastjet__integral_typeT_bool_true_t,
  &_swigt__p_int,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_double,
  &_swigt__p_p_fastjet__PseudoJet,
  &_swigt__p_p_int,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_fastjet__PseudoJet_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ostream,
  &_swigt__p_std__valarrayT_double_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t,
  &_swigt__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t,
  &_swigt__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_StructureType[] = {  {&_swigt__p_StructureType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequence[] = {  {&_swigt__p_fastjet__ClusterSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequenceAreaBase[] = {  {&_swigt__p_fastjet__ClusterSequenceAreaBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequenceStructure[] = {  {&_swigt__p_fastjet__ClusterSequenceStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequence__Extras[] = {  {&_swigt__p_fastjet__ClusterSequence__Extras, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__CompositeJetStructure[] = {  {&_swigt__p_fastjet__CompositeJetStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__InternalError[] = {{&_swigt__p_fastjet__InternalError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Error[] = {  {&_swigt__p_fastjet__InternalError, _p_fastjet__InternalErrorTo_p_fastjet__Error, 0, 0},  {&_swigt__p_fastjet__Error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t[] = {  {&_swigt__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JetAlgorithm[] = {  {&_swigt__p_fastjet__JetAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JetDefinition[] = {  {&_swigt__p_fastjet__JetDefinition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JetDefinition__Plugin[] = {  {&_swigt__p_fastjet__JetDefinition__Plugin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JetDefinition__Recombiner[] = {  {&_swigt__p_fastjet__JetDefinition__Recombiner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__PseudoJet[] = {  {&_swigt__p_fastjet__PseudoJet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__PseudoJetStructureBase[] = {  {&_swigt__p_fastjet__PseudoJetStructureBase, 0, 0, 0},  {&_swigt__p_fastjet__CompositeJetStructure, _p_fastjet__CompositeJetStructureTo_p_fastjet__PseudoJetStructureBase, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceStructure, _p_fastjet__ClusterSequenceStructureTo_p_fastjet__PseudoJetStructureBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__PseudoJet__UserInfoBase[] = {  {&_swigt__p_fastjet__PseudoJet__UserInfoBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Selector[] = {  {&_swigt__p_fastjet__Selector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__SelectorWorker[] = {  {&_swigt__p_fastjet__SelectorWorker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t[] = {  {&_swigt__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t[] = {  {&_swigt__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t[] = {  {&_swigt__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__integral_typeT_bool_false_t[] = {  {&_swigt__p_fastjet__integral_typeT_bool_false_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__integral_typeT_bool_true_t[] = {  {&_swigt__p_fastjet__integral_typeT_bool_true_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_fastjet__PseudoJet[] = {  {&_swigt__p_p_fastjet__PseudoJet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_fastjet__PseudoJet_t[] = {  {&_swigt__p_std__allocatorT_fastjet__PseudoJet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayT_double_t[] = {  {&_swigt__p_std__valarrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t[] = {  {&_swigt__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t[] = {  {&_swigt__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t[] = {  {&_swigt__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_StructureType,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_fastjet__ClusterSequence,
  _swigc__p_fastjet__ClusterSequenceAreaBase,
  _swigc__p_fastjet__ClusterSequenceStructure,
  _swigc__p_fastjet__ClusterSequence__Extras,
  _swigc__p_fastjet__CompositeJetStructure,
  _swigc__p_fastjet__Error,
  _swigc__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t,
  _swigc__p_fastjet__InternalError,
  _swigc__p_fastjet__JetAlgorithm,
  _swigc__p_fastjet__JetDefinition,
  _swigc__p_fastjet__JetDefinition__Plugin,
  _swigc__p_fastjet__JetDefinition__Recombiner,
  _swigc__p_fastjet__PseudoJet,
  _swigc__p_fastjet__PseudoJetStructureBase,
  _swigc__p_fastjet__PseudoJet__UserInfoBase,
  _swigc__p_fastjet__Selector,
  _swigc__p_fastjet__SelectorWorker,
  _swigc__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t,
  _swigc__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t,
  _swigc__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t,
  _swigc__p_fastjet__integral_typeT_bool_false_t,
  _swigc__p_fastjet__integral_typeT_bool_true_t,
  _swigc__p_int,
  _swigc__p_p_PyObject,
  _swigc__p_p_double,
  _swigc__p_p_fastjet__PseudoJet,
  _swigc__p_p_int,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_fastjet__PseudoJet_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ostream,
  _swigc__p_std__valarrayT_double_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t,
  _swigc__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t,
  _swigc__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
        0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
        0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  
  // for numpy
  import_array();
  
  // setup error class
  fastjet::Error::set_print_errors(false);
  FastJetError_ = PyErr_NewException("pyfjcore.FastJetError", NULL, NULL);
  Py_INCREF(FastJetError_);
  if (PyModule_AddObject(m, "FastJetError", FastJetError_) < 0) {
    Py_DECREF(m);
    Py_DECREF(FastJetError_);
  }
  
  // turn off printing banner
  fastjet::ClusterSequence::set_fastjet_banner_stream(new std::ostringstream());
  
  // default pseudojet printing
  fastjet::set_pseudojet_format(fastjet::PseudoJetRepresentation::ptyphim);
  
  
  // thread safe initialization
  swig::container_owner_attribute();
  
  SWIG_Python_SetConstant(d, "FJCORE_VERSION",SWIG_FromCharPtr("3.3.4"));
  SWIG_Python_SetConstant(d, "FJCORE_VERSION_MAJOR",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "FJCORE_VERSION_MINOR",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "FJCORE_VERSION_NUMBER",SWIG_From_int(static_cast< int >(30304)));
  SWIG_Python_SetConstant(d, "FJCORE_VERSION_PATCHLEVEL",SWIG_From_int(static_cast< int >(4)));
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  Py_DECREF(globals);
  SWIG_addvarlink(globals, "pi", Swig_var_pi_get, Swig_var_pi_set);
  SWIG_addvarlink(globals, "twopi", Swig_var_twopi_get, Swig_var_twopi_set);
  SWIG_addvarlink(globals, "pisq", Swig_var_pisq_get, Swig_var_pisq_set);
  SWIG_addvarlink(globals, "zeta2", Swig_var_zeta2_get, Swig_var_zeta2_set);
  SWIG_addvarlink(globals, "zeta3", Swig_var_zeta3_get, Swig_var_zeta3_set);
  SWIG_addvarlink(globals, "eulergamma", Swig_var_eulergamma_get, Swig_var_eulergamma_set);
  SWIG_addvarlink(globals, "ln2", Swig_var_ln2_get, Swig_var_ln2_set);
  SWIG_addvarlink(globals, "MaxRap", Swig_var_MaxRap_get, Swig_var_MaxRap_set);
  SWIG_addvarlink(globals, "pseudojet_invalid_phi", Swig_var_pseudojet_invalid_phi_get, Swig_var_pseudojet_invalid_phi_set);
  SWIG_addvarlink(globals, "pseudojet_invalid_rap", Swig_var_pseudojet_invalid_rap_get, Swig_var_pseudojet_invalid_rap_set);
  SWIG_Python_SetConstant(d, "PseudoJet_X",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::X)));
  SWIG_Python_SetConstant(d, "PseudoJet_Y",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::Y)));
  SWIG_Python_SetConstant(d, "PseudoJet_Z",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::Z)));
  SWIG_Python_SetConstant(d, "PseudoJet_T",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::T)));
  SWIG_Python_SetConstant(d, "PseudoJet_NUM_COORDINATES",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::NUM_COORDINATES)));
  SWIG_Python_SetConstant(d, "PseudoJet_SIZE",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::SIZE)));
  SWIG_Python_SetConstant(d, "N2MHTLazy9AntiKtSeparateGhosts",SWIG_From_int(static_cast< int >(fastjet::N2MHTLazy9AntiKtSeparateGhosts)));
  SWIG_Python_SetConstant(d, "N2MHTLazy9",SWIG_From_int(static_cast< int >(fastjet::N2MHTLazy9)));
  SWIG_Python_SetConstant(d, "N2MHTLazy25",SWIG_From_int(static_cast< int >(fastjet::N2MHTLazy25)));
  SWIG_Python_SetConstant(d, "N2MHTLazy9Alt",SWIG_From_int(static_cast< int >(fastjet::N2MHTLazy9Alt)));
  SWIG_Python_SetConstant(d, "N2MinHeapTiled",SWIG_From_int(static_cast< int >(fastjet::N2MinHeapTiled)));
  SWIG_Python_SetConstant(d, "N2Tiled",SWIG_From_int(static_cast< int >(fastjet::N2Tiled)));
  SWIG_Python_SetConstant(d, "N2PoorTiled",SWIG_From_int(static_cast< int >(fastjet::N2PoorTiled)));
  SWIG_Python_SetConstant(d, "N2Plain",SWIG_From_int(static_cast< int >(fastjet::N2Plain)));
  SWIG_Python_SetConstant(d, "N3Dumb",SWIG_From_int(static_cast< int >(fastjet::N3Dumb)));
  SWIG_Python_SetConstant(d, "Best",SWIG_From_int(static_cast< int >(fastjet::Best)));
  SWIG_Python_SetConstant(d, "NlnN",SWIG_From_int(static_cast< int >(fastjet::NlnN)));
  SWIG_Python_SetConstant(d, "NlnN3pi",SWIG_From_int(static_cast< int >(fastjet::NlnN3pi)));
  SWIG_Python_SetConstant(d, "NlnN4pi",SWIG_From_int(static_cast< int >(fastjet::NlnN4pi)));
  SWIG_Python_SetConstant(d, "NlnNCam4pi",SWIG_From_int(static_cast< int >(fastjet::NlnNCam4pi)));
  SWIG_Python_SetConstant(d, "NlnNCam2pi2R",SWIG_From_int(static_cast< int >(fastjet::NlnNCam2pi2R)));
  SWIG_Python_SetConstant(d, "NlnNCam",SWIG_From_int(static_cast< int >(fastjet::NlnNCam)));
  SWIG_Python_SetConstant(d, "BestFJ30",SWIG_From_int(static_cast< int >(fastjet::BestFJ30)));
  SWIG_Python_SetConstant(d, "plugin_strategy",SWIG_From_int(static_cast< int >(fastjet::plugin_strategy)));
  SWIG_Python_SetConstant(d, "kt_algorithm",SWIG_From_int(static_cast< int >(fastjet::kt_algorithm)));
  SWIG_Python_SetConstant(d, "cambridge_algorithm",SWIG_From_int(static_cast< int >(fastjet::cambridge_algorithm)));
  SWIG_Python_SetConstant(d, "antikt_algorithm",SWIG_From_int(static_cast< int >(fastjet::antikt_algorithm)));
  SWIG_Python_SetConstant(d, "genkt_algorithm",SWIG_From_int(static_cast< int >(fastjet::genkt_algorithm)));
  SWIG_Python_SetConstant(d, "cambridge_for_passive_algorithm",SWIG_From_int(static_cast< int >(fastjet::cambridge_for_passive_algorithm)));
  SWIG_Python_SetConstant(d, "genkt_for_passive_algorithm",SWIG_From_int(static_cast< int >(fastjet::genkt_for_passive_algorithm)));
  SWIG_Python_SetConstant(d, "ee_kt_algorithm",SWIG_From_int(static_cast< int >(fastjet::ee_kt_algorithm)));
  SWIG_Python_SetConstant(d, "ee_genkt_algorithm",SWIG_From_int(static_cast< int >(fastjet::ee_genkt_algorithm)));
  SWIG_Python_SetConstant(d, "plugin_algorithm",SWIG_From_int(static_cast< int >(fastjet::plugin_algorithm)));
  SWIG_Python_SetConstant(d, "undefined_jet_algorithm",SWIG_From_int(static_cast< int >(fastjet::undefined_jet_algorithm)));
  SWIG_addvarlink(globals, "aachen_algorithm", Swig_var_aachen_algorithm_get, Swig_var_aachen_algorithm_set);
  SWIG_addvarlink(globals, "cambridge_aachen_algorithm", Swig_var_cambridge_aachen_algorithm_get, Swig_var_cambridge_aachen_algorithm_set);
  SWIG_Python_SetConstant(d, "E_scheme",SWIG_From_int(static_cast< int >(fastjet::E_scheme)));
  SWIG_Python_SetConstant(d, "pt_scheme",SWIG_From_int(static_cast< int >(fastjet::pt_scheme)));
  SWIG_Python_SetConstant(d, "pt2_scheme",SWIG_From_int(static_cast< int >(fastjet::pt2_scheme)));
  SWIG_Python_SetConstant(d, "Et_scheme",SWIG_From_int(static_cast< int >(fastjet::Et_scheme)));
  SWIG_Python_SetConstant(d, "Et2_scheme",SWIG_From_int(static_cast< int >(fastjet::Et2_scheme)));
  SWIG_Python_SetConstant(d, "BIpt_scheme",SWIG_From_int(static_cast< int >(fastjet::BIpt_scheme)));
  SWIG_Python_SetConstant(d, "BIpt2_scheme",SWIG_From_int(static_cast< int >(fastjet::BIpt2_scheme)));
  SWIG_Python_SetConstant(d, "WTA_pt_scheme",SWIG_From_int(static_cast< int >(fastjet::WTA_pt_scheme)));
  SWIG_Python_SetConstant(d, "WTA_modp_scheme",SWIG_From_int(static_cast< int >(fastjet::WTA_modp_scheme)));
  SWIG_Python_SetConstant(d, "external_scheme",SWIG_From_int(static_cast< int >(fastjet::external_scheme)));
  SWIG_addvarlink(globals, "JetDefinition_max_allowable_R", Swig_var_JetDefinition_max_allowable_R_get, Swig_var_JetDefinition_max_allowable_R_set);
  SWIG_Python_SetConstant(d, "ClusterSequence_Invalid",SWIG_From_int(static_cast< int >(fastjet::ClusterSequence::Invalid)));
  SWIG_Python_SetConstant(d, "ClusterSequence_InexistentParent",SWIG_From_int(static_cast< int >(fastjet::ClusterSequence::InexistentParent)));
  SWIG_Python_SetConstant(d, "ClusterSequence_BeamJet",SWIG_From_int(static_cast< int >(fastjet::ClusterSequence::BeamJet)));
  SWIG_Python_SetConstant(d, "epxpypz",SWIG_From_int(static_cast< int >(fastjet::epxpypz)));
  SWIG_Python_SetConstant(d, "ptyphim",SWIG_From_int(static_cast< int >(fastjet::ptyphim)));
  SWIG_Python_SetConstant(d, "ptyphi",SWIG_From_int(static_cast< int >(fastjet::ptyphi)));
  SWIG_addvarlink(globals, "PseudoJetRep_", Swig_var_PseudoJetRep__get, Swig_var_PseudoJetRep__set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

